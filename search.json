[{"title":"2023学年第一学期总结","path":"/Private/6ff890c8.html","content":"大三上学期学习情况‌|课程代码|课程名称|分数 || ————- | —————— | ———- || CS3309 | 计算机伦理学 | 85 || CS3311 | 计算机网络（D类） | 82 || CS3314 | 密码学与信息安全基础 | 82 || CS3317 | 人工智能（B类） | 87 || CS4314 | 自然语言处理 | 89 || ME1221 | 工程学导论 | 80 || LIS1001 | 信息素养与实践 | 88 || FL2401 | 日语精读（2） | 81.45 || FL2402 | 日语视听说（2） | 72.5 |‌‌ ‌‌‌本学期学积分84.12，排位80/101，和上学期差不多吧，已经躺平了x 学得最认真的是计算机网络，但是因为出卷的题目风格很特别的原因（）复习得不太到位，考的不太理想。别的的话就是普普通通地写了作业，密码学感觉真没怎么学懂原理但是考试差不多能懂。 这学期依然代码量很低，在人工智能和NLP两门课接触到了一些代码但是不算复杂，感觉没有很大的进步。也接了一点课余的代码单子，但是没有触及到很多让我进步的内容。 搬家这学期很大的不一样的地方就是从学校宿舍里搬出来了，更多的时间在独处。基本上空的时间不是在家里就是在电玩城（）。也没有很特别的感觉，最主要是能自己做饭确实很省钱而且很自由，但是和同学的交往也不方便很多。 寒假旅游去千岛湖随便玩玩！还挺开心的，住了之前双十一订的打折喜来登，感觉一整个消费升级。但是总有种很错位的感觉，就是……嗯……我还是穷的吧（。） 工作继续和姐妹完善Unity的小项目，打算今年上半年参加比赛。但是我感觉我也没有很想做游戏，我本身对游戏也没有什么执念，做完这个应该就不做了，后面随缘吧。 游戏没怎么玩游戏，把lite卖掉了（。）闲置有点可惜（而且因为switch2出了在掉价了）。但是开始玩舞萌DX（一种街机音游），承包了我很多空余时间，认识了很多学校的同好。 大三下学期","tags":["LearningMatome"],"categories":["Private"]},{"title":"海边的异邦人","path":"/Drama-Bangumi/8b159a7.html","content":"偏好：3/5标签：BL/青春（？）简介： 《海边的异邦人》，日本动画，改编自纪伊カンナ创作的同名漫画，讲述了住在冲绳离岛上的桥本骏，结识了失去父母的孤独高中生知花实央后发生的一系列故事。 该动画由Studio云雀制作，大桥明代执导，松田太志、松冈祯丞、岛村侑等人配音，于2020年9月11日在日本上映。 住在海岛上高中生知花实央，因为失去了父母，经常一个人坐在海边。住在冲绳离岛上的桥本骏很在意常常坐在长椅上看海的孤独少年——知花实央，于是上前与对方攀谈，两人逐渐变成好友。知花实央为了快一点成长为大人，决定离开本岛，后来二人慢慢断了联系。 3年后，实央再次出现在骏的面前，还大胆告白。不断拒绝的骏挡不住实央的热情，有了妥协的迹象，但就在此时，骏的前未婚妻——樱子找来了。骏在数年之前因为自己的性向而拒绝了婚事，也与家人断绝联系，但因为骏的父亲身体不好，樱子希望骏能回家。 故事讲述住在冲绳离岛上的桥本骏(村田 配音)，结识了失去父母的孤独高中生知花实央(松冈 配音)，两位少年成了好友。实央为了快点成长为大人，决定离开本岛，两人渐渐断了联系。3年后，实央却再次出现在骏的面前，还大胆告白。 Report 短，简单的故事，在篇幅内呈现得不错；最主要是画得好看，妹妹可爱。因为这点才被短视频骗进来了（） 主要人物三个，黄毛男主，黑毛男二，黑毛女主。两位黑毛都特别萌…… 只看正片完全没磕到男主和男二，不如说完全感受不到男主的人格魅力。……男二你为啥对他死心塌地啊，就因为他天天盯着你背影看嘛？不是，那是变态吧…… 前面主要给的是关于男主的两个镜头，一个是男主天天偷窥男二坐在海边盯着海发呆，一个是男主在学校里被人背后说性取向有问题。剪切相当地文艺片，频繁地使用花卉转场。在两个镜头的叙事之间，讲述男主和男二读书的时候的成为朋友（？）的故事，和后面女主说男主读书的时候看着男二打篮球不敢告白的镜头是呼应的。中间也说到男主喜欢写文章，照应到后面男主的职业。然后是关于男二的手腕上两根带子还有回忆母亲（咖喱）的镜头，带子在后面解释了是母亲留下的。这样子下来把两个人的背景都介绍清楚了，家庭和和美美但是喜欢男孩子的男主，家庭变故的有点敏感的孤独的男二，这样子相遇了。 男二回来以后，开始猛猛倒贴男主，感觉这里有点用力过猛，如果说保持一贯的细腻的有点朦胧的氛围的话没必要写得男二这么廉价……男二一直在贴男主，男主对此假装忙碌、爱答不理，看到男二打工在客人里很受欢迎又狂吃飞醋。……男二都说得那么明白了，哥们这是干啥呢……终于一个雨天男二终于忍受不了之后二人关系才进了一步。这个时候女主出场打断约会（如果是男主幼驯染的话，前面一个分镜都不给是不是有点过分啊……好突然地引入），男主对着男二又是一通支支吾吾啥也不说，把女主逼得也想不开了 。 减分啊……男二你喜欢他哪……篇幅内没体现出来两位黑毛喜欢黄毛的原因啊…… 然后进入最终段，擅长劝人的实央君把女主劝好了，接着劝好男主。……男主你还真好劝。最抽象的莫过于女主要走的时候，问能不能让男主亲一下，男二冲上去亲了（草），不是，男二你吃男主亲妹妹的醋，男主为啥不吃你亲妹妹的醋哇。贵圈……之后两位男主关系就逐渐稳定了，男主想要独自回去，因为看到男二的寂寞所以决定一起回去面对家里。 顺带一提，是黄毛0……！不过看样子是轮流当0 一组女性向漫画里常见的人设，立体度就一般般吧，但是作画是真的特别可爱。女主也特别可爱，特别特别可爱一只公主切……剧60分，作画音乐配音100分，妹妹120分。妹妹找个好人爱吧。… 以及，这种喜欢把某经验挂在嘴边说哎没意思没感觉的设定真的很樱花妹BL漫画，好无语，……让我想起来那个“哎~不喜欢女的但是跟女的谈了，果然好没意思”的角色……真不算打拳吧，樱花妹真的好爱BL男","categories":["Drama/Bangumi"]},{"title":"转生王女与天才千金的魔法革命","path":"/Drama-Bangumi/8a28fdf3.html","content":"偏好：4/5标签：百合/异世界/轻松简介： 在童年时重拾前世记忆的公主艾妮丝菲亚，因为无法使用魔法而遭到贵族的鄙视。但她却建立了独特的魔法理论并一直独自研究魔法，在某个机缘巧合下，艾妮丝菲亚撞见了天才公爵千金尤菲莉亚遭到剥夺王妃候补地位的场面。为了帮助尤菲莉亚重拾名誉，艾妮丝菲亚所选择的方法竟是要对方跟她同居，一起研究魔法！？“尤菲，你愿意跟我来吗？”“只要您不嫌弃，无论是去天涯海角，我都会陪在您身边，艾妮丝殿下。”怪咖转生公主与冰山美人天才千金的邂逅，将持续为这个国家、这个世界，还有两人的未来带来变化。王宫百合奇幻物语，就此揭幕！本作改编自鴉ぴえろ的同名轻小说。 Report 特别特别萌…特别特别特别萌…啊啊啊啊啊啊啊… 主要氛围是轻松向的，故事也比较简单，基本上就是讲述了一个最向往魔法却不能使用魔法的王女和看似无所不有其实好像又一无所有的天才少女的双向救赎的故事（？）。 好看的部分尤其集中在前半部分，后半个人来说发展有点仓促（甚至可以说有点烂尾吧）但是还是很萌！对于轻松向bangumi来说，感觉人物刻画得讨喜了根本就不用很在意剧情的一些细节都行（本来也不长），看看妹妹贴贴就很开心。而且因为依然有剧情展开，不算完全的日常向，也不会觉得无聊。 涉及到的每个美少女角色都很萌！研究诅咒的宅宅美少女、三无吐槽役其实很温柔的女仆、戴小白花的清纯美少女。不过说到体内的魔力会自发引诱人亲近自己的妹妹设定，想起来一部非健全向的异世界小说（），那本也非常非常好看！让我想起来了就好想再看一遍了。 撞人设确实撞的，但是确实是萌啊啊啊，轻松向撞点人设也没什么大不了的，反正都是看萌妹妹贴贴，哎，喜欢好人多的世界，感觉被治愈了，好温柔……剧里的大家都好温柔，国王也好，首相也好，围绕着女主的世界是温柔的，围绕着女主的人们也大多是温柔的。或者这也是一种叙述者视角吧，如果从王子的视角就不一样了（但是就从番剧本身的篇幅来看，王子相关的内容全都刻画得好混乱……纯纯减分项了） 萌，时看时萌（再度） 也不是说会混淆判断的程度，不至于说得很神，但是看了会觉得很开心！ 感觉经常会碰到成对出现的象征自由和象征束缚的角色贴贴救赎的故事呢，不过二次元的人物常常很极端就是了。女主的自由、灿烂、以及仿佛用不完的能量，让人看到就不禁心生向往，这种特质在一集里就很清楚地传达给观众了，像打动女二一样打动观众。不过现实中，我们既不是女主也不是女二，要说的话这种自由和束缚感正在二者之间吧。有时候很难忽略，女主的自由（以及阴暗诅咒宅宅身上的自由）来源于背后的权势地位，来源于女主开明（开朗）的父亲对她的纵容，也有来源于她自身强大的意志力和能力，而在最后几集，也能看到这些权势地位对她的反噬……可是无论如何女主这样的闪闪发亮的人还是让人忍不住想要去注视、想要去靠近。女二一开始说，尽管在她身边，却还是感觉到”遠くて”，我觉得也是很真实的心情。（虽然女二也是既有天赋又有努力的确确实实的天才少女，如果不是在这个环境里即使没有女主也该是能够凭借努力闪闪发光的人吧…呜呜呜…）","categories":["Drama/Bangumi"]},{"title":"EvenIfTempest黄昏中魔女如是说","path":"/Tavg/Sakura/5c4f0a38.html","content":"和很多商业乙女作风格==截然==不同的剧情向乙女（？）作！在少有竞品的基础上不愿意多做批评的故事。剧情的设计难度要比甜饼大很多，也带来了全新的体验。虽然在Gal里面常见有复杂剧情的同时也有感情线的故事，但是乙女里相比之下真的不多，对此我感恩戴德；； — 0 共通—事件梳理 事件1 - 逃离林赛尔家的那个早上 窒息的家庭环境和依然存在对美好事物向往的心 被接走了！ 事件2 - 财政？第一次死掉 接触财政事务以向大王子强调自己的意义 为了学习财政向泽恩要来很久的账本 但是财政事务有问题！ 找到泽恩商量，派遣玛雅找证据 得知玛雅被大王子谋杀当晚从窗户中一跃而下，进入人生的下一次 事件3 - 魔女？异端？ 急切地想要救下玛雅而暴露了身份，被烧死了，而路西恩也借此机会被大王子铲除 决定回到一切发生以前…… —1 难飞之翼—事件梳理 事件1 - 骑士之路 睁开双眼年已十八，一下子又跳过了许许多多（玛雅怎么还在给你当奶妈！） 日常： 为了成为准骑士而努力！期间遇见了伪装成小画家的柿子魔女（没有小画家天然hhh） 酒馆事件： 第一次遭遇恩达 副团长是交际花？ ：竟然和姑母待在一起 通过考试成为了冠军！（振臂） 事件2 - 魔女之夜 无法拯救玛雅而无数次复苏……只能下定决心先克服现在的难关 副团长到底有什么病？ 到底是谁莎了玛雅？？ 事件3 - 约会和养鸟的日常 养鸟：鸟变红了！团长有救了！ 约会：穿裙子，解释团长背景，短暂地舒缓一下剧情节奏 事件4 - 恩达与教堂之夜 又一次遇见了恩达，恩达解决了魔女，团长从恩达手中保护了我俩（？） 教堂事件：教堂小弟因为团长姐姐、也是他的幼年挚友的事情一个人全灭枢机团，团长为了保护他打算顶罪（本来也已有死志） 胖胖小弟暴走：女主差点被干掉，但是团长过来搭了把手，现在就是两个人手拉手一起赴死啦，哈哈（无慈悲）团长也因为诅咒崩坏了 初印象： 我朝！好精致的UI！好特别的画风！类似竞品没见过的！ （最近在做游戏）这个系统感觉做起来还挺麻烦，研究一下怎么做的。还有你们这个读档系统到底用啥搓的怎么还会卡加载啊？（侧目） 我真的会谢谢你们这个对遥杆不知道抱有什么恨意的制作组（流泪）一直按那个十字键翻菜单翻线索快给我按无语了。另外，也没有Jump功能；；你们这个不是2023年的游戏吗啊啊啊 文本框的UI动画好卡啊哥，我们真的有必要在一直需要点击和反馈的文本框上做那么精细的动画吗，如果想要剧情速读的话很容易一句话没放完文本框的动画就跳掉了…… 近结尾同样是仓促转折，历尽千难万险成为骑士了还没登过一次殿，立刻因为教堂事件发电的小哥送走了团长，然后立刻因为胖胖哥对玛雅耿耿于怀送走自己。啊？嗯。啊。不是不能接受，说不上毫无铺垫，虽然要是能多加点我会更能接受，嗯，但是觉得人生真是如戏啊。 林赛尔这位妹妹啊，我是真的有点想相信你……但是真的好恐怖啊啊啊啊啊啊 这周目感觉最主要的还是重新铺垫女主的第二次人生，别的嘛，嗯，玩玩而已…… BLE：让——我——看——看——！！！！ 很好的&lt;好结局&gt;，给我了一种当时推终远的感受……所有角色的一周目都强制绝望end是吧！好…… —2 无果之花—非常紧凑，几乎全部是为了剧情推进服务。 事件梳理 事件1 - 魔女之夜 魔女之夜以后：直击阿卡纳哥和团长哥的审问现场！女主入局，进入调查环节。调查环节引入了忍者的相关铺垫。 魔女审判：非常精彩的推搡过程！枢机和大王子暂时同盟指认团长，智慧团长和阿卡纳哥兄友弟恭巧解谜团，中间穿插拉魔女入局之后女主的魔力暴露给了阿卡纳哥和大王子。魔女审判结束后铺垫女主看到了阿卡纳哥心爱的发光小花。 事件2 - 遗孤调查 第一个案子： 进入审判官的日常工作，遇到的第一个案子就再次向阿卡纳哥暴露身份了（其实这个事件设计得感觉不怎么必要） 信件：向阿卡纳透露想要找人和路西恩信件一事 巧合：深夜和骑士小弟一起去调查事件结果碰到阿卡纳哥第二身份（忍者/猎犬），顺着回到办公室结果被大王子带走。 事件3 - 大王子事件 大王子的谈判：就是寄得非常快啊！阿卡纳哥悲伤自爆，大王子通过条件交换指出让女主回林赛尔家拿回可以验证血脉的蔷薇。阿卡纳哥：不要去——是陷阱——（。） 玛雅灭门：回去一看哎呦怎么这么轻松，定睛一瞧我朝玛雅把林赛尔家直接灭门了…… 事件4 - 第二次主持的魔女审判 与魔女交易添加人选，和玛雅设局证明了王的不纯血统，也解决了大王子的控制？？？？（啊？） 回头一看阿卡纳哥在悲伤中紫砂，。…… 这次带着两位前夫（？）的记忆转生吧！ 啊？？？ 近结尾仓促转折！！玛雅坏的好突然啊啊啊 BLE：啊啊啊！！让——我看看！！让我看看盖饭啊！！！（蠕动）让我看看审问官小哥的表情！！啊啊啊！！！！！不给我看！！！（蠕动）多好吃啊多好吃啊谁来做饭啊啊啊 灵魂回溯这种能力本来就是很异常的……可以看到女主走到这里想法已经和一开始截然不同了，玛雅对魔女臣服之后，女主的第一个想法不是立刻回去想办法撤销玛雅的必死结局，而是利用现在的局势解决问题。我其实还挺难过的。从那种“反正都是要死的不如多解决几个人”的心情里为玛雅觉得很难过。 走到这里，发现女主的仇敌还真是不少啊，因为虐待而无法原谅的姑母，因为将她作为工具利用和欺骗而无法原谅的大王子，因为不是个好国王而讨厌的国王（啊？），还有因为善良和对帮助自己的魔女的回报而讨伐的柿子魔女（柿——子——）！ 二周目印象总结 感觉编剧的叙事风格是更加……硬朗一些的？以推进剧情为主题，偶尔插入一些情感表达；其中也以关注自身情绪的更多于关注周围的人。这某种意义上是相当符合叙述主体的身份的，背负着深切的不甘与仇恨、拥有着改写一切也是让一切一如未曾发生过的能力（即是一种虚无）的女主对身边的伙伴的关注也的的确确是有所欠缺的（如剧本所述），我觉得这也可能是和剧本娘自身的性格倾向有部分共情。这一点和很多乙女游戏是截然不同的，带来一种新鲜的体验。 不过，对于一个让玩家更有代入感的故事来说，相比对讲述故事的执着，对描绘情感的重视是稍有欠缺的……围绕女主的初始好伙伴，玛雅和路西恩，居然在讲述女主过往的时候几乎完全略过，而直到二周目（目前只玩到二周目）我都完全理解不了玛雅和路西恩对女主的支持来源于哪里。报恩就算了，你们日本人……；但是为了一个童年玩伴（甚至对方都记不太清了）而牺牲自己拯救对方是很容易理解的事情吗？好像多花一点笔墨就要费很多钱一样啊啊啊啊。 故事的信息密度和情绪密度都维持在一个比较高的水准，极少出现让玩家一段时间都感到白开水的段落（抽掉恋爱剧情后的空缺都由信息补上了）。 —3 烟焰弑君罪——4 — 玩家已经三周目了，嫌疑人里的村民，审判官和嫌疑人里的狼全都当过了，这回要是重复上面可能就会有点没意思了。但是很意料之外地，这次玩家从一直是炮灰的路西恩的视角触发了。 我一直说觉得剧本娘的情感描绘比剧情描绘要弱，但是到3-4周目我又觉得没那么冰冷和自我了，可能是女主的心境也有所变化吧。很完美的，在女主最失望的时候，把象征着太阳的三王子带到她的身边；而女主也曾经是三王子的太阳。","categories":["Tavg","Sakura"]},{"title":"2022学年第二学期总结","path":"/Private/b1a77d90.html","content":"大二下学期学习情况‌‌‌ 不知道从哪说起，还是先贴成绩单吧；；。 课程代码 课程名称 学分 总评 CS2310 现代操作系统 3 83 CS2303 操作系统课程设计 2 100 CS2304 计算机科学中的数学基础 3 60 CS2305 计算机系统结构（A类） 3 87 CS2306 计算机系统结构实验 2 87 CS2308 算法与复杂性 3 87 PHY1253 大学物理(A类）（3） 2 82 FL1401 日语精读（1） 6 87.1 FL1405 日语视听说（1） 2 91 MARX1203 毛泽东思想和中国特色社会主义理论体系概论 3 77 MARX1205 形势与政策 0.5 82 PE004C22 导引养生 1 93 ‌‌‌ 2021年总学积分82.4，排位79/102，越学越烂了草（恼）不过确实说不上特别认真，计算机数学和大学物理都是速成的，物理因为缺勤丢了好多平时分（不然说不定有90嘞（这个人在得意什么）），计算机数学是真的速成不了感谢没挂。啊啊、现在的想法就是保不了研的话几分都无所谓啦……拖后腿主要是计算机数学和毛概，哎呀这个我也没办法不是嘛。 另，日语精读怎么考这么差啊啊啊啊，平时日语游戏都随便玩的……不过好像不算进任何一个分数项目里，本来想查卷子的，嘛，算啦。但是日语课上得真的很开心！ 其实前半个学期状态都蛮差的，开始很后悔为什么选这个专业，主要是因为计算机数学和算法对我来说都超级陌生，选了特别好的班级老师进度也拉得比较猛，一眨眼就听不懂了……一想想自己对写代码的偏爱，羡慕死了隔壁软工的同学。这学期唯一一门沾传统代码项目的课，现代操作系统的实验，分数也看得出我的超级努力（悲）。这一点在我的同基础的同学中间还是挺骄傲的嘞&gt;&lt; 。不过后来慢慢地就接受了这件事，想着既然选了就努力学好吧，而且每个专业的同学大家各自有各自的辛苦嘛。 也挺感慨的。尤其到近期末几周，每天就都很焦虑，狠狠补没学明白的课，结果第一次阳了，感觉这次可能得吃退警了，觉得自己很没用，发着烧拼命想看书看不进去嗷嗷哭，很困扰量子力学明明觉得又不喜欢又对自己没什么用还非要学，还有几周就要考试了还一点都不会。很意外地，和室友一起挤在我电脑大屏幕前面对着量子力学进行速成式的学习，最后还是考了个不错的分数。不过这种体验还是不要有第二次了…… 日常科研本学期加入了甘小莺老师与DDE相关的小组，主题是围绕着地学数据进行的信息提取、收集、整理、验证、可视化等等。选择加入这个小组也和我之前自己做博客的时候想到过的问题有关，想要从不同格式的网页中收集指定的信息。在小组里，每周参与组会能学到很多东西，也会在push下（）写很多的代码。代码还是多写会写得更好！！ 打工打工在这学期无疑成为了我很重要的一个部分（甚至有点过于重要了……）。 一方面，我接下了一个为期一学期的代码外包，大概每周做一次项目。在chatgpt帮我打框架、初步完成一些简单的函数等的基础上，其实做得还算比较轻松。不过由于经常会遇到C++17特性相关的要求，学到了很多；也是在这里第一次遇到几十个文件构成的较大的代码项目，对项目的管理有了一些认识。偶尔也会接一些其它的爬虫单子，基本都在舒适区。 另一方面，每周有两次家教打工，周六是3小时的高一英语家教，周日是上午2小时+下午2小时的高三数学家教，看起来时间不多，其实对我的生活影响还挺大的，让我觉得下学期要留出更多休息时间才行。周六周日对我这种混子来说本来应该是最可以理直气壮地想干嘛干嘛的时间（周中就会比较想干正事），但是有家教的话把我本来完整的休息时间给破坏掉了……不过，就结果而言，两个家教对象的收获都是显著的，我还是挺开心的&gt;&lt;。（而且说不定是我此生时薪最高的时候了TT） 游戏没有好好地玩游戏&gt;&lt; 比起以往几个学期基本每个学期都要干十几个文字游戏的惯例，这学期几乎没什么闲暇沉下心玩游戏，买了P5R断断续续断断续续地玩拖了很久还没玩完，塞尔达同理，还有一年前就买了的尼尔机械纪元（……）文字游戏也基本上只玩了最新的。这就是电子养胃的感觉吗……不过文字游戏那边，我确实是有话说，感觉对少女童话一样的剧情渐渐腻味了，可是想要写出自己的故事又很难，成为了一种只会挑剔但不会创作的玩家呢（） 暑假旅游本暑假最期待的项目！先是和父母回老家走了一下亲戚，然后是和一个朋友去了另一个朋友家那边（山东威海）玩！真的玩得很开心&gt;&lt; 工作在八月底之前都没有再继续家教的打工，也没有接代码单子，而与此同时，和好姐妹开始做unity项目。大概是个三人的小工作室，做一个以文字交互为主体的养成系游戏，预计工期半年，我负责所有的程序工作并且插手一些文字工作。暑假期间从零开始学unity，到七月底准备去她家那边玩的时候已经基本把游戏的代码框架全部做完了&gt;&lt;（好像也是写代码以来少于五次中的一次操作文件比较多的代码，进一步感觉到写作习惯真的很重要啊） 感觉已经基本掌握了unity的使用方法，但是我果然还是缺少灵感。或者说我自己就不太是独立游戏类目的目标玩家……我就不太爱玩游戏，与其说我在玩游戏不如说只是在阅读故事，游戏只是一种呈现方式，但是我对游戏性好像没有什么追求呢。不过如果去游戏公司的话，是不是也不一定得有什么想法呢，只要照着策划的要求尽量用高效地完成就可以了吗……我也不太清楚哎。 在八月底，一不小心重操旧业，又继续了每周5h+的家教的日子，但是这次新增的是一个初一的小姑娘的课，感觉上得两方都很愉快，应该不会像之前那个高三生那么亚历山大了（吧）。啊啊，开学如果觉得很影响心情再说吧。 游戏在Switch2的消息出来前一个月冲动消费买了Oled谁懂啊，但是爽也不能说没爽到（甚至买了健身环）。事实上来说，也就是刚买oled几天一直激情游戏，后面依然是拿着lite躺床上玩（oled的重量根本就拿不动啊啊）。 爽玩了一些ns上移植的老文字游戏作品比如逆转裁判和弹丸论破，还有pc端的一些，不过自从学了unity以后玩游戏的想法就有点细微变化了，会有点不由自主地去考虑它是怎么做的。各种地方能看到的用心呢……解密系作品里比较复杂的触发逻辑，多样的特殊效果……想到一个适配win xp的游戏lamento甚至做了很复杂的人物动效和多种对话模式，如果要我来模拟一下的话还真的是觉得挺麻烦的啊啊（有些倒是还真的不是难做，只是觉得一定要做这么多细节的话一定要在很多地方做呼应，在剧本上也要约定相应的标记才行，会变得很麻烦）。好想去哪里实操一下看看大家都是怎么实现的啊！！到现在以Unity为核心的2d文字游戏也不少呢，我记得谎月就是用的unity内核呢。觉得2d的话难度应该不会大到我看不懂代码的程度，顶多是因为加入了各类功能变得很繁琐……？有空去读读什么游戏的源码应该有好处。总是闭门造车不行啊！！ 搬家！经过了一番考虑，还是决定从学校搬出来了！其实从课表上看课也不是特别少啦，但是一旦体验过了一个人住的爽就再也回不去了（。）东西很多，搬得也很辛苦；自己家很长时间没人住了，也是各种各样的东西需要收拾需要购买，每天拿一大堆快递回家。（甚至十二期分期买了扫地机器人&gt;&lt;真是科技服务生活啊啊！！可惜洗碗机不是很好部署）装了个大桌子非常开心！！自己做饭自己吃也很开心！请好朋友来家里打牌也很开心！！总之就是超级开心！！期待开学以后的新生活！ 仔细想想还是要好好省点钱用，暑假这波折腾下来基本上是没剩下多少米了，据说变有钱人的第一步就是学会储蓄然后再学会理财而不是很快地把钱都花掉，我要好好地学习这一点。 大三上学期预期应该是不会有什么大变化除了搬出来住（嘿嘿）。期待日语课！期待新鲜的专业课（只是因为新鲜&gt;&lt;学了的话心情可能还是会变化吧）！期待会不会有新朋友！（你们互联网限定E人……） 今年日语考个级吧别拖了（）想起来找辅修同学借了原版书来着好期待呀！正好写着写着想起来了。 而且好像要准备考研了呢，啊啊，反正走一步看一步吧，急也急不得啦。该学的东西就好好学啦！ 打工目前还是打算做，不过科研的话想要暂时停一个学期了，毕竟也刷了好几段科研履历了，不是很稀缺。可以的话，想在空余时间多学一点做游戏的东西，毕竟都开始学了感觉还是多学一点学个明白吧，成为游戏策划们的合格工具人（！）！ >&lt;总之！新的学期也要好好加油哦！","tags":["LearningMatome"],"categories":["Private"]},{"title":"ClockZero~终焉的一秒","path":"/Tavg/Sakura/2a71d181.html","content":"2023.08.02 无剧透篇 简评：粗糙的古早穿越系恋爱电影 标签：穿越/末日/校园 推荐：3-/5 （不是出于什么复古情怀的话，不太推荐） 篇幅：中短篇 发售信息：2010.10.13 Otomate PSP首发，PSV和NS端都有移植，目前均为日语，官方中文在易次元 背景 这一天，秋霖学园（一所顶流小学）新来一个转校生——据说是天才少年的海棠鹰斗，恰好与从小青梅竹马的九楼抚子（12岁）与加纳理一郎同班。在班主任神贺老师的介绍下，九楼抚子和加纳理一郎等几人开始参与了一个放学后的额外项目，完成一个又一个小任务，海棠鹰斗本不在其列，之后也加入其中。在这个过程中，几人的关系逐渐变好，度过了快乐的小学生活。 与此同时，九楼抚子每晚开始陷入奇怪的梦境。梦境里她作为幽灵，在一个末日一般的世界四处游荡，又好像可以被特定的一些人看见。在梦中的镜子里，她看见了22岁的自己的模样。 在放学后项目结束之后，巨大的变故发生了。 声优表可以听到声优们的夹子版本（小学生形态）和成人版本，还是很好玩的哈哈哈哈。 角色 声优 海棠鹰斗 浪川大辅 加纳理一郎 前野智昭 英円 鸟海浩辅 西园寺寅之助 杉山纪彰 时田终夜 石田彰 英央 须藤翔 总评 世界观和情节设计有大大小小的缺憾，角色设计也是出于更古早的审美偏好/到今天，就算不在意剧情只想看恋爱也有很多更出彩的作品，不是怀旧情怀的话已经不推荐玩了。 说在前面 体现了那个年代很多乙女游戏对碎片化的情节的喜爱，共通线基本由选定男主做任务 和选定男主一起回家 加上做梦选择梦里去哪三个大环节构成，穿插一些和男主的相处片段，确实是一种非常简单的构造故事的方法，但是二周目起不断快进的话故事的割裂感和碎片感非常严重。（而且这些小任务真的不好玩啊！！？） 前半剧情男女主都是12岁左右，主打很贵的小学的校园生活；后半剧情女主的心理年龄依然是差不多12岁（不过女主比较早熟，性格不讨厌，在日乙女主里算思想现代的） 对于多世界理论、时空跳跃之类的思考非常非常难以自圆其说（尤其在体现在某个角色身上），科学相关、政治相关的解释也是比剧本多想一点点都会痛苦得要死，除了恋爱以外什么都看不到。同时代的N+在2009年发售了命运石之门，比这个的思路要清晰得多…… 你也可以说博主不要在乙女游戏里追求科幻上更加能自圆其说，好吧，那你说得对，我的repo可能也不怎么需要看了。 （写repo要真只谈恋爱和人设，那就真的是各有所爱地发电了啊啊啊啊啊）或者说我是被安利了剧本充实抱有期待过来的，所以更加失望了，现在谁跟我夸一句CZ剧本写得好我就会流眼泪，打完本篇我真的一个字这个故事都不想多看了。 O社确实能基本保证人设和恋爱的稳定发挥。只是玩了更多的各有特点剧情向游戏，很难不期待能玩到更好的东西啊……人设和恋爱上的好的地方并不能遮盖掉世界观上没得到解释的细节和不合理的情节啊……而本作的人设也更偏向于古早乙女游戏的设计和萌点，按我的审美的话不是很能萌到我了。 女主视角主线不够把人设写立体（别说立体了，甚至有点没写明白），只能依赖整篇整篇的男主生平自述来强行补充我也是第一回见（多个角色的自述直接并排插进真相线）……确实有那么一点效果吧，但是这么作弊不好吧…… 剧透篇先来一点惯例的梳理吧。可能有点小偏差先说对不起，但是真的，再看一眼量子这个词我都会觉得对不起我上学期学的量子物理。对了，你怎么知道我一个学期没上课但是靠一周的复习考了八十多分？（？？？） 做一个简单的梳理 游戏世界观的基础是多世界理论，就是说女主的世界和King的世界不是同一个世界，他们有各自的时间线。 对于时间穿越，想要认真写好一点的话可能都会有点在意祖母悖论 创作者比较基础和常见的解决方法比如： A. 在一周目讲述故事时就埋下时间穿越的事件的种子，在讲述故事时尽量避免出现时间悖论 （很难写） B. 加入多世界理论，穿越到达的并不是现在的世界的时间轴之前的某个时间而是另一个世界，改变的是另一个世界的事件 （偷懒但有用） C. 存在一种机制会自动避免悖论发生（类似“世界意志”） 另外，时间穿越也包括人类肉体穿越和只有意识进行迁移（迁移到自己或他人）等方式。 石头门比较倾向于A，而Bustafellows就是完全未处理的朴素的时间穿越。它们都只使用了肉体穿越和意识穿越中的一种，而CZ两者都包含而且不加以任何的区分和解释还是有点让人遗憾。 CZ在文本中明示采用了B作为主体，而后面我们会用世界1（现代）和世界2（未来）来表述。 另外，剧本娘非常喜欢用现代和未来、年份等来区分两个世界的事件和人物，这和故事的基础的多世界观非常非常非常相悖，它们只能说是两个相似世界的不同时间点而已，比如说三体和地球是平行世界我们也不会因为对方的年历较大而称未来吧（倒是这种不同的世界中是否同样地衡量时间也是个问题……） 按世界梳理 世界1（女主真故乡） 世界2（末日世界） 世界2的时田终夜的意识穿越，但是忘记了任务 / レイン妹妹死去 / 女主 + 理一郎 幼驯染 女主 + 理一郎 幼驯染 鹰斗转学 鹰斗转学 课程项目活动（神贺干涉） / レイン嫉妒并希望借助鹰斗的才能时遇见了女主 レイン嫉妒并希望借助鹰斗的才能时遇见了女主 课题组 + 鹰斗 朋友关系 &amp; 选定男主 暧昧关系 理一郎 + 鹰斗 亲友关系 &amp; 英円 认识关系 Clock Zero 事件，时停 / / 水族馆日，レイン利用英円约出抚子并实施车祸 / 鹰斗在看望时支走理一郎，带走了女主的身体开始进行CZ研究 / 诸神黄昏：鹰斗的实验接近成功，世界崩坏，海棠集团建立政府 / 鹰斗与理一郎、英円等进一步接触，有心会成立；英央所在的中立情报组织形成中 / 有心会首领しぐれ被捕，芳宗上任 / 鹰斗决定带回世界1的女主的意识到世界2的女主身体，情报被レイン泄露 / 有心会终夜、寅之助获得情报并进行穿越任务 先从穿越故事的基础问题来说，中间涉及的其实是三种时空穿越。 在多世界穿越的故事里，一般假设至少穿越时的时间点时对齐的，就是穿越时应该去往某个世界的特定时间，如果可以选择去往某个世界的不同时间，那么祖母悖论依然没解决。如果本来就可以去往不同时间的话，为什么不直接回到自己的世界的某个时间呢…… 特定时间点 + 身体的穿越：鹰斗、理一郎、寅之助 如果沾科学的话怎么想难度都很大，但是不计较也没关系 特定时间点 + 精神的穿越：女主做梦、女主被拐 这两种其实不怎么一样，女主做梦其实有点怎么都解释不了的感觉，算了，毕竟都是做梦了 可以选定时间点 + 精神的穿越：终夜 最大的败笔……时间轴不对齐了 最好的解决方法是直接认为两个世界的时间流速本来就不一样，穿越过去在世界1度过2天可能在世界2只有2小时，不过这样的话レイン的跨世界电话可能会有点小问题（） 我也不敢很懂，这几种完全不同的穿越形式，在本篇里剧本娘是根本没有一点具体化解释的打算，全都用量子ごまかす，好吧，算了。你要不就直接说是魔法吧。 角色和故事相关 人设问题 现在来看，除了终夜、King和Rein之外的人设都有点过于简单和标签化了，基本上几句话就能讲完。或者说，在本篇里能丰富人设的事件比较有限，体现出来的人也比较普通（。），废话也比较多。 理一郎，标准的不爱想但是爱你的工具人（什么双语笑话草）；英央，一种开朗笨蛋，长大ver的笨蛋属性几乎完全消退了变成超级积极的善良的白给男，虽然小时候笨蛋但是长大了可以单兵混入CZ和有心会；英円，在女主事件的打击后从哥哥的跟屁虫进化成了说话拽拽的眯眼哥（？），打着一切都是为了家人和为了赎罪的旗号当King的刀；西园寺，小时候叛逆长大了就不叛逆了，呃，另外想要强调的兽性和暴力元素其实体现得不怎么好，只在几个点上有表现就像是会定时发作的疾病一样称不上人格的一个部分。 如果我来写的话，我不会增加一些不会使得角色魅力显著提升的没头没尾的东西，比如说tora天天打游戏和自己装电脑，比如说终夜同时还在做模特工作，比如说细细点评每个男角色会不会做料理。……不是说不能写，是说写了的话最好把这个东西补充好首尾，而不是突然想起来了写了这么一个事件然后后面就再也不提了…… 比较复杂的终夜的人设也在篇幅内没有完成好，有点科学家类型的天然呆人设加上感觉有点撩人的模特人设不是天然就很能融合在一起的，放在一起有点拼凑，再加上这个说话习惯也属于一种和上面两种不算完全兼容的元素……另外，在别的线路多写几句终夜的穿越后遗症真的那么难吗（……）（先道歉，万一是我没看到呢，这句可以删了）穿越后进入白给男卖惨的剧情，从某种意义上来说终夜是真的啥事都没干好，任务也做的不行妈妈也进医院了女主也没照顾好自己也寄了…… King和Rein的复杂是那种反正凡人理解不了啊就随便写写吧的复杂，King至少还是有迹可循的，Rein完全进入精神病mod。这个就放到故事问题再说。 或者说我觉得只注意表现12岁和22岁的人物形象就是难免会有断层的，而且也不够篇幅不够典型不够细节，从剧本自身很难让一个角色跃然纸上，高度依赖于补充性的故事和玩家的想象，这是存在缺憾的。一般说我们了解角色是了解他的现状，对他现在的特质提出一些问题，然后去他的过去探寻这些问题的答案，同时也在他的人生跨度中的多个事件里进一步丰富他的形象，但是感觉CZ的人物塑造还是差了一道火；又或者说通过这样的描写表现出来的人物有点过于日常过于范式，无论是善良温柔会做饭的白给，还是幼驯染为了守护而生的决心，如果写得不是特别特别特别的好，就不太能打动现在看过了喜欢过了太多拥有可解释的个人特质的角色的我了。 故事问题 从主线来说，最大的问题就是把故事的发展基本完全交给了一个天才精神病Rein。一开始你觉得King是天才病娇觉得他因为女主疯了好像有点不可理喻又不是完全不可理喻，直到你看到了Rein才知道什么叫做真正的不可理喻。你说他不在意妹妹死了只想报复社会倒也不全是，他也想得起来把女主搞一搞四刺激King，但是你要说他在意妹妹吧他陪着King干了这么多乱七八糟事情然后陪着女主在那么多线路乱玩也没想起来这么个事…… 和精神病计较就是我的错了（对手指）。 但是精神病本来就带那么些不可预测性，拿精神病推进故事就像拿车祸推进故事一样，凡人很难理解这种奇妙的东西……我不太喜欢这种推进方法。 背景问题 关于科学家隔行如隔山我就不想多说了，反正天才就是超级天才吧……好强大的男主光环…… 到底是怎么拥护的King啊库鲁西，一想到和我们学校那种大教授，算了不用大教授，就是厉害的学长，聊一聊这个政府的设想，我都会觉得想抠地板。别太离谱……而且比起说是什么科研所统治世界，我还是比较相信是财阀统治世界，而king的科学力给财阀增加一些工具（这是可以说的吗） King的罪大到我觉得他的GoodEnd应该也是女主上香，把世界搞坏了肯定有人死掉吧他也没有人类的愧疚心情，不服从的人就洗脑好了。反正被洗脑的不是玩家的熟人也没什么感觉吧，剧本娘直接放开写。（叹气）。 感觉你们的国家好小啊，女主随随便便就可以转一圈…… 总评不想写了，总之就是不大喜欢而且还不太好攻略，选项巨多Jump还巨难用，多周目体验也很差，故事的悬疑程度根本就达不到需要六个角色层层推进的深度，只是觉得很无聊，好在声优的声音还是很好听。 不会再看第二眼的游戏。","categories":["Tavg","Sakura"]},{"title":"蛇香之夜 TBC","path":"/Tavg/Sakura/2147552e.html","content":"第一夜 欧洲 文斯 （谷山纪章） 07.12 初印象：没有初印象，感觉就是一张还挺帅的脸。初对面就是限制级场合只是钓鱼，（明明游戏只有RankC），没有为人设刻画起到任何的作用。 打完：从铁血的王子殿下到会为国民考虑的王子殿下 + 不知道为什么对女人很尊重很温柔 当无脑恋爱小说看看是可以的，但是一些奇怪的地方没有解释清楚……比如说在一个女人没有话语权的国家怎么培养出来这种男人的啊啊啊啊！！关于女人话语权的设定落地太少了，在后续的难民事件中其实应该可以涉及一下的，可以参考一些目前仍然男女极端不平等的国家的贫民的现状。另外，等女主当王妃了要是能写一写改善女性权益之类的问题也不错吧。（做那种事也不能发出声音的话也太离谱了吧？？？什么一拍脑袋的设定救命） 女主你爱上他哪了啊？啊？明明是密探的身份这么恋爱脑我很难代啊！难得写一个魅惑能打的女主角，怎么还是想往一些古早日乙就开始用的模板人设上靠拢啊……对密探身份的强调仅限于店主说不能亲吻这个回忆闪现三次。……挣扎舞女身份相爱也不挣扎密探身份是我没想到的（）你这工作还怪自由嘞。 男主人设依然是纸片的厚度，只知道有责任感，对女主很尊重很温柔。哪怕补一点合适的背景介绍都会好很多。从此线看，本作的剧本水平在商业日乙中处平均以下。 罗兰 （立花慎之介）07.21 初印象：好标志的小白脸哦…… 打完：好烧的小白脸哦 女主作为一个把色诱作为主要工作手段的人每天很纯洁的样子感觉有点抽象，咱也没见过干这行的，咱也不知道。 文斯你这绿帽戴得挺自在啊。 喜欢很烧的立花的话应该会喜欢罗兰吧（一种比特殊职业的女主还烧一百倍的男主）。但是你这不是黄油啊？？？做成黄油的话真的会挺香的，也没人追究剧情的细节了。另，罗兰这篇比文斯烧（）。 说到底！为什么不是黄油啊？？？用剧情向来要求它太苛刻了……没什么复杂的情节可言。这里就是罗兰找妹妹 -&gt; 妹妹【巧合】来找联姻（正在开联合国大会，一个没啥话语权的小姑娘跑过来说要结婚也是挺好笑的hhh） -&gt; （讲出罗兰的故事） -&gt; 女主和罗兰逛街之后罗兰继续回去住着（罗兰你是真不怕被文斯抓啊） -&gt; 妹妹恰好看到女主和文斯的场面，然后把女主抓走卖掉 -&gt; 两位男主以救女主为核心目的达成同盟 + 恰好卖到鳞国，鳞国王子人很好 ……啊？嗯……作为黄油，如果中间戏份够充分的话确实还是很香的哦，但是它到处拉灯…… 特殊结局也是很香，R18限制发挥了（捶胸顿足）","categories":["Tavg","Sakura"]},{"title":"九人安息 9R.I.P.","path":"/Tavg/Sakura/2a71d181.html","content":"无剧透篇 简评：非常有趣的怪谈冒险故事 标签：怪谈/微恐 推荐：4-/5 篇幅：中篇 发售信息：2023.06.29 Otomate NS 背景（官网自煮，煮得不怎么样）： “这个小镇从以前就是神隐事件多发的地方呢。精神脆弱、心怀困扰的人好像容易被偷偷带走呢。你的话没关系吗？”高中二年级的初秋，主人公・逸色珠沙听到亲友这么说，大吃一惊。“神隐什么的、我并不相信所以没有关系。”是的、不相信。只是——确实心怀大大的困扰——关于今后人生的方向选择（進路）。不久她真的听到了令人毛骨悚然的声音。“去寻找你的道路吧。我是、邀请你进入黑暗的存在。”在此之后，她周围开始发生奇妙的事件…… 「この街は昔から神隠しが多い土地でね、精神的に参っていたり、大きな悩みを抱えている人が神隠しにあいやすいの。あなたは大丈夫？」高校２年生、秋のはじまる頃。親友にそう言われ、主人公・逸色珠沙は胸をどきりとさせた。「神隠しなんて信じてないから大丈夫」そう、信じてはいない。ただ……大きな悩み――進路のことがあるから戸惑っただけ。そんな彼女の耳に聞こえてくる気味の悪い声。【探しましょう　あなたの道を。僕は　あなたを闇へ誘う者】それから珠沙の周りで不思議なことが起こりはじめて……。 注意事项 一共分为四个篇章（学园怪谈篇、都市怪谈篇、异世界篇、妖篇），每篇有四-五章共通剧情，之后分叉进入角色线，除了妖篇多一个隐藏线角色之外每篇各两个角色。 就按这个篇章顺序来打也挺好的，不过不按顺序也没关系，篇章之间、角色之间没有明显的依赖关系，隐藏线角色在其余八个角色全通后解锁。 个人建议是晚一点打异世界篇和妖篇。 学园怪谈的红华线路是唯一包含微恐要素的线路，如果担心的话请不要在晚上游玩。 妖篇非常非常非常日常，和整本看起来不像在一个游戏（）。（樱花妹推友锐评：あまり日常すぎて、ほかのルートと別つゲームに見えます　。ホラー要素がはぼない。）另外，如果比较在意连贯性的话，建议最后打妖篇，这样可以打完八个角色直接连上隐藏线角色的剧情。 上推右摇杆有选项/未读文本jump功能。 女主的性格不太喜欢……优柔寡断的重度逃避癖……受不了女主的话可能会很崩溃 声优表 紅華 くれは (増田俊樹) 響 ひびき (土岐隼一) 香羊 こうよう (鈴木崚汰) 星絆 せな (柿原徹也) 魅ナミ みなみ (岡本信彦) 聖ヤ せいや (立花慎之介) 幸麿 ゆきまろ (KENN) 狐春 こはる (阿座上洋平) 桃嘉 たうか (天﨑滉平) 总评： 非常少见的乙女向素材！无代餐 非常有趣的故事和角色们！有很多适当插入的喜剧元素！ 不是那种会让我记好多年的神作（感觉个人线写的比较简单，给我触动不多x），但是是挑不出什么大问题而有趣的地方很多的优秀作品。应该在3+ - 4-之间，但是因为无代餐然后足够有趣所以往上打一点。 值得一玩！期待fd 剧透篇心情比较不平静写出来的东西也比较主观x，按角色的顺序，一边写一边吐槽吧。 珠沙整个游戏塑造的最不讨人喜欢的角色，好崩溃，一点都代不进去。本来在怪谈向作品里犹豫进路这件事就有点微妙的错位感了，就有点像，呃，人已经快死了还在惦记还没考大学六级，哎呦找不到合适的比喻……主要是我并不理解进路会是那么大的一件事情，或者我觉得女主跟我完全就不是一类人所以完全代不进去。 女主给我的感觉像是和朋友出去吃饭，啊这个不吃那个不吃问你要吃什么吧你又说啊我还没想好，但是大家都快要饿死了。我的天啊……是多逃避癖能做到快选志愿了一点都没考虑过这个问题，自己一个人考虑不出答案的话她妈妈这样也不奇怪啊，你总得填一个吧那不如填我推荐的好了；而且看到了翼那样强烈的想做什么的愿望，她妈妈实际上也不会强行拦啊。对女主真的好崩溃……你要是我朋友我非得揍你一顿再陪你想。哎哟！你怎么不早点想……我的天啊……桃嘉！你怎么养的孩子啊！（恼） 所以感觉不到女主除了温柔之外的人格魅力。好崩溃。但是每上来一个男主都说女主惹かれる。一体どんなところに惹かれたのかよ！ 我可以相信乙女游戏的男主都会无条件的爱女主但是别把女主搞得这么离谱啊…… 另外，妖篇的女主更是……嘛，如果我是sayaka你的热爱怪异现象的好亲友我肯定好难过。我的天啊这么大的事情你真的一点都不愿意跟你亲友说……你也没问桃嘉能不能说啊，你就是完全没打算跟她说……好难过。 校园怪谈四篇里认为完成度最高也最贴合题目的（废话，毕竟是官配线x），因为先玩了妖对这个游戏期待大幅降低再玩这个有一种怀疑剧本娘是为了红华这个醋包了饺子的感觉，后来发现除了妖篇每一篇都很9rip。 红华个人线主要话题：第八朵彼岸花=第八个校园怪谈的调查 &lt;-&gt; 长发女鬼的诅咒 &lt;-&gt; 红华失去的记忆 真正的官配，每个线里都露脸（），他真的好爱珠沙（虽然理由不明）。温柔的善良的会怕鬼故事的幽灵帅哥谁不爱啊！角色本身就超级萌！ 而且我太喜欢优衣了！（你肩膀上好像有什么东西！（凑近）不许对她抱有恋爱方面的想法，阻碍她回到原来的世界去）呜呜呜，优衣她好爱我啊。 真相能猜到一点但是不多，真的好惨啊。雏菊……T T 中间包含我最喜欢的一个结局，怪异再临，就是女主能看到所有怪异现象的那个结局。和大家都保持朋友关系想想都很开心！ 響个人线主要话题：響升天？ &lt;-&gt; 響的执念 病娇幽灵弟弟&gt;&lt; 拥有一个镜子的世界！这里的故事其实比红华简单很多，主要就是女主和響进行拉——扯——，然后響和自己进行拉——扯——。倒不如说在所有幽灵故事里成佛都是必不可缺的话题，这里其实和星绊的故事有点共通之处。 喜欢病娇的话应该会很喜欢！ 都市怪谈故事性上不如校园怪谈，不如说之后的故事都没有什么“悬疑”的地方了，只是单纯的解开心结、解决事件而已，而由于这是个篇幅在正常范围内的乙女游戏作品、划分了八个路线加隐藏线，每个线路都不长而且物理时间应该都是九天，所以能讲的故事的复杂性也比较低。最复杂的故事莫过于红华了。 香羊个人线主要话题：地雷女！ 感情线路写的显著比别的线路仓促。应该说香羊太忙了，需要考虑的事情太多，又是自己的失忆幼驯染，又是自己的跟踪狂地雷女，又是让人不省心的女主角。……基本上来不及爱啊！女主很伤心陪着看个电影那也不是爱情的方向吧（？）我刚回收完香羊结果了地雷女打算去HO干活的结局没多久，两个人就进了地狱，然后也没发生什么事件就进入谈情说爱阶段了……啊？？啊？？香羊什么时候爱上女主的来着？往前翻香羊视角还是在操心基友操心地雷女嘞。或者说他其实早就爱上女主角只是他说话一直就这个调调。那也还行吧。我觉得多补一点香羊视角会好一点呢…… 而且香羊是生魂什么的真的是一点铺垫也没有啊。……可能我没看到吧……好突然的good end…… 另外，你们HO管理真的好低下啊救命…… 星绊个人线主要话题：不想分开…… 这一线路也是拉扯拉扯拉扯。星绊也是个死脑筋。后面一直在纠结两个人要分开的问题，和妖篇差不多，后来是靠勾玉存能量。最大的事件是为了要见面进了镜子，结果響失控了，硬解镜子需要勾玉里的能量但是不够…… 所以妖篇老头做一次法原来值那么多能量啊，够女主看到几个妖好久嘞，这次怎么只能牛郎织女。好崩溃……女主要不要去修仙试试呀。（？）这样恋爱和事业问题一次解决嘞。 异世界我最喜欢的一篇！！！啊啊啊啊！主要是角色设定都太有趣了！ 圣夜个人线主要话题：解决米纳米&gt;&lt; 变态乙女脑，这不是我吗！（？）在别的线路出镜率也超级高，到处以我的视角姨母笑（嘿嘿嘿）。有这种很平易近人的无伤大雅的小爱好我很喜欢！工作服的白手套和眼睛印花大大大好。（女主寄掉的结局有工作服ver珠沙，两个人站在一起好好好般配！） 很爱女主但是给女主很多很多的自由。特别好的恋人T T。 最帅的是那张亲女主赶走地雷女灵魂然后举枪的cg，草，帅的我凝固了好几秒。明明可以当冷酷工作狂帅哥但是是个变态乙女脑，这是何等新鲜大胆的人设（），不过我好喜欢啊啊啊。感觉能一起完乙女游戏……上一个乙女脑还是伊尔，但是两个人是完全不一样的方向……都好可爱！ 魅ナミ个人线主要话题：解决米纳米非要女主灵魂和喜欢女主的矛盾 &lt;-&gt; 为什么米纳米非要女主的灵魂不可 &lt;-&gt; 怎么解决 情节复杂性很合适，甜度也很好&gt;&lt; 这个话题还挺好玩的，女主认识的米纳米其实已经部分和肚子里的灵魂渗透了，米纳米肚子里那个现在是坏种嘞嘿嘿。（？）所以米纳米的自我认知也很有意思，但是我不想讨论这个，感觉会很麻烦。整个过程非常的甜，就是那种很别扭的喜欢，不知道该怎么办不想被吞噬掉但是又不想杀掉女主所以在车站逼迫女主把性命都送到女主受伤，明明很讨厌karifa花但是为了女主努力地忍受了。在这条线的圣夜也相当温柔T T。（顺带一提是唯一上垒的线路……啊啊啊，居然是那种魔！好可爱的设定，呜呜呜） 妖篇这里都没有什么主要话题可言了，基本上就是女主角作为一个普通的担忧进路的高中生，然后和家里人拉扯之类的。这个事情结束以后就是解决能不能和喜欢的妖在一起的问题…… 另外，所谓妖怪不能干涉人类世界的“常规”也很诡异，明明像红皮书和こっくり的存在就是对人类世界的干涉啊，而且几个妖怪也天天变成人和女主乱逛，结果女主做法的效力一到期，几个妖怪都乖乖退场了，这算什么事啊（胃痛），多说两句话怎么了啊啊啊啊。…… 幸麿个人线主要话题：解决女主进路问题 -＞ 解决男主要去做下一个工作的问题以及和女主将会看不见他的问题 第一条打的所以现在已经记不清楚了……，过于日常而感觉非常无聊，找不到特别的记忆点……男主的立绘和人设都很可爱，男主的特殊语癖很有意思，但是剧情自身比较单调，矛盾比较简单和胃痛。再加上回到日常以后，女主身上的优柔寡断之类的地方更加明显了，对女主的代入感也很差。 狐春个人线主要话题：解决女主进路问题 -＞ 加强一下对他工作的认可感 -&gt; 解决两个人要分开的问题 靠谱成年男性（点头）。 这里结局算是最胃痛的好结局之一，每天散步九分钟是吧，哎呦，胃痛的要死。另外觉得难受的就是怎么存在这种只有好处没有坏处的机制啊，（こっくり和红皮书之类的，）简直就是童话啊啊啊啊啊，完全不是怪谈吧喂喂，……关于こっくり的这个工作具体也解释得不是很清楚嘞，他的答案是哪里来还是在别的线里我才知道他是因为这个工作会直到问题的答案什么的，但是这样女主不是可以一直召唤他作弊来着（？） 另外，好贤惠啊，喜欢贤惠的！ 桃嘉哎呦成人形态帅死了呀！！呜呜呜。平时原来设定是12岁的样子嘛。这里算是把整个游戏的线索串起来啦！关于桃嘉本身，下面再说。 做一个简单的梳理 真相相关：女主-米纳米-桃嘉 女主一出生就拥有纯净无暇的灵魂 &lt;- 梦魔米纳米无法压制吸收的契约对象的类似灵魂，急需对冲以免“失去自己”，盯上女主 &lt;- 赋予人灾难以使人成长的神桃嘉被女主的“灾难成长论”感动 死神会杀死被恶魔盯上的人，以免对方遭受痛苦（？？？） 桃嘉阻止了死神，以仅留下能够保护女主的力量作为代价向死神承诺会陪伴女主直到她心灵强大 &lt;- 对桃嘉来说，让人强大的方法就是给人以灾难（。） -&gt; 女主一直多灾多难的。17岁是桃嘉和恶魔约定的检测女主心灵强大的检查点，所以发生了这个故事。 神隐事件相关：红华-響 七十多年前，月神优衣由于父亲过度的控制欲选择通过找齐学园七大不可思议神隐，而其父走向疯狂的境地，用残忍的方式杀害（献祭）了无辜的人。 -&gt; 红华的妹妹（和一个少年）都是在月神家打工，被幽禁等待献祭日。红华找到妹妹的时候正在妹妹被献祭的关头，他和妹妹双双命陨地下室，他死后即因为极大的仇恨恶灵化，执念的刀是杀害他与妹妹的刀。妹妹为了换回哥哥清醒的意识、想要拯救红华让他成佛，选择了扩大心中的仇恨、用仇恨的力量诅咒月神爹，此后成为了恶灵；而红华不久后清醒，失去了这段记忆。 -&gt; 響也是其中一个受害者。一直等待着月神爹从地狱放出来之后进行复仇的他，在圣夜的帮助下居住在学校的镜子里。这个镜子的世界也减少他受到其它幽灵的刺激，避免恶灵化。 こっくり相关：響-狐春 響以前是一个孤独的少年的时候经常向こっくり请求答案，在一次意外中狐春因为保护他伤了一只眼睛。狐春给了響变强的祝福和信念。 蕾卡相关：香羊-雷卡-圣夜 レイカ一直跟踪恐怖博主香羊，扭曲的爱以两人陷入火场暂结。圣夜作为地狱HO大审判官负责管理レイカ（但是レイカ还是失控了）。 星绊相关：星绊-響 idol和崇拜idol的幽灵粉丝（） 这应该就是主要的线间联系了，容易看出游戏里最想着重描绘的还是女主事件圈和神隐事件圈，而神隐事件应该说是最能够点题9RIP的部分（甚至会让人觉得是为醋包饺子的程度）。个人认为9RIP的这条线（神隐事件）也就是红华线是整个游戏在剧情上完成度最高的，然后就是在米纳米线上的情感叙事的完成度最高（米纳米在想要保有自己的存在和对女主的爱之间天然存在对立）。 桃嘉线笔墨稍轻了，作为给与灾厄以使人成长的这个想法本身是很难让正常人类的玩家共情的，尤其在经历前面很多线的be之后（可以说桃嘉给与的很多灾厄是完全不可控的），而桃嘉的爱也是有点不太好理解的。……从概念上我知道他是爱女主想让女主更厉害给女主灾厄。或者你说女主本来就已经死了，如果桃嘉不让她变强一点她还是会被死神收走，好吧，我也能接受。……但是感谢让你吃苦让你成长的对象这种想法还是不太自然…… 而且女主在桃嘉的培养下为什么看起来还是那么逃避癖啊（摔）！关于桃嘉的结论就是成人状态还挺帅的，没了。 另外，关于本游戏很想坚持的一点，人和怪异之间应该存在的壁垒，这点还是值得感动一下的，比较真实（。）虽然我主观上觉得女主最好进路还是去修仙。 可是其实没有很落实到世界观上，妖和神明明都在积极干预人类的世界啊！！恶魔那么自由，想抓哪个人类抓谁，死神要杀人换自由，好吧，你死神还不如人类驱魔师嘞，不能解决恶魔解决被恶魔盯上的人是吧，行吧；然后天狗神来干预死神，不能让她死掉。こっくり会给迷茫的人答案；红皮书真的会实现别人的愿望；几个妖怪天天化人形配女主压马路，还去跟她家长谈话……你们这个干涉的限度指的是啥啊？感觉还不如干脆修仙世界观得嘞。一个人妖（或者别的）殊途的矛盾点用了好几个线路，胃都痛麻了，感觉就像隔壁君雪看本不该有感情的奇虚获得感情一百次。好吧，也不是大问题，是我比较挑剔。（当然，如果能解决这个重复使用的矛盾点，剧情会更丰富有趣）。 总评故事上确实还是有很多提升空间的。不过作为极少见的怪谈向乙女故事，还是值得体验一下的！目前基本可以说没有代餐。 人设都还是非常有趣的！一包九个人，应该也总有几个能进好球区的吧？至少，对我来说，没有一个让我看一眼就不想攻略的角色（。）不如说每一个我都挺喜欢！现在的好感度大概是：米纳米 &gt; 圣夜 &gt; 红华 ≈ 香羊 &gt; 其它。作为老牌乙女游戏厂商的O社在人设和恋爱剧情上的拿捏还是值得肯定的，除了香羊因为需要操心的事情太多在感情线的描写上有点跳步、全员都对感觉不怎么有特点的女主有初始好感度尤其是红华之外，趣味性和糖度都还是不错的！ 音乐非常好听！每个角色的角色曲一响我都会爱上角色和角色曲的程度！都很贴合角色。恐怖故事必备的那首听多了也没那么恐怖了哈哈哈。美术和UI也看得出用心，（虽然觉得女主画得有点成熟），视点转换页非常精致（居然闺蜜也有哈哈哈），对话框的枝条非常漂亮（中左处感觉也可以不要画那么多，那里不会出现文字、有点无意义地挡中间视野），界面里的精致的怪异感也特别。 对我个人来说，是玩的过程觉得挺愉快不过可能不会留下太多印象的作品，可能记得最深的就是神隐事件和女主事件两个主要故事吧。但是快乐也很足够了！至少它给了一种和别的作品不一样的快乐的体会。","categories":["Tavg","Sakura"]},{"title":"坏苹果战争BadAppleWars TBC","path":"/Tavg/Sakura/c016b4d5.html","content":"无剧透篇 简评：3/5 设定有趣美术优秀不过实现上很平庸的作品 标签：校园 推荐：3+/5 篇幅：中篇 背景（无剧透）： 正在反思着自己的空空的心走向入学式的少女在一场车祸后来到了一个奇异的学园。在这里，存在着极大量繁琐的&lt;校规&gt;，学生们分为三派：好孩子、坏孩子和风纪委员。遵守校规的好孩子们会渐渐失去记忆、失去自己，戴上无法区分彼此的面具，在某个时间就会迎来“毕业”（转生）；坏孩子们自称“bad apples”，试图打破特殊的七条校规以迎来“退学”，猜测“退学”即是生还——回到原来的世界；而风纪委员是校规的维护者，本身不受校规束缚，也不会接受“毕业”判定。少女会做出什么样的选择呢？ 总评： 配角刻画比主角还精细…（ナラか サンズ 都好喜欢！） 个人认为不太能自圆其说 剧透篇1. 简单来说设定很有趣，没有很接近的代餐， 2. 写写想写的3. 关于少女们与救赎的歌谣","categories":["Tavg","Sakura"]},{"title":"致命十二人 Fatal12","path":"/Tavg/Flos/c86c057f.html","content":"无剧透篇 简评：3+/5 有巧思但是实现上稍显不足的（伪）大逃杀 标签：百合/校园 推荐：3+/5 篇幅：短篇（15h±） 背景（无剧透）： 不受欢迎的普通女高中生狮子火凛舞做了一个奇怪的“梦”，梦里她经历了一场电车爆炸事件。在接下来的几天，连续有意义不明的梦境拜访。在这个周日，她在梦中踏入了一个满是齿轮的世界，见到了白发的较小的女神，女神说在此的十二人其实都是已死之人，而接下来的十二周将开展一场命运的游戏，通过获得某人的三条信息：姓名、死因与留恋，即可“指名”他、让他出局；获胜者将会保持现在的状态活下去，而失败者在此期间的一切行为都会被撤销，回归游戏开始前已经死去的命运。同样让她惊讶的是，她的好友，海晴也正与她同样站在命运的大厅，参与这个荒谬的游戏…… 注意事项： 壁垒：女主在前半剧情都是完全的优柔寡断圣母（） 菜单界面可以查看非常详细的每日剧情提要和角色的卡牌信息！ 总评： 虽然有点大逃杀的意思，但是并没有很强调这一点，不如说更倾向于一个喜剧（？） 需要描写的角色很多、这类题材对角色的刻画要求也比较高，所以难免有照顾不太周到的地方 能完善的地方很多，但是故事本身还是很有趣的！ 剧透篇拖得有点久了，剧情细节记不太清了，凭印象留下一点repo吧。 非常讨巧的设定，让游戏不容易变得太沉重。怎么说呢，“一群活人争夺唯一活下去的机会”意味着“杀死”剩余的人，而“一群死人争夺唯一复活的机会”就听上去没那么残忍了，甚至有点尊重他人命运的意思。 命运可以说是本作的一个大主题。世界观里。两代人的命运（凛火和女神前身），一下子给游戏 大逃杀类的题材其实对角色以至人性的描写的要求非常高（不然就会变成砍瓜切菜游戏），因为在这种情况下的人是特别的、少见的，描绘他们在紧迫情况下的样子和他们曾经的样子会给与玩家特殊的共情体验。而日常类的题材则只需要有趣，因为这类人和他们的状态、发生的事件都是比较普通语境下的、容易理解和共情的。直接说的话，本作没有达到前者的预期，不过比起纯粹的日常向还是多一点非日常语境下会产生的趣味。 对于圣母系女主角凛火 全通纪念","categories":["Tavg","Flos"]},{"title":"网易雷火0422游戏研发2飞机题解","path":"/Codes/d4872b1e.html","content":"觉得有空应该好好学一学DP…↓一个有点繁琐的工程题，呜呜，很好，我最喜欢工程题了！第三题第四题感觉希望不大遂美美写了个漂亮结构用于自我欣赏（ #include &lt;iostream&gt;class outJob&#123;public: int ID = -1; //-1 for invalid int planeNum = 0; bool working = 1; // 1 for out, 0 for sleep outJob() &#123;&#125; outJob(int id, int NUM) : ID(id), planeNum(NUM), working(1) &#123;&#125;&#125;;class jobQueue&#123;public: outJob data[30000]; int head = 0; int tail = 0; void enqueue(outJob x) &#123; data[tail++] = x; &#125; void dequeue() &#123; head++; &#125; bool isEmpty() &#123; return (tail == head); &#125; outJob* queuehead() &#123; return &amp;data[head]; &#125; void switchJob(int id) &#123; for (int i = head; i &lt; tail; i++) if (id == data[i].ID) data[i].working = 0; &#125; int clearJob() // return sum &#123; int tmp = 0, i; for (i = head; i &lt; tail; i++) &#123; if (data[i].working) &#123; head = i; // i&lt;index 全部出队 改变队头 return tmp; &#125; tmp += data[i].planeNum; &#125; head = i; return tmp; &#125;&#125;;int c, n, okplanes;jobQueue waitingList, outJobList;int tryOut(outJob x)&#123; int id = x.ID, num = x.planeNum; // printf(&quot;--try out ID = %d, NUM = %d-- &quot;, id, num); int newOut = 0; // printf(&quot;OKplanes = %d, Cplanes = %d &quot;, okplanes, c); if (num &lt;= c) // 要派出去的&lt;=总数 &#123; if (num &lt;= okplanes) // 也&lt;=可用数 &#123; okplanes -= num, newOut = num; outJobList.enqueue(x); // printf(&quot;Outjob: %d, %d &quot;, id, num); &#125; &#125; else // 要派出去的&gt;总数 &#123; if (okplanes == c) // == 可以升级 &#123; c = num, okplanes = 0, newOut = num; outJobList.enqueue(x); // printf(&quot;Upgrade&amp;Outjob: %d, %d &quot;, id, num); &#125; &#125; // if (!newOut) // printf(&quot;After: OKplanes = %d, Cplanes = %d &quot;, okplanes, c); return newOut;&#125;int main()&#123; while (~scanf(&quot;%d %d&quot;, &amp;c, &amp;n)) &#123; okplanes = c; for (int i = 0; i &lt; n; ++i) &#123; int newOut = 0; int a, b; // a是指令类型，b是指令内容 &gt;1(id) + num or -1 + id scanf(&quot;%d %d&quot;, &amp;a, &amp;b); outJob newJob(a, b); if (a &gt;= 0) // 派遣任务,编号为a,派遣b台无人机 &#123; newOut = tryOut(newJob); if (!newOut) waitingList.enqueue(newJob); &#125; else // 召回任务 &#123; // printf(&quot;--try back ID = %d-- &quot;, b); outJobList.switchJob(b); // 转换为休眠状态 okplanes += outJobList.clearJob(); // 唤醒连续休眠飞机 // 检查派遣队列 while (1) &#123; if (waitingList.isEmpty()) break; int tp = tryOut(*waitingList.queuehead()); if (tp == 0) // 派遣失败 break; newOut += tp, waitingList.dequeue(); // 派遣成功 &#125; &#125; printf(&quot;%d &quot;, newOut); // printf(&quot;--------- &quot;); &#125; &#125;&#125;","tags":["cpp"],"categories":["Codes"]},{"title":"群晖docker部署code-server","path":"/Engineer/262484b2.html","content":"为了更好地使用，或许需要调试用的设备连接SSH。 在设置中打开SSH功能（默认端口号为22） 在windows terminal内 输入 SSH &#123;user name&#125;@&#123;IP&#125;:22 选择yes，并输入密码（不会明文在控制台显示） 控制台的前缀改变，变为{username}@{设备名}，即为连接成功。通用的linux指令可以进行操作，sudo指令可获取管理员权限 下载code-server映像 官方接口的链接似乎已经失效。可以自行下载后上传至群晖。`` 通过SSH/群晖docker-GUI来指定端口和环境变量等 端口 8080:8080 TDP （容器默认端口为8080，本地端口只要不冲突都可以用） 打开自动重启 环境变量（不配置PUID和PGID，通过直接修改文件权限虽然不安全但是能用） PUID=1000 PGID=1000 TZ=Asia/Shanghai PASSWORD={password} *如何查找PUID和PGID：连接SSH，cat /etc/passwd查看对应用户行的两个编号 文件映射 必须要映射的只有config。找个地方分配一个文件夹就好了。 &#123;your dir&#125; : /home/coder/.config 工作区文件夹也可以随便映射。 &#123;your dir&#125; : /home/project 访问对应IP并输入密码即可登入 第一次打开网页会出现一个密码输入框，输入即可。 密码：初始密码可以用你喜欢的方法从映射的.config文件夹获取 SSH命令行的一种方法 `docker exec -it code-server bash` `vi ~/.config/code-server/config.yaml` 群晖访问、下载、打开 ... 其它的可能出现的问题： 只能读取文件，不能修改： 与群晖的文件读写权限设置有关。 一个粗暴但是不安全的方法：连接群晖SSH，直接修改project文件夹的权限 `chmod 777 -R &#123;Your dir&#39;s name&#125;` 无法安装vscode扩展 好像就是不能直接从扩展商店安装（对我只有中文插件成功了） 可以从扩展商店访问对应扩展的页面并且获取对应版本的链接，下载`.vsix`文件并手动安装 关于Cpp环境配置： 依次执行（SSH连接） sudo apt-get update sudo apt-get install build-essential gdb 此时可以安装C插件和code-runner快乐编码了 关于python等环境配置 //切换 root 用户\tsudo su\t//更新源\tsed -i &quot;s/archive.ubuntu.com/mirrors.aliyun.com/g&quot; /etc/apt/sources.list &amp;&amp; apt update\t//安装 python\tapt install -y python\t//安装 nodejs，自行调整版本\tcurl -sL https://deb.nodesource.com/setup_14.x | sudo bash\tapt install -y nodejs\t//安装 jdk\tapt install -y openjdk-8-jdk 最好选用19年以前，最新版本的python插件并不兼容 ` 可以选择更改docker权限 chmod a+rw /run/docker.sock # 或者 chmod a+rw /var/run/docker.sock 即可在docker的terminal内使用sudo指令","tags":["linux"],"categories":["Engineer"]},{"title":"WSL2环境配置","path":"/Engineer/b1be395e.html","content":"注意：功能需要hyper-v，与现下绝大多数的模拟器软件冲突 1. 程序和功能添加（需要重启）控制面板-程序-启用或关闭windows功能，勾选“适用于Linux的Windows子系统“ 和 “虚拟机平台” 2. 配置WSL设置WSL2为默认内核，更新WSL并重启WSL服务 wsl --set-default-version 2wsl --updatewsl --shutdown 3. 下载Ubuntu在应用商城搜索Ubuntu并下载安装对应版本，之后打开即可。（在Windows terminal中，现在在+中也可以添加ubuntu终端了，界面非常漂亮） 按照提示输入用户名和密码（不需要和windows系统相同。密码输入不会回显） 4. （可选）映射网络驱动器此电脑-映射网络驱动器，文件夹填\\\\wsl$\\Ubuntu-20.04（-对应的版本号，可以先在文件资源管理器进入\\\\wsl$进行确认） 不要映射也挺好的，可以在文件资源管理器固定一个快速访问。 注意！ 这个文件夹只有在ubuntu运行时才能打开。 5. Vscode配置wsl2终端Vscode在插件市场搜索WSL（蓝底白字小企鹅图标）安装，之后侧边栏会出现“远程资源管理器”，点进去新建窗口即可。 可以先在Ubuntu建立一个工作文件夹、在Vscode中打开。 要运行代码，需要相应地配置Ubuntu代码环境和Vscode（远程）插件。 例如：C/C++ sudo apt install gccsudo apt install build-essential 如果中途出现Y/N选项，输入Y即可。 用gcc --version检查安装是否成功。 在Vscode中，也安装C/C++插件（这里的安装和本地vscode是不互通的！而是在工作区目录下新建.vscode文件夹） 现在，点击运行和调试均可正常运行了！ 6. 其它 /mnt 是windows磁盘在wsl中的映射 7. linux代码环境配置 安装包的过程中出现# The following packages have unmet dependencies 解决办法 先执行 sudo apt-get updatesudo apt-get cleansudo apt-get autoremove 如果不行再执行 sudo apt --fix-broken install //修复系统中已安装的软件包依赖关系的错误，尝试下载并安装缺失的依赖软件包，并解决其他软件包冲突问题。sudo apt-get update &amp;&amp; sudo apt-get upgrade //这会更新所有软件到最新版本，建议不要使用sudo dpkg --configure -a //重新配置未成功安装的软件包。sudo apt-get install -f //修复已安装的软件包依赖关系错误。当某些软件包在安装或卸载过程中出现问题时，可能会导致软件包依赖关系错误，此时可以执行该命令以修复依赖关系错误。需要注意的是，该命令并不会安装新的软件包，它只会修复已安装的软件包依赖关系错误。如果需要安装新的软件包，应该使用 sudo apt-get install 安装包的过程中出现Failed to fetch http://security.ubuntu.com/ubuntu/pool/main/b/binutils/binutils-common_2.30-21ubuntu1~18.04.7_amd64.deb sudo vim /etc/apt/sources.list 全部替换 deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse sudo apt-get update","tags":["linux"],"categories":["Engineer"]},{"title":"蓝叠adb连接并配置网络代理","path":"/Engineer/95cd8fac.html","content":"说在前面： 由于配置wsl导致原模拟器失效，选择了蓝叠模拟器（下载安装器后会自动配置为Hyper-v版本） 蓝叠国际不能自动配置root，需要手动破解，此处选择的是蓝叠中国（二者可以同时安装并共存，也可以单独卸载） 使用SSR打开局域网共享功能以端口号1080能够成功配置代理，但是无法进行pac代理，代理规则和代理模式与代理服务server（主机）不同步。感觉不如在模拟器里再装一个SSR…… 1. 配置Adb环境下载（以下链接为最新版本） ADB和Fastboot for Windowshttps://dl.google.com/android/repository/platform-tools-latest-windows.zip ADB和Fastboot for Machttps://dl.google.com/android/repository/platform-tools-latest-darwin.zip ADB和Fastboot for Linux https://dl.google.com/android/repository/platform-tools-latest-linux.zip 下载完成后，找个地方解压并添加目录到系统环境变量(Path)，以方便在任意位置用adb指令进行调用 2. 蓝叠Adb环境在设置-高级选项中打开蓝叠的Adb开关后会出现127.0.0.1:port的地址，如127.0.0.1:51213。 *：关于127.0.0.1——被称为本地环回地址(Loopback Address)，是一个虚拟的地址，可以用localhost代指。（Link：127.0.0.1和localhost和本机IP三者的区别） 保存后最好重启模拟器。模拟器每次重启，端口号都会改变。 3. Adb连接到Bluestacks开启模拟器的情况下，在cmd中输入：adb connect localhost:[port] 显示connected即已经连接成功，此时用adb devices可以看到端口地址adb -s localhost:[port] shell 连接成功的情况下，该指令进入该设备直连的adb环境，cmd接下来的指令都不需要输入adb，而是以[设备码]:/ $ 开头在这个环境下，继续输入指令可以配置设备的各参数。↓ 4. 代理修改指令注意，代理的错误配置可能导致无法联网。用内置chrome打开任意网页发现不能联网的话，就用下面的指令换回默认代理。 修改为指定代理指令settings put global http_proxy [ip]:[port] （据说可以在端口号后加/pac和/direct，试了一下发现虽然不影响联网但是也没有按指定的模式运行……这种代理似乎默认为全局，只要SSR软件在运行，无论是否为直连模式、模拟器都好像走全局代理） 恢复默认代理指令（不要漏掉:）settings put global http_proxy :0 如何确认代理中的ip地址*修改代理的ip取决于电脑本机ip，通过在cmd新窗口内输入ipconfig /all可以查看本机ip，对于我的电脑而言，该ip为192.168.1.104如果不确认哪个ip是对的，可以把查到的各个ip全都试一遍，模拟器中网页对网络代理的情况几乎是实时刷新的。 其它指令用settings delete global http_proxy 可以删除代理，但是这样会直接连不上网（）exit指令可以直接退出adb。","tags":["Android"],"categories":["Engineer"]},{"title":"2022学年第一学期总结","path":"/Private/ca7300c6.html","content":"使用网页版浏览 大二上学期总结学和玩都很愉快的一个学期！ 课上的话，把非常非常非常不擅长的几门物理过了，专业课也能说学到了很多东西。QT的IDE确实差强人意，C++QT差不多会用但是不喜欢，不过借此机会学习了PythonQT，玩得相当开心（） 课余时间，用家教钱入手了游戏机，在游戏中巩固日语学习（？？？）；学习了很多python相关的内容…… 大二上学期学习情况‌‌‌惯例的贴成绩单环节（x）（计算机组成待重考） 课程代码 课程名称 学分 分数 CS2309 问题求解与实践 3 93 CS2501 离散数学 3 86 MATH1207 概率统计 3 93 PHY1222 大学物理实验（2） 1 88 MARX1204 马克思主义基本原理 3 87 MARX1205 形势与政策 0.5 84 MECH2508 理论力学 4 88 PHY1252 大学物理(A类）（2） 4 77 ‌‌‌2021年总学积分86.84，排位61/102，……，你系的这个分数我真的是受不了了……要是我上学期期末没退远，现在估计要跟致远老师拉扯退远了，问了一下室友专业的均分会觉得难以忍受的程度……你系……哎…… 这学期觉得在这些方面已经挺好了，物理也没挂科，及格多点的卷面分给老师有力捞起，我已经不觉得有很多地方能提高了……或者说，我对这个学习成果本身就没什么不满意的地方，对于排位的话，……反正不能保研的话考多少分也无所谓吧，觉得重要的东西都学到了也行吧。 尝试的项目（coding相关）主要是python，涉及到图像、pdf处理、excel处理、爬虫等等，想用就去了解一下，python也不愧为一个知名的好上手的语言，而且轮子非常多。美中不足做出来即使很小的东西也不得不打一个很大很大的包，按我同学的说法、这种程序就是“程序员之间的小情趣”…… 比较杂，内容不复杂，主要是组装轮子然后调试一下，不过因为我比较菜所以也要花挺多心思的x 1. (Python) 文字游戏录屏生成带时间轴的字幕文件涉及三个模块，视频抽帧图片的相似度比较、百度Ocr和EasyOcr两个接口的图片OCR、Excel文档的写处理（xlwt库） Author: AleryXiaoDate: 2022.10.15Title: 抽取视频关键帧(可设置抽样频率和相似程度要求)并批量OCR识别图片并输出文件名和内容到Excel文档(利用百度OCR的Api)Content: 0. *两个用户可设定参数* a. 抽帧频率targetFPS (每秒钟抽取几帧) b. 目标相似度threshold (低于此相似度的图片将会被保存) 更高的targetFPS会消耗更多的时间, 但是会生成更精确的时间码 1. 通过弹出的文件资源窗口选择一个或多个视频文件 2. 对于每个视频文件： 按给定的每秒帧数进行抽帧(cv2.VideoCapture) 抽取的帧存储在temp.jpg中 对于第0个满足条件的帧, 存储至cache中 对于其它满足条件的帧, 将之与cache作比较: 如果相似度大于threshold -&gt;储存至本地和cache, 更新cache为这一图片, 输出储存信息 OCR并将OCR结果和名字写入Excel文档 (在控制台输出处理结果) 如果相速度小于threshold -&gt;输出舍弃信息 (SSIM的运行速度较为有限, 或许可以考虑使用多线程运行？) 完成后, 关闭抽帧相机, 输出完成的信息 2. （Python）青年大学习名单对照和结果梳理是帮同学做着玩的小软件！&gt;w&lt; 文件是.xlsx，导致之前学的xlwt用不了，学习了pandas库和dataframe类型做的。 正好遇到学习QT，给它做了图形化界面。‌‌ 3. （Python）漫画/小说爬虫静态网页用了很经典的美丽汤库，但是漫画网页用了懒加载所以得用selenium库。 对于漫画，输出结果为结构清晰的文件夹及其内图片，进一步要做处理就是图片-&gt;PDF处理的环节，也顺便试了一下&gt;w&lt;，还加了书签，结果一时之间非常满意（） 4. （Python）qq空间说说爬虫需要用到JS点击，为了方便也直接用selenium做的，输出内容到.md文件。 5. 一些特别简单的数据绘图、图像批量黑边去除和滤镜、批量删除.md的未引用附件（后来发现obsidian有插件可以直接处理，……），之类的 其它的事情（coding不那么相关）1. 做教程视频其实不是第一次做教程视频，上学期电路理论也在b站做过，这次是做的汇编语言编程相关的x，本意还是给同学做着玩的，但是意外地很受欢迎，几天就上万播放了而且为我的账号带来了+1.5k的粉丝数（草） 2. 个人博客（hexo+github）Link：floatdesu.github.io（基本是游戏玩后感就是了x） 嗯，，，总之就是玩得非常开心，现在也还在用，有很多可以玩的花活说起来这还是我第一次用git，……感觉博大精深。 3. 后续就要到寒假了寒假主要还是在享受生活（不是） 和同学嚷嚷着啊啊啊啊啊怎么没有一个语言能像C++一样快速又像Python一样有很多包啊、、最好还能有很小巧的封包！同学：那你要不看看golang 我趣！好东西啊！ 简单学了一下go语言和它的特色（？）结构，比如goroutine channel interface之类的，然后写我的快乐爬虫！（x） 写完漫画爬虫以后花费几个小时研究go去处理图片-》pdf，发现没有合适的轮子，在issue里发现了遇到同样问题的伙伴，现有的gopdf库的默认dpi会导致图片画质损失，总之就是在这方面和python比不了…… 呜哇，世界上怎么没有完美的编程语言……已经在看Kotlin了在看了在看了（悲）只能说各家语言都有专长吧，技能肯定不是语言的问题，是思路的问题 尝试的项目1. （Go）QQ空间爬虫博客页面Link 链接是博客日志x突出一个速度飞快好吧 2. （Go）漫画爬虫博客页面Link 也是速度飞快！封包甚至只有13M（）chromedp是yyds 3. docker-linux容器搭建QQ原神bot挂在我的群晖NAS上&gt;w&lt; 也不是很难，主要是linux命令行我不是很熟，然后这个bot（Yunzai-V3）的QQ接口并不是很稳定（会被QQ关黑屋），需要很多的尝试和调试…… 学期展望看上去硬课还是很多的，感觉要好好学才行呀！开始上日语辅修也蛮期待的，很自信地觉得应该不会花去很多时间精力x新的一天也要开开心心地加油呀！ （听上去敷衍）主要是我也不知道下学期会有什么想折腾的东西，可能学操作系统就够折腾了（x），不过只要有让我觉得好玩有意义的东西能学就会觉得很开心吧……嗯嗯。按我好朋友的说法就是，要是能一直对coding相关保持热情就好了！希望如此吧。","tags":["LearningMatome"],"categories":["Private"]},{"title":"Golang爬取picaComic","path":"/Codes/b6f6fe6f.html","content":"web #golang第二次的Golang代码！纪念一下~~也是第二次的picaComic爬虫，是之前python程序的再开，但也不算再开，因为做了很多很多的优化，比之前那个性能和稳定性都好得多 又是一次被迫99%在自己写的代码（）CV工程师已经名不副实了！！ 程序思路复盘粗体为比起上次的python程序添加的内容 在写的过程中，进一步巩固了部分chromedp的函数，学习了chanel和进度条，有机会进一步使用了goroutine（可惜线程池使用失败了，下次再试试），对爬虫的技巧也有了更好一点的理解 login 自动填写json文件里的用户名的和密码，如果没有就用户手填 检测到appcasule框架表示进入了主页，进入下一环节 选择画质 本来想做自动选择的但是失败了，弹窗也不能点，原因不明（我怀疑是因为元素在后台的时候是可查询但不可点击的，但在chromedp里似乎没有waitClickable的选项） 所以放20秒给用户自己点（进入一个漫画页面的左上角就可以改设置） 没办法做是否选完的检测，除非要求用户发一个信号，太麻烦了不如定时 检查idlist的每一本书，对于每一本书： 进入书本主页，获取书本名字，标准化后在savePath（json中设置）中建立一个对应名字的文件夹 获取章节数和章节名字，建立子文件夹 对于每一个章节： 进入章节页面，下拉到页面底部，重复2-3次检查顶端progressBar的值是否改变（事实上，页面和图片都使用了懒加载，但是图片的懒加载没关系，在标签里可以查询到真实链接），直到到达真正的页面尾部 查询所有图片元素，获取真实链接，将书的序号、章的序号、图的序号、图的链接绑成一个结构体，把指针送进下载通道picChan里 下载程序： 初始化时就开始运行，监听下载通道中是否有内容，一旦出现内容就创建一个图片下载进程，命名按结构体中的序号值来确定 进度条：vscode自带终端不能在同一行内刷新，cmd运行时正常。本来想试试做多个进度条同时加载（每一章节的图片下载情况），但是考虑到go-progressbar的原理（上下行切换和读取），所以只能用一个条，显示的是浏览器爬取图片真实src的进度而不是图片下载的进度 感想 运行效果很棒！多线程下载也非常给力&gt;w&lt;（虽然没有用线程池，是go自带的线程管理，据说会block） 比python快，而且封包只有13M，震惊 不能处理弹窗，有点遗憾，不过不处理弹窗并不影响图片链接的获取，这个还不错（x） 做了很多上次程序没有做的事情，很开心 没办法把pdf合成也用go做比较遗憾 别的 感觉这次程序的结构可以说是依托答辩，应该多分一点文件的，太长了太乱了！！！下次试试 源代码main.gopackage mainimport (\t&quot;context&quot;\t&quot;encoding/json&quot;\t&quot;fmt&quot;\t&quot;io/ioutil&quot;\t&quot;log&quot;\t&quot;net/http&quot;\t&quot;net/url&quot;\t&quot;os&quot;\t&quot;path&quot;\t&quot;runtime&quot;\t&quot;strconv&quot;\t&quot;strings&quot;\t&quot;sync&quot;\t&quot;time&quot;\t&quot;github.com/schollz/progressbar&quot;\t&quot;github.com/chromedp/cdproto/cdp&quot;\t&quot;github.com/chromedp/cdproto/page&quot;\t&quot;github.com/chromedp/chromedp&quot;\t&quot;github.com/chromedp/chromedp/kb&quot;)// 全局变量const (\thomeUrl string = &quot;https://manhuabika.com/pLogin/&quot;\tpageUrl string = &quot;https://manhuabika.com/pcomicview/?cid=&quot;\tpageUrl2 string = &quot;https://manhuabika.com/pchapter/?cid=&quot;)var (\taccount string\tpassword string\tidList []string\tsavePath string\tPROXY string //以上从json读取\tctx context.Context\twg sync.WaitGroup\tNmList [100][100]string //对于漫画i，[i][0]为书的path，[i][1]-[i][n]为章节的path\tpicChan chan *pic)type pic struct &#123; //图片中包含书编号,章编号,图编号\tbkNum int\tchNum int\tpicNum int\tsrc string&#125;func main() &#123;\tif len(idList) == 0 &#123; fmt.Println(&quot;no books&quot;) return\t&#125;\tLogin() //登录\twg.Add(1)\tgo PicsDownload() //开启图片监听线程\tfor index, id := range idList &#123; LoadBook(index, id)\t&#125;\tclose(picChan)\twg.Wait()&#125;func standarlizeName(oriStr string) string &#123;\treplacer := strings.NewReplacer(&quot;/&quot;, &quot;&quot;, &quot;|&quot;, &quot;&quot;, &quot;\\\\&quot;, &quot;&quot;, &quot;:&quot;, &quot; &quot;, &quot;*&quot;, &quot;&quot;, &quot;?&quot;, &quot;&quot;, &quot;&lt;&quot;, &quot;[&quot;, &quot;&gt;&quot;, &quot;]&quot;, &quot;:&quot;, &quot; &quot;)\treturn replacer.Replace(oriStr)&#125;func PicsDownload() &#123;\tdefer wg.Done()\tpicChan = make(chan *pic, 100000)\tfor picture := range picChan &#123; wg.Add(1) go PicDownload(picture)\t&#125;&#125;func PicDownload(picture *pic) &#123;\tdefer wg.Done()\t//HTTP代理\tproxyAddress, _ := url.Parse(PROXY)\tclient := &amp;http.Client&#123;Transport: &amp;http.Transport&#123;Proxy: http.ProxyURL(proxyAddress)&#125;&#125;\t//打开链接\treq, _ := http.NewRequest(&quot;GET&quot;, picture.src, nil)\tresp, err := client.Do(req)\tCheck(err)\t//读取内容\tbody, err := ioutil.ReadAll(resp.Body)\tCheck(err)\tdefer resp.Body.Close()\t//检查路径,保存\tfilePath := NmList[picture.bkNum][picture.chNum] + &quot;/&quot; + fmt.Sprintf(&quot;%02d&quot;, picture.picNum) + &quot;.jpg&quot;\t// 以写|创建的方式打开目标文件(因为文件夹在创建时就已经建好，所以k可以不用检查)\tf, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, 0644)\tCheck(err)\tdefer f.Close()\tf.Write(body)&#125;func Load(url string) &#123;\terr := chromedp.Run(ctx, chromedp.Navigate(url), chromedp.WaitVisible(`//div[@class=&#x27;appBottomMenu&#x27;]`))\tCheck(err)\ttime.Sleep(2 * time.Second) //无论如何，等待2秒再进行下一步操作&#125;func LoadBook(index int, id string) &#123;\tbookNm := &quot;&quot;\tvar contentNode []*cdp.Node\tLoad(pageUrl + id)\terr := chromedp.Run(ctx, chromedp.TextContent(`//div[@class=&#x27;comic-title text-start&#x27;]`, &amp;bookNm, chromedp.BySearch), chromedp.Nodes(`//div[@class=&quot;col-3 m-0 mb-1&quot;]`, &amp;contentNode))\tCheck(err)\tfmt.Printf(&quot; Start to process book [%d]%s &quot;, index+1, bookNm)\tNmList[index][0] = savePath + &quot;/&quot; + standarlizeName(bookNm)\t//章节数\tchaps := len(contentNode)\tfmt.Printf(&quot; Total: %d Chapters &quot;, chaps)\t//章节base1\tfor i := 1; i &lt;= chaps; i++ &#123; chapNm := &quot;&quot; chromedp.Run(ctx, chromedp.TextContent(contentNode[chaps-i].PartialXPath(), &amp;chapNm)) chapNm = standarlizeName(chapNm) fmt.Printf(&quot;[%d] %s &quot;, i, chapNm) NmList[index][i] = NmList[index][0] + &quot;/[&quot; + fmt.Sprintf(&quot;%02d&quot;, i) + &quot;] &quot; + chapNm //章节数补全2位,加上章节名 if !pathExists(NmList[index][i]) &#123; //建好文件夹 err = os.MkdirAll(NmList[index][i], 0766) Check(err) &#125;\t&#125;\tfmt.Printf(&quot; &quot;)\tbar := progressbar.New(chaps) //显示一个进度条，用来展示每本书的进度\tfor i := 1; i &lt;= chaps; i++ &#123; LoadChap(index, i, bar)\t&#125;&#125;func LoadChap(bookNum int, chapNum int, bar *progressbar.ProgressBar) &#123;\t//分为两步，下拉\tLoad(pageUrl2 + idList[bookNum] + &quot;&amp;chapter=&quot; + strconv.Itoa(chapNum))\tScrollDown()\tvar picNodes []*cdp.Node\terr := chromedp.Run(ctx, chromedp.Nodes(`//div[@class=&#x27;chapter-images wide-block pt-2 pb-2 my-bg-white&#x27;]/img`, &amp;picNodes))\tCheck(err)\t// println(&quot;total Picnum = &quot;, len(picNodes))\tfor i := 0; i &lt; len(picNodes); i++ &#123; picture := &amp;pic&#123;bookNum, chapNum, i, picNodes[i].AttributeValue(&quot;data-src&quot;)&#125; picChan &lt;- picture\t&#125;\tbar.Add(1) //标记这章节已经完成&#125;func ScrollDown() &#123;\tvar prgsBar string\tfor i := 0; ; &#123; err := chromedp.Run(ctx, chromedp.Evaluate(&quot;window.scrollBy(0,document.body.scrollHeight)&quot;, nil), chromedp.Sleep(2*time.Second), chromedp.TextContent(`.//div[@class=&quot;w-100 text-center text-black-50 my-read-tip&quot;]`, &amp;prgsBar)) Check(err) if prgsBar == &quot;100 % （點擊可跳轉）&quot; &#123; if i &gt; 2 &#123; break &#125; else &#123; i++ &#125; &#125; else &#123; if i != 0 &#123; i = 0 &#125; &#125;\t&#125;&#125;func Login() &#123;\terr := chromedp.Run(ctx, chromedp.Navigate(homeUrl), chromedp.WaitVisible(&quot;#email1&quot;, chromedp.ByID), chromedp.SendKeys(&quot;#email1&quot;, account+kb.Tab+password, chromedp.ByID), chromedp.Click(`.//button[@type=&quot;submit&quot;]`, chromedp.BySearch), chromedp.WaitVisible(`//div[@class=&#x27;appBottomMenu&#x27;]`))\tCheck(err)\tfmt.Println(&quot;login complete&quot;)\tfmt.Println(&quot; ...you&#x27;ve 15 second to change the picture quality...&quot;)\ttime.Sleep(100)\tLoad(pageUrl2 + idList[0] + &quot;&amp;chapter=1&quot;)\ttime.Sleep(10 * time.Second)\tfmt.Println(&quot;processing start&quot;)&#125;func pathExists(path string) bool &#123;\t_, err := os.Stat(path)\tif err == nil &#123; return true\t&#125;\tif os.IsNotExist(err) &#123; return false\t&#125;\treturn false&#125;func init() &#123; //chromedp初始化\theadlessFlag := chromedp.Flag(&quot;headless&quot;, false) //有头模式\topts := append( chromedp.DefaultExecAllocatorOptions[:], chromedp.NoDefaultBrowserCheck, //不检查默认浏览器 headlessFlag, //无头 chromedp.IgnoreCertErrors, //忽略错误 chromedp.Flag(&quot;blink-settings&quot;, &quot;imagesEnabled=false&quot;), //不加载gif图像 因为有可能会卡住 chromedp.DisableGPU, //关闭GPU渲染 chromedp.NoSandbox, //不适用谷歌的sanbox模式运行 chromedp.NoFirstRun, //设置网站不是首次运行 chromedp.Flag(&quot;disable-web-security&quot;, true), //禁用网络安全标志 chromedp.Flag(&quot;disable-extensions&quot;, true), //关闭插件支持 chromedp.Flag(&quot;disable-default-apps&quot;, true), //关闭默认浏览器检查 chromedp.WindowSize(1280, 1024), //初始大小 chromedp.Flag(&quot;run-all-compositor-stages-before-draw&quot;, true), //在呈现所有数据之前防止创建Pdf chromedp.UserAgent(`Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36`), //设置UserAgent\t)\tallocCtx, _ := chromedp.NewExecAllocator(context.Background(), opts...)\tctx, _ = chromedp.NewContext( allocCtx, chromedp.WithLogf(log.Printf),\t)\tchromedp.Run(ctx, make([]chromedp.Action, 0, 1)...) //打开，但是什么都不干\tfmt.Println(&quot;-- chromedp start success --&quot;)&#125;func init() &#123; //customsettings初始化\ttype custom struct &#123; Account string `json:&quot;Account&quot;` Password string `json:&quot;Password&quot;` IDList []string `json:&quot;IDList&quot;` //漫画列表 SavePath string `json:&quot;SavePath&quot;` PROXY string `json:&quot;PROXY&quot;`\t&#125;\t_, projectPath, _, _ := runtime.Caller(0)\tfilePath := path.Dir(projectPath) + &quot;/custom.json&quot;\tfmt.Println(&quot;&gt;fetch customInfo from&quot;, filePath)\tjsonFile, err := os.Open(filePath)\tCheck(err)\tdefer jsonFile.Close()\tjsonData, err := ioutil.ReadAll(jsonFile)\tCheck(err)\tvar customInfo custom\tjson.Unmarshal(jsonData, &amp;customInfo)\taccount, password, idList, savePath, PROXY = customInfo.Account, customInfo.Password, customInfo.IDList, customInfo.SavePath, customInfo.PROXY\tif PROXY == &quot;&quot; &#123; PROXY = &quot;http://127.0.0.1:1080/&quot;\t&#125;\tfmt.Println(&quot;-- custom.json loadng success --&quot;)\tfmt.Println(&quot;Welcome!&quot;, account)\tfmt.Println(&quot;your savePath:&quot;, savePath)\tfmt.Println(&quot;your cidList:&quot;, idList)\tfmt.Println(&quot;your proxy:&quot;, idList)&#125;func Check(err error) &#123;\tif err != nil &#123; log.Fatal(err)\t&#125;&#125; ./custom.json放在.exe或者.go的同目录下&#123; &quot;Account&quot;: &quot;账号，空置则手动填写（不着急，检定登陆成功才会开始下一步）&quot;, &quot;Password&quot;: &quot;密码，空置则手动填写，建议不要空置&quot;, &quot;IdList&quot;: [&quot;63944d19d6ffb644413e139f漫画的cid列表，用逗号分割&quot;], &quot;SavePath&quot;: &quot;G:/Comic/2023.02，文件目录&quot;, &quot;PROXY&quot;: &quot;http://127.0.0.1:1080/默认端口，空置也行&quot;&#125;","tags":["web","golang"],"categories":["Codes"]},{"title":"Python爬取picaComic","path":"/Codes/482da7d4.html","content":"net #python第一次的python-selenium爬虫，动态网页确实复杂很多啊（……）现在回头看觉得到处是瑕疵了hhh做一个纪念吧。 Source Code ( using python-selenium )from selenium import webdriverfrom selenium.webdriver.common.by import Byimport timeimport os #文件管理# import imghdr #图像查损import requests# import urllibimport imghdr#---------爬虫初始化----------chrome_options = webdriver.ChromeOptions()user_agent = &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.3 Safari/605.1.15&quot;# 增加用户代理chrome_options.add_argument(&#x27;--user-agent=%s&#x27; % user_agent)# 忽略证书错误chrome_options.add_argument(&#x27;--ignore-certificate-errors&#x27;)chrome_options.add_argument(&#x27;--ignore-ssl-errors&#x27;) chrome_options.add_argument(&#x27;--ignore-certificate-errors-spki-list&#x27;)# 忽略 Bluetooth: bluetooth_adapter_winrt.cc:1075 Getting Default Adapter failed. 错误chrome_options.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-automation&#x27;])# 忽略 DevTools listening on ws://127.0.0.1... 提示chrome_options.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-logging&#x27;])chrome_options.add_argument(&#x27;blink-settings=imagesEnabled=false&#x27;) driver = webdriver.Chrome(options=chrome_options) #模拟器启动# opener = urllib.request.build_opener() #防反爬# opener.addheaders = [(&#x27;User-Agent&#x27;, &#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1941.0 Safari/537.36&#x27;)]# urllib.request.install_opener(opener)# 先加载完所有链接再下载，最稳定的版本idlist=[&quot;63c00254380963328e1d487c&quot;]#漫画地址list&quot;63c00254380963328e1d487c&quot;,def checkFileName(txt): dictionary = &#123;&quot; &quot;:&quot;&quot;,&quot;|&quot;:&quot; &quot;,&quot;/&quot;:&quot; &quot;,&quot;&lt;&quot;:&quot;[&quot;,&quot;&gt;&quot;:&quot;]&quot;,&quot;:&quot;:&quot;_&quot;,&quot;\\&quot;&quot;:&quot;&#x27;&quot;,&quot;+&quot;:&quot;_&quot;&#125; transTable = txt.maketrans(dictionary) txt = txt.translate(transTable) return txtdef pulldown(): print(&quot;---Pulling Down The Page---&quot;) time.sleep(5) #进入一个新的网页，先稍等加载一会 cnt=0 check_height = driver.execute_script(&quot;return document.body.scrollHeight;&quot;) while True: driver.execute_script(&quot;window.scrollBy(0,1200)&quot;) #太快容易中断 time.sleep(1.2) check_height1 = driver.execute_script(&quot;return document.body.scrollHeight;&quot;) if check_height == check_height1: cnt+=1 print(cnt) if cnt&gt;=25: print(&quot;---Back To The Main---&quot;) break else: check_height = check_height1 if cnt&lt;20: cnt=0def isCompleted(img): #图像完整性检查（因为urlretrieve稳定性很好，所以不开也没关系 if not os.path.exists(img): return 0 if not imghdr.what(img): print(&#x27;image not completely downloaded, i\\&#x27;m trying again now.&#x27;) return 0 else: return 1def imgOutput(imgUrl, i, savePath): filename=savePath+f&#x27;\\\\&#123;i:0&gt;4&#125;.jpg&#x27; r = requests.get(imgUrl) ##打开文件并写入 with open(filename,&#x27;wb&#x27;) as f: f.write(r.content) # urllib.request.urlretrieve(url=imgUrl, filename=savePath+f&#x27;\\\\&#123;i:0&gt;4&#125;.jpg&#x27;) # if isCompleted(savePath+f&#x27;\\\\&#123;i:0&gt;4&#125;.jpg&#x27;): # return 1 # 检查图片完整性（如果用这一段，下面改0） return 1def getImgs(url, savePath): driver.get(url) pulldown() #下拉，刷新所有链接 imgs = driver.find_elements( by=By.XPATH, value=&quot;//div[@class=&#x27;chapter-images wide-block pt-2 pb-2 my-bg-white&#x27;]/img&quot;) #在下拉过程中，元素的src属性会刷新 if not imgs: print(&quot;no more pages&quot;) return 0 if not os.path.exists(savePath): os.makedirs(savePath) jpgn = 0 start=time.time() for i in imgs: # if isCompleted(savePath+f&#x27;\\\\&#123;jpgn:0&gt;4&#125;.jpg&#x27;): #断点续传 # jpgn+=1 # print(f&quot;---&#123;jpgn&#125;.jpg has existed in *&#123;savePath[-6:]&#125;*---&quot;) # else: imgUrl = str(i.get_attribute(&quot;src&quot;)) if imgUrl.find(&quot;.gif&quot;) == -1: #不下载gif time.sleep(1.5) cnt=0 while cnt&lt;=5: if imgOutput(imgUrl, jpgn, savePath): break; imgUrl = str(i.get_attribute(&quot;src&quot;)) time.sleep(1) print(f&quot;Something Wrong Here. Cnt=&#123;cnt&#125;&quot;) cnt+=1 if (cnt&gt;5): print(imgUrl) print(&quot;Sorry, I can&#x27;t deal with this error, please check this url later&quot;) else: if cnt&gt;0: print(&quot;Luckily, it has been successfully processed now. &quot;) print(f&quot;---&#123;jpgn:0&gt;4&#125;.jpg has been downloaded in /&#123;savePath[-6:]&#125;---&quot;) jpgn += 1 end=time.time() print(f&quot;||This Chapt Consumed &#123;end-start&#125; seconds.||&quot;) if jpgn == 0: return 0 else: return 1driver.get(&#x27;https://manhuabika.com/plogin/&#x27;)time.sleep(10) # 登录driver.get( &quot;https://manhuabika.com/pchapter/?cid=5fde2af559b287406e2151b8&amp;chapter=1&quot;)time.sleep(10) # 修改清晰度bcnt=0for cid in idlist: start=time.time() #---------每本书的初始化--------- print(f&quot; |||||||Reading Book &#123;bcnt&#125;||||||&quot;) url = f&quot;https://manhuabika.com/pchapter/?cid=&#123;cid&#125;&amp;chapter=&quot; chapN = 3 #起始章 urlC = url+str(chapN) #---------获取书名---------- driver.get(f&quot;https://manhuabika.com/pcomicview/?cid=&#123;cid&#125;&quot;) time.sleep(2) urlTitle=driver.find_element(by=By.XPATH, value=&quot;//div[@class=&#x27;comic-title text-start&#x27;]&quot;).text urlTitle=checkFileName(urlTitle) print(f&quot;&gt;&gt;Loading Book &#123;bcnt&#125;:[&#123;cid&#125;] &#123;urlTitle&#125;&quot;) savePath = &quot;G:\\\\Comic\\\\Spider\\\\&quot;+urlTitle+&quot;\\\\&quot; #书名作为文件夹名字 #---------分章节爬取图像---------- while getImgs(urlC, savePath+f&#x27;Chap&#123;chapN:0&gt;2&#125;&#x27;): print(f&quot;Chap&#123;chapN&#125; is Finished&quot;) chapN += 1 urlC = url+str(chapN) #---------每本书的结尾---------- end=time.time() print(f&quot;This Book Consumed &#123;end-start&#125; seconds.&quot;) print(f&quot;||||||Book &#123;bcnt&#125;:[&#123;cid&#125;] &#123;urlTitle&#125; have been downloaded. ||||||&quot;) bcnt+=1print(&quot; おめでとうございます! All Books Have Been Processed Successfully.&quot;)","tags":["web","python"],"categories":["Codes"]},{"title":"Linux文件操作","path":"/Engineer/8a4e650f.html","content":"linux目录操作 ls 打印当前目录下的文件名 cd &#123;dir&#125; 打开文件夹 cd .. 退回上级目录 cd /（退回最高级目录） mkdir &#123;dir&#125;创建文件夹 rm &#123;name&#125; 删除文件 打印文件内容cat &#123;name&#125; 打开文件vi &#123;name&#125; 修改文件 / &#123;keyword&#125;，查找 通过命令进入文本输入模式，常用的命令如下： ① a 在光标之后开始输入文本② A 在行尾开始输入文本③ i 在光标之前开始输入文本④ I 在行首第一个非空白字符前输入文本⑤ o 在光标所在行后插入一空行⑥ O 在光标所在行前插入一空行 保存退出修改好文件后，如果在文本输入模式下，首先按“ESC” 键进入命令模式，然后输入“:”，进入末行模式，在末行模式下，可使用如下退出命令： ① q 是直接退出；② wq 保存后退出；③ q! 强制退出；④ wq! 强制保存退出； 复制/移动/修改文件名cp &#123;Source&#125; &#123;Dst&#125; mv &#123;Source&#125; &#123;Dst&#125; 解压缩tar -xvf &#123;filename&#125;","tags":["Centos"],"categories":["Engineer"]},{"title":"群晖docker部署Yunzai-Bot V3（原神qq机器人）","path":"/Engineer/19b0016d.html","content":"docker #linux 大篇幅参考： zh8416-Yunzai-Bot在群晖NAS中的搭建教程 Docker 部署) 本以为配置完go环境的我已经无坚不摧了，却还是（……）踩了很多坑（悲），终于搭好了，简单记录一下过程。（草，抄错链接了以为不能用，其实可能可以一键部署，我全是手动部署的，问题不大……） 1. 创建容器 在套件中心下载docker插件，并在注册表中查找centos双击下载，版本选择8.2.2004 （好像可以选更新的，Centos8会导致接下来多一步操作，但是我是抄作业的，所以照抄了） 虽然说可以创建两个容器分别是redis和yunzai而不是把两个程序都部署在centos上，但是这样后面管理插件之类的会很痛苦的，还是别这么干了，而且容器之间还得开端口通信……（头皮发麻） 下载完成后，在映像中找到centos右键启动，勾选高权限执行容器 【！！重要！！】如果需要使用锅巴插件（可访问可视化后台管理页面），需要开启端口映射！！！创建时不开端口映射后面想加会很麻烦！！！锅巴插件默认端口号（容器端口号）50831，映射界面可填写50831-50831-UDP，50831-50831-TCP，这样，把访问群晖的网址后的端口号5000改成50831即可访问锅巴后台。 双击centos容器，进入终端机（命令行），开始配置环境 2. 配置云崽本体1. 配置Yum环境版本号高于8的可以跳过这一步 进入yum目录cd /etc/yum.repos.d/ 更换下载源sed -i &#x27;s/mirrorlist/#mirrorlist/g&#x27; /etc/yum.repos.d/CentOS-* sed -i &#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27; /etc/yum.repos.d/CentOS-* 更新设置（这一步要等一会）yum update -y 回到根目录cd / 2. 配置云崽依赖和本体一键部署可以先试一下这个：bash &lt;(curl -sSL http://yunzai.org/install_v3) 手动部署如果能用的话以下都可以跳过，如果不能用的话就手动部署。 安装Nodejs（如果报错的话可以再输一次更新下载源的两条命令试试）yum install -y dnfdnf module install nodejs:16 -y 安装 gityum -y install git 安装并运行 redisyum -y install redis &amp;&amp; redis-server --daemonize yes 克隆项目（国内镜像链接）git clone --depth=1 -b main https://gitee.com/Le-niao/Yunzai-Bot.git 安装模块cd Yunzai-Bot 安装 pnpmnpm install pnpm -g 安装依赖pnpm install -P 安装 chrome 依赖库yum install pango.x86_64 libXcomposite.x86_64 libXcursor.x86_64 libXdamage.x86_64 libXext.x86_64 libXi.x86_64 libXtst.x86_64 cups-libs.x86_64 libXScrnSaver.x86_64 libXrandr.x86_64 GConf2.x86_64 alsa-lib.x86_64 atk.x86_64 gtk3.x86_64 -y &amp;&amp; yum install libdrm libgbm libxshmfence -y &amp;&amp; yum install nss -y &amp;&amp; yum update nss -y 安装中文字体yum groupinstall fonts -y 3. 云崽使用和插件安装使用指令前台运行指令（第一次需要登录）node app 后台运行/停止指令（如果在/Yunzai-Bot目录下）npm startnpm stop 重启服务器/docker/容器时，（容器在根目录），后台运行指令：（重启时需要重新打开redis服务）redis-server --save 900 1 --save 300 10 --daemonize yesnpm -prefix=/Yunzai-Bot start 以上指令可匹配开机计划任务自定义脚本：sleep 300;sudo docker exec [container id] redis-server --save 900 1 --save 300 10 --daemonize yes;sudo docker exec [container id] npm -prefix=/Yunzai-Bot start 常用插件https://gitee.com/yhArcadia/Yunzai-Bot-plugins-index 喵喵插件重要，涉及很多好用的附加功能，建议安装 喵喵插件安装命令： git clone --depth 1 -b master https://gitee.com/yoimiya-kokomi/miao-plugin.git ./plugins/miao-plugin/ 喵喵依赖安装命令： pnpm add image-size -w 帮助菜单命令： #喵喵菜单 插件设置命令： #喵喵设置 推荐执行： #喵喵更新图像 以及 #喵喵设置帮助 开启 锅巴插件很重要！涉及可视化的后台管理界面，强烈建议安装 锅巴插件安装命令： git clone --depth=1 https://gitee.com/guoba-yunzai/guoba-plugin.git ./plugins/Guoba-Plugin/ 锅巴依赖安装命令： pnpm install --no-lockfile --filter=guoba-plugin -w 外网登录的话需要在服务器后台放行端口，具体看 #锅巴帮助 帮助菜单命令： #锅巴帮助 逍遥插件(图鉴插件)涉及图鉴，选装 逍遥插件安装命令： git clone --depth=1 https://gitee.com/Ctrlcvs/xiaoyao-cvs-plugin.git ./plugins/xiaoyao-cvs-plugin/ 逍遥依赖安装命令： pnpm add promise-retry -w pnpm add superagent -w 安装完需要先 #图鉴更新 一次 帮助菜单命令： #图鉴菜单 插件设置命令： #图鉴设置","categories":["Engineer"]},{"title":"Golang爬取qq空间说说","path":"/Codes/b854aa89.html","content":"web #golang第一次的Golang代码！纪念一下~~（chromedp就这么冷门吗资料都好难找…这波是被迫99%原创了（？ 主要内容是： 载入网页，等待用户登录，检测到登录后开始爬取 进入说说页面先检查总页数，跳转到用户需求的起始页，开始爬取 根据我的观察（？），qq空间网页结构如下： li[@class=’feed’] 存储了每一个说说/转发单元 （feed的下一层）/div[@class=’box bgr3’] i. /div[@class=’bd’]存储了说说本体/转发内容 /pre[@class=&#39;content&#39; and @style=&#39;display:inline&#39;]存储了文字信息 ii. /div[@class=’md rt_content’]存储了转发信息（如果名字为’md’，就是原创内容） /div[@class=&#39;quote bor2&#39;] /div[@class=&#39;bd&#39;] 文字信息 /a content是转发者信息，profileuin是转发者的QQ号 /pre[@style=&#39;display:inline&#39;] 存储文字信息 /div[@class=&#39;md&#39;] 图片信息 /a href中是转发图片的直链 iii. /div[@class=’ft’] /span[@class=&#39;c_tx3&#39;] /a title是时间码（形如：2023年1月3日 19:45） iv. /div[@class=’box_extra bor3’]//此处先不做了好麻烦（） /div[@class=&#39;feed_like&#39;] /a 可能有多个，是列举的点赞者和人数（形如：292人） /div[@class=&#39;mod_comment&#39;] /div[@class=&#39;mod_comments&#39;] /ul （以下每一组评论是一个Bor） //a[@class=&quot;nickname&quot;] content是昵称，href包含qq号信息 //span[@style=&quot;] 根据这个结构，先找到每个说说节点，即Xpath为.//div[@class=&#39;box bgr3&#39;]，然后在其子结点中分别提取说说内容、时间码即可形成简单的日志。想要过滤转发的说说，故对div[2]以class属性为md和md rt_content进行区分即可。 希望体验一下Go语言知名的Goroutine并发，故把数据的处理、处理的数据生成日志两个步骤分配给独立线程。由于qzone本身需要ck登录才能使用，所以多线爬取也会被快速关黑屋（访问人数过多），这里就没有尝试代理池x具体的内容就是read线程用来连续从网页爬取数据，把数据塞进textChannel，output线程时刻监听textChannel的动向、每收集50条说说（如果读取到结束信号，则不满50条说说也操作）就启动一个go线程（toFile）生成一个文件。 就效果来说感觉相当满意了！大约120页左右还是被关了小黑屋就是了（小声）可能多sleep会更安全吧~不过120页我觉得是个能接受的程度了~速度的话也比Python-Selenium快很多！不足的话就是没有做超时刷新，一旦卡住就会出问题（不过chromedp稳定性还是挺不错的），等有空了就加上x 总体的体验就是：这库是真难用啊啊啊！不过写这个还是很有趣~明后天就来做漫画爬取的golang版本~动态网页还是爬取上比较麻烦呢（叹气）细说这个难用，啊啊啊啊啊啊啊啊，啊啊啊啊啊（无意义的悲鸣），你这怎么把函数放在参数表里运行当常态，痛苦比如说webEngine创建好了以后，python-Selenium可以直接webEngine.get(url)，就是get()是引擎类的类函数，但是这里所有相关engine的操作都是要“嵌套”的，这里要用chromedp.run(webEngine, xxxxxxx,xxxxxxx)（xxxx就是所有要运行的函数）。这样看还好，但是导致一个问题，这些函数的返回值都是函数参数，比如我查找一个元素它就不能直接把这个元素返回到左值，而是要先定义一个元素变量把地址传给找元素的函数……带来很多没必要的麻烦（我并不能体会到这种写法的好处……还是更喜欢把这种常用的、有返回值、和类紧密相关的函数写成类函数）不过最后还是写完了！很开心！总之就是非常开心！&gt;w&lt; package mainimport (\t&quot;context&quot;\t&quot;fmt&quot;\t&quot;log&quot;\t&quot;os&quot;\t&quot;strconv&quot;\t&quot;strings&quot;\t&quot;sync&quot;\t&quot;time&quot;\t&quot;github.com/chromedp/cdproto/cdp&quot;\t&quot;github.com/chromedp/chromedp&quot;\t&quot;github.com/chromedp/chromedp/kb&quot;)// 全局变量const (\tqqID string = &quot;2498742177&quot;\tsavePath string = &quot;F:/Temp&quot;\tdocRange int = 50)var (\tctx context.Context\twg sync.WaitGroup) //每篇容量为50条说说,如果完成则不满50条说说也输出func main() &#123;\turl := &quot;https://user.qzone.qq.com/&quot; + qqID + &quot;/311&quot;\tfmt.Println(&quot;please log in&quot;) //正在加载页面\tvisit(url) //初次加载\tdeal(254, 999) //需要加载的范围(第二个值如果过大，会自动修正为最后一页)\twg.Wait()&#125;func deal(start int, end int) &#123;\tpageNum := ini_load()\t//规范化输入\tif start &lt; 1 &#123; start = 1\t&#125;\tif end &gt; pageNum || end &lt; start &#123; end = pageNum\t&#125;\ttextChan := make(chan string, 100000)\twg.Add(1)\tgo output(textChan) //创建一个进程，用来处理输出的文本\tturnToPage(start)\tfor i := start; i &lt;= end; i++ &#123; load() read(textChan) time.Sleep(1 * time.Second) nextPage() if i == end &#123; fmt.Println(&quot;all pages have been read. &quot;) textChan &lt;- &quot;end&quot; &#125;\t&#125;&#125;func visit(url string) &#123;\terr := chromedp.Run(ctx, chromedp.Navigate(url), chromedp.WaitVisible(`#app_canvas_frame`, chromedp.ByID))\tcheck(err)&#125;func ini_load() int &#123;\ttime.Sleep(2 * time.Second)\ti := 0\tfor &#123; i++ var str string err := chromedp.Run(ctx, chromedp.Evaluate(&quot;window.scrollBy(0,1000)&quot;, nil), chromedp.Sleep(time.Second), chromedp.TextContent(`.//a[@title=&quot;末页&quot;]`, &amp;str)) //找到最大页数 check(err) if len(str) != 0 &#123; fmt.Println(&quot;total page: &quot; + str) fmt.Println(&quot;initializing completed&quot;) pageNum, _ := strconv.Atoi(str) return pageNum &#125; else &#123; if i &gt; 10 &#123; err = fmt.Errorf(&quot;scroll error: can&#x27;t find pageEnd&quot;) break &#125; &#125;\t&#125;\treturn -1&#125;func load() &#123;\ttime.Sleep(2 * time.Second)\ti := 0\tfor &#123; i++ var str string err := chromedp.Run(ctx, chromedp.Evaluate(&quot;window.scrollBy(0,1000)&quot;, nil), chromedp.Sleep(time.Second), chromedp.TextContent(`.//p[@class=&quot;mod_pagenav_main&quot;]/span[@class=&quot;current&quot;]/span`, &amp;str)) check(err) if len(str) != 0 &#123; fmt.Println(&quot;* current page: &quot; + str) fmt.Println(&quot;loading completed&quot;) break &#125; else &#123; if i &gt; 10 &#123; err = fmt.Errorf(&quot;scroll error: can&#x27;t find pageEnd&quot;) break &#125; &#125;\t&#125;&#125;func read(textChan chan string) &#123;\tfmt.Println(&quot;reading...&quot;)\tvar nodes []*cdp.Node\terr := chromedp.Run(ctx, // chromedp.Evaluate(`document.getElementsByClassName(&#x27;app_canvas_frame&#x27;)[0].contentWindow.document.body.outerHTML;`, nil), chromedp.Sleep(time.Second), chromedp.Nodes(`.//div[@class=&#x27;box bgr3&#x27;]`, &amp;nodes),\t)\tcheck(err)\tfmt.Println(&quot;total: &quot;, len(nodes))\tfor _, node := range nodes &#123; //对于每个找到的说说节点 path := node.FullXPath() path = path[strings.Index(path, &quot;//&quot;)+2:] //去除iframe前面的内容 var text string var share string var date string textPath := path + &quot;/div[2]/pre&quot; //子节点地址2：text sharePath := path + &quot;/div[3]&quot; //子节点地址3：share(转发则该元素class为md rt_content) datePath := path + &quot;/div[4]/div/span/a&quot; //子节点地址4：date err = chromedp.Run(ctx, chromedp.TextContent(textPath, &amp;text), chromedp.AttributeValue(sharePath, &quot;class&quot;, &amp;share, nil), chromedp.AttributeValue(datePath, &quot;title&quot;, &amp;date, nil), ) check(err) wg.Add(1) //启动进程进行登记 go func() &#123; defer wg.Done() //进程结束进行登记 if text != &quot;&quot; &amp;&amp; share == &quot;md&quot; &#123; //如果文本为空或来源于转发，则跳过以下步骤 textChan &lt;- &quot;&lt;!-- node &quot; + date + &quot;--&gt; &quot; + text + &quot; &quot; //开一个进程进行输出 &#125; &#125;()\t&#125;&#125;func turnToPage(i int) &#123;\terr := chromedp.Run(ctx, chromedp.SendKeys(`.//span[@class=&quot;mod_pagenav_turn&quot;]/input`, strconv.Itoa(i)+kb.Enter), // chromedp.Click(`//a[@title=&#x27;下一页&#x27;]`),\t)\tcheck(err)&#125;func nextPage() &#123;\terr := chromedp.Run(ctx, chromedp.Click(`//a[@title=&#x27;下一页&#x27;]`),\t)\tcheck(err)&#125;func output(textChan chan string) &#123;\t//该进程唯一（保证顺序）\tdefer wg.Done()\tdoc := &quot;&quot;\tk := 0\tfor i := 0; ; &#123; item, _ := &lt;-textChan //等待从通道中获取值 if item == &quot;end&quot; &#123; k++ wg.Add(1) go toFile(doc, &amp;k) break &#125; if i &lt; 49 &#123; i++ doc = doc + item &#125; else &#123; k++ wg.Add(1) go toFile(doc, &amp;k) doc = &quot;&quot; i = 0 //初始化 &#125;\t&#125;&#125;func toFile(doc string, k *int) &#123;\t//该进程可多发\tdefer wg.Done()\tvar fileSavePath string\tfor &#123; fileSavePath = savePath + &quot;/qzone(&quot; + strconv.Itoa(*k) + &quot;).md&quot; _, err := os.Stat(fileSavePath) if err != nil &#123; break &#125; else &#123; *k++ &#125;\t&#125; //如果文件重名，则一直尝试到不重名\tdoc = &quot;--- title: qzone(&quot; + strconv.Itoa(*k) + &quot;) layout: wiki wiki: dynamic type: dynamic order: --- &quot; + &quot;&#123;% timeline %&#125; &quot; + doc + &quot;&#123;% endtimeline %&#125;&quot;\tfile, err := os.OpenFile(fileSavePath, os.O_WRONLY|os.O_CREATE, 0644) // 以写|创建的方式打开目标文件\tcheck(err)\tdefer file.Close()\tfile.WriteString(doc)\tfmt.Println(&quot;- file &quot; + strconv.Itoa(*k) + &quot; has been written. &quot;)&#125;func init() &#123; //初始化chromedp\theadlessFlag := chromedp.Flag(&quot;headless&quot;, false) //有头模式\topts := append( chromedp.DefaultExecAllocatorOptions[:], chromedp.NoDefaultBrowserCheck, //不检查默认浏览器 headlessFlag, //无头 chromedp.IgnoreCertErrors, //忽略错误 chromedp.Flag(&quot;blink-settings&quot;, &quot;imagesEnabled=false&quot;), //不加载gif图像 因为有可能会卡住 chromedp.DisableGPU, //关闭GPU渲染 chromedp.NoSandbox, //不适用谷歌的sanbox模式运行 chromedp.NoFirstRun, //设置网站不是首次运行 chromedp.Flag(&quot;disable-web-security&quot;, true), //禁用网络安全标志 chromedp.Flag(&quot;disable-extensions&quot;, true), //关闭插件支持 chromedp.Flag(&quot;disable-default-apps&quot;, true), //关闭默认浏览器检查 chromedp.WindowSize(1280, 1024), //初始大小 chromedp.Flag(&quot;run-all-compositor-stages-before-draw&quot;, true), //在呈现所有数据之前防止创建Pdf chromedp.UserAgent(`Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36`), //设置UserAgent\t)\tallocCtx, _ := chromedp.NewExecAllocator(context.Background(), opts...)\tctx, _ = chromedp.NewContext( allocCtx, chromedp.WithLogf(log.Printf),\t)\tchromedp.Run(ctx, make([]chromedp.Action, 0, 1)...) //打开，但是什么都不干&#125;func check(err error) &#123;\tif err != nil &#123; log.Fatal(err)\t&#125;&#125;","tags":["web","golang"],"categories":["Codes"]},{"title":"回来的女儿","path":"/Drama-TVdrama/901aa4a4.html","content":"推荐：4/5标签：家庭/悬疑简介：讲述了20世纪90年代的潭岭小镇，失踪与伤害案件频发。为找寻失踪好友小秀，孤女陈佑希逃离孤儿院，却阴差阳错成为李家失踪多年的女儿，意外撞见这个家不可说的秘密的故事。 简评：缺一不可的一个又一个大小事件促成必然的结果（悲） 剧透篇 我趣，演员各个演技爆表了！张子枫这个发型感觉蠢蠢的哈哈哈哈（x）但是演得好棒！ 剧情的复杂程度和长度相当匹配，不会感觉特别拖节奏，情节发展上也是有意外有合理。当我看到女主被关进去精神病院的时候，我真的觉得不知所措了（） 关于老李 前半程其实一直觉得很心疼老父亲，有点希望小秀的事情真的是傻哥哥酿成的悲伤的意外，希望如实地呈现给警方，或者女主就在这个家里生活下去……后来大跌眼镜。（博主看男人的眼光还是一如既往的差.jpg）……啊啊啊啊把我的感动还给我…… 就是 我觉得教自行车啊。买蛋糕啊。送孩子上学啊。什么的。这都很能共鸣啊。感觉我爸也差不多是这样吧。怎么说呢，那种明明经济并不富裕但是为了孩子愿意付出很多的我总是莫名其妙地心里一缩（当然啦，很多的爱有时候也会带来对子女的更多的期待、、期望、、甚至会成为枷锁……那就是另一个话题），啊啊啊啊啊……QAQ，我感觉我爸就是那种在这个情境下会给我蛋糕all in的类型 怎么说呢，我觉得有些对子女的爱啊。还真的是。像是不需要理由的存在。有时候也会有点迷茫，血缘在亲情里的具体意义。如果不是认为有血缘，女主也不能被这样对待吧，可是如果认为没有血缘也愿意待在一起的话，那这种感情该怎么说明……如果李文文回来的话，看到女主又会怎么想……之类的（？） 这对我不是很新鲜的想法就是了（）我有时候也会想着，啊啊我真是不肖女啊，如果我爸的女儿是别人来做的话很可能比我做的更好吧……我爸是很爱我对我期待也很高的类型，他自己很努力也觉得我应该要很努力，但是我是个咸鱼性格（悲）…… 噢，不过我很快就没有余地想这些乱七八糟的东西了，因为老父亲和我想象的也完全不一样……&amp; 所以发现这个父亲这么吓人的时候我真的！啊啊啊啊啊（啸叫） 好像也合理，被欺负久了的老实人，自卑的种子在心里深植，这一点甚至可以说是第一集就讲清楚了，老父亲别扭地问妻子是不是她在后悔没有选择王重江…… 怎么说，我还是受不了，。而且我看了这么多年悬疑小故事，我真的觉得杀人这种事情一旦开始，人就会异化的，就像一旦开始抄作业就会觉得“啊原来还可以这样解决问题！”然后每次看到作业都想抄（尽量浅淡的说法呢……），，唉 而且 对小孩子下手也太过分了，这样欺骗亲近的人也太恐怖了……会觉得背后好冷的程度…… 还真是他妻子说的那样呢 看起来深爱着谁，其实最爱的是他自己……什么的 就是 这推车业务也太不熟练了吧？而且推的时候到底咋想的，是不是早就想到会被发现想推给程威啊……救命……可是如果他真的没想过帮小孩子担责任，他完全可以不要推这个车，这样自己根本就不沾这件事情……或者只是想法在犹豫之间改变了吧。我不是很明白。 关于廖 基本上就是刻画了一个为了傻儿子不顾一切的母亲 剧情进入后半开始激情降智，难绷……就解释成因为儿子过于激动无法思考吧（唉 其实前半我一直在想怎么能这样啊，一边一边的对两边都好过分啊，。。我妈好像就比我能理解一点，但我完全不行，我就是觉得她要不就放弃一边……（强加一点我的伦理观？）可是真的很痛苦啊 在两个床之间辗转不好吧。可是看样子好像和老李也是分床睡。 我搞不懂啊。 如果是我……我的想法就是，优柔寡断就会什么都得不到的。唉。 所以王重江怎么干嘛抛弃她又找回她啊？？ 还有那个，把一个好好的小姑娘关进精神病院真的好恐怖，她明明说什么都不愿意自己的儿子去精神病院，可是对女主……啊啊啊啊啊啊啊（悲） 王重江 搞保健品的……（后仰）但是对廖女士是恋爱脑 这两个人其实行为逻辑都还蛮简单的。。。 女主&amp;程威 呃，我就是说你们不要指望两个普通的小孩能做到什么特了不起的事情，真的就是普通的青少年而已……不是名侦探之类的存在……冲动也有的，鲁莽也有的，对法律不知界限也是有的…… 不过从我的个人好恶来看，不是很能接受拿枪弄棒的脾气（退）我属于是在家教环境下极其排斥肢体冲突的类型呢…… 弹幕里怎么刷讨厌女主，把一切都怪在女主回家身上我也是不太理解的……事情本来就是那么些个事情，女主也没有伤害谁的恶意，她开始只是想知道真相，后来是想守护也守护过她的程威罢了…… 要说迷惑的话，可能在知道推车真相以后她立刻回去找廖女士讨论，说很恨老李让我觉得有一点没反应过来，说实话妹妹你们在抛下老王的时候本来不就是一副杀了人也没办法的态度了吗（就算真的觉得还能活你们会报警吗），……，反正我觉得一下子变得那么生气是我有点没想到的。至少还得等老李的残忍的一面更明显一些？然后寻找证据的方式也属于让我大开眼界…… （不过我也就是纸上谈兵罢了x 一些没想明白的东西 关于DNA证明 虽然我不是很确认啊。就是说这个东西是小程去偷换了搞出来亲子鉴定的结果，然后先是廖女士看到了，廖女士很明确地知道女主绝对不是她女儿（洗衣机），所以直到精神病院那里才拿出来用，那时候老李也看到了（？？？），可是不久前老李才看到女主脸上假的痣 我有点懵，有点好奇老李怎么看待这个报告（因为理论上不能造假呀），不过从态度来讲，看到痣以后老李完全就是一副反正你也不是我亲女儿的样子…… 关于帮忙保管鱼饵的店的老板 那哥们好像被打晕了，他后面没事吗（我本来以为要血案+1的……害怕极了） 所以王重江和小秀到底是怎么回事啊（大雾）还有那片子后面为什么是廖女士独白啊，是王重江有意的吗（？） 好像还有，但是我忘了，想起来再说吧… 啊啊啊啊啊啊啊洗衣机我趣，真的好恐怖……让我想起来看的一个什么和洗衣机有关的人格分裂的故事&amp;好像以前在萌芽也看过一个和洗衣机有关的，反正都好吓人。呜呜…… 总的来说 不能说对我是没什么触动的。唉。 家庭这个tag打在悬疑前面完全没问题（悲）","categories":["Drama/TVdrama"]},{"title":"关于皮套&直播的一些","path":"/Daily/d0ed31bf.html","content":"0开始觉得有点无聊和烦躁了，故.,.（大量删减的聊天记录在2#）有亲友陪着我真的太好了！ 不能说是完全没有套皮出道试试的想法吧，但是发现毫无心理准备的我对于这种事情来说还是太脆弱了（） 就结论而言，（尤其寒假之后）直播的时间会大幅减少……（不如说我以后预期是只偶尔做每周1-2次的歌回，其他内容纯看心情）寒假的话，由于最近心情的原因可能也会取消歌回（约22.00）以外的内容。基本确保能每天直播的时间大约到两位三次元不认识的舰长过期为止~ 原因的话… 差不多两个原因五五开？…… 1一方面是内容上的固执。 就是，我不知道到底播什么了。（） 也想试试玩别的游戏，想试试以“面对着他人”的姿态玩游戏去直播，但是发现自己其实做不到。喜欢的就是喜欢，没那么喜欢的就是没那么喜欢，…… 我确实是文字游戏博主哦。也想试着玩玩别的游戏的，但是就是觉得没有文字游戏好玩呀。就算我玩游戏对每个游戏有这样那样的看法，当别人问我推荐“神作”的时候犹豫很久很久，但是我还是喜欢这件事情呀，我喜欢故事远远胜过玩法……纯粹玩法的游戏，我也不是不能感觉到好玩，可是故事要吸引我得多，复杂的玩法会让我因为看不到故事而焦躁…… 就算文字游戏是一个可能快要死掉的形式也很喜欢。我喜欢文字游戏特有的叙事方式，喜欢声优们的精彩演出，喜欢画师赋予角色们的鲜活容貌。习惯于这个恰到好处的幻想空间并对此感到舒适。 而比起一边与他人讨论一边看故事，我更愿意自己一个人自闭地看……一方面，我的阅读习惯比较排他，我偏好速读、遇重点回读，但是对别人未必如此，可能只能看到我不断地切过句子；另一方面，就是单纯地没有那么喜欢说话（）所以直播我玩文字游戏的过程对于观众来说是非常无趣的。而从我的角度而言，我也更希望观众自己去玩这个游戏而不是看我玩。 并且，很多文字游戏其实是不太方便直播的。对文字游戏来说，故事就是绝大多数了，不像是玩法取向的游戏、看了玩法会觉得想要自己去玩，有的片段看了确实影响体验的……而且有一些非官方翻译等等都是不允许公开流出的，我对那些为爱发电的汉化组非常感谢和佩服，不想违背他们的意愿。 唱歌什么的倒也是可以的啦，但是我会的曲子没有那么多也唱不了很久，一直播的话就会很多重复……（另外我觉得我的麦也不是很好x） 2另一方面是我这个人的固执（）。 这个就在下面的聊天记录里说得很明白了……说到想做直播的初衷，也只不过薅叔叔的百来块钱羊毛罢啦。所以几乎是无准备无了解地进入了这个领域（……） 现在渐渐意识到： :想着 什么不认识的人也会喜欢 这种做法就感觉很不舒服:没有做教程的时候想 什么不认识的人可能也会有帮助 那么纯粹 至少我觉得我不能做得到，或者说我本来在三次元中都不算个什么讨人喜欢的人…… 可以说社恐的很大一部分成因就是过强的自我意识，正因如此，即使在二次元我也不能做到开着直播和关了直播一个样地摸鱼（） 友:\\=\\=推得咋样了（）:没怎么管（x:放养中友:笑死友:三天打鱼两天晒网捏（）:是这样的（:比如我现在就不想播了:我已经开始觉得很无聊了（友:xs友:但是 感觉 现在有这个群友:是不是就会:影响我友:有点上班似的压力:对:呜呜 我还是不该建这个的友:不过他们话这么多（）:应该我不播了就少了吧（友:难说友:可能直接把主包踢了自立门户（）友:已经是成熟的水友了 涩图吊图技术一样不落:确实……主包常年状况外:我觉得我还是喜欢自闭地一个人打点没人玩的单机游戏:而且我也不是很喜欢一边打游戏一边说话友:害:所以我也没什么可播的其实友:感觉尝试这种东西友:还是要留点退路（）:是这样的（:反正等两个陌生水友的舰长到期了我就自由了:大爷，，那无所谓的友:笑死友:老头地位（）:是这样的:然后我想我确实对奇怪的人容忍度极低:=。=:属于看了就糟心的那种:不如自闭友:确实:而且一些群友一副自来熟的样子:呃友:确实:我有点难绷:可能V圈是这样吧友:有点太社牛了:但是对我 不熟就是不熟啊。。:在我这就是感觉。。啊啊啊友:确实有点（？）友:怎么说呢友:戏子的感觉吧友:就是要去取悦他人:感觉还是不一样的:开直播打游戏和自己自闭打游戏友:尤其是有利益关系之后:是这样的:而且肯定主要还是白嫖的啊:我今天看了几个V的那种切片:就是 主播你能不能只露出眼睛然后点头（:草友:确实友:那个:我现在真觉得V圈是…:我也很难理解有些妹子在皮套后面说这种话之类的是怎么想的友:V圈搞软色情不是一天两天了（）:玩弄阿宅的心情很有趣是吧（主要还是有利吧友:也不一定吧友:生活所迫可能就麻木了:我不理解（大声:不过说实话:光好看皮套就能千粉:V圈基数是在这友:确实:我已经不知道我想搞什么了:其实这个粉丝基数可能是可以做一点好玩的试试的:但是一想到是取悦的性质我就觉得挺恶心的（友:怎么说呢友:不开心就别做:确实是友:只能说钱不好挣a:确实~:还是好好写代码友:好好学习好好搞钱友:好好搞男人（）:想着 什么不认识的人也会喜欢 这种做法就感觉很不舒服:没有做教程的时候想 什么不认识的人可能也会有帮助 那么纯粹友:确实:可能普通人就是这样吧x友:目的变了就很不一样了:呜呜友:希望别人喜欢。。。这种感觉真的很卑微:是的是的:希望别人有帮助的话 可以说是平等甚至有点上位的友:确实:还是自己开心最重要友:感觉实在不行得玉玉跑路（）:笑死，太懂了友:我有点理解了:但是我真觉得我要是每天需要考虑播什么:我真的会玉玉的友:为啥这么喜欢玉玉这个说法:因为我本来就不是很擅长和别人相处的类型友:确实:今天我在群里脾气都有点控制不住了友:花心思讨好别人真的很累啊:但我这脾气注定没办法和很多人都好好相处吧（:也就亲友们能忍忍我了233友:感觉主包是一个很奇怪的地位友:看起来是在上位友:但又是观众的服务者:其实是在下位友:就很:主包一旦说错话都是要被吊起来的友:哎友:确实:比如说什么Vtb不就是…什么的:我敢往b站上发明天估计就被冲烂友:确实:我不知道别的套皮人套皮播的时候是不是觉得这个事情很开心呢友:“享受了流量的红利就要接受流量的反噬”:反正对我来说就是…，渐渐意识到是在干嘛以后就只会觉得压力很大了:…普通人还是别轻易尝试了（:而且很难说做到心态上完全不在意别人感受的直播:就是只要有这个行为了就会产生表演意识:害害 已经搞不懂啦友:害友:以前觉得当V恰恰米挺容易的:感觉以前（几周？）的想法有点理想化:我也是这么想:可能就是声音好听然后卖卖萌:但是我现在觉得卖卖萌这种事本来就不是普通人自然而然地能做到的友:哎友:感觉真的挺折磨的:我现在速润友:确实:幸好投入还没有很多:还是做我的冷冷清清的自闭文字游戏博主友:虽然感觉现在已经挺难收场的了友:但是已经是最好的结果了:还好，要是一周一回唱个歌我还是能接受的（:至少唱歌的时候不用考虑说什么话:毕竟我还有个皮套，不用总感觉亏了（草友:笑死:我的兴趣都没支撑到我皮套做完:草死了友:沉没成本这就来咯（）:沉没成本这就来咯（）友:害 憋想了:嗯嗯嗯友:摆一天是一天:你陪我理一下思路感觉想清楚很多了友:摆到日子就差不多了:本来觉得挺烦的友:嘿嘿:嘿嘿 3其实心情有点类似和我爸说要退出致远荣誉计划（类似重点班）的感觉 就是，我能预期到我爸一定会说好，会支持我的决定，可是我也知道他到底怎么想 我觉得我现在如果说啊啊不干了（可能是）喜欢我的大家的想法……（说是大家其实也没几个人啦）支持肯定是支持，除了我自己没人能强制我继续做这件事情的 群我也不知道该怎么处理好，就先这样吧…… 让大家陪伴我任性一场，非常不好意思哦。（）","categories":["Daily"]},{"title":"咎狗之血","path":"/Tavg/RoseR/ff3273f7.html","content":"无剧透篇 简评：带点灰暗的血腥气的幻想故事 推荐：4/5 标签：战争/暴力 Infomation: MoeLink CV List： 姓名 声优 角川译名 身高 年龄 Akira 先割れスプーン(鸟海浩辅) 明 172cm 18~19岁 Shiki 绿川光 式 188cm 21~24岁 Keisuke 何武者(杉田智和) 启介 178cm 18~19岁 Rin 鬼龙院隼人(福山润) 凛 154cm - 源泉 一条和矢 183cm 40岁+ NANO Prof.紫龙神谷浩史(山崎巧) 182cm - Yukihito 神谷浩史 178cm 21~24岁 一些： 如果说甜池围绕着异形和宗教、探讨人的爱与非人的爱，那么这部就是围绕着战争和暴力，探讨罪与罚（？）…… 甜池给读者的感受像输液管里的药液一点一点流进血脉里，有细微且微妙的凉意，而咎狗是更加直接的，直接哐哐哐几拳砸向读者的脑袋……是的，血腥和暴力是几乎无法排解的主调。 在体验过这一部作品之后，感觉对这位剧本娘的作品有了更多的认识。她的世界都是那么特别，弥漫着微妙的氛围感——她太懂得怎么去制造一个这样的世界了~&gt;w&lt;= 剧透篇关于角色们战争背景下的大家都好麻木好冷漠好血腥好暴力——啊啊啊——你们怎么几乎都不做润滑（怒）小明好可怜 中间最柔软最细腻的一个大概是启介，结果启介也是一把螺丝起子直接捅穿天际，我趣，真的痛啊。。。。啊啊啊啊啊啊。。。。 小明 陷入永远的，沉眠。这就是所谓的………「死亡」吗?只是这样吗？也许，就只是这样而已。并没想过要死。但，对生存也不抱有特别的感慨。哪怕某天早上，突然就死去，那样也无所谓。『不想死』，若如此强烈地期望的话一—那么，又要为了什么而活着?除了身体的机能停止以外，「生」与「死」之间，又有什么差别?再多的考虑也没有结果。 明公主（双手合十）~ 哎其实我刚开始也搞不明白大家为什么管他叫明公主哎，比起来说我觉得甜池的蓉感觉公主多了，毕竟蓉纤细敏感又疏离，明看上去不太一样……要命，我一旦想要分析，我觉得二者又有很多相似的地方。他们都是那种仿佛漂浮在世间一样的人，……蓉司更明显地处在迷茫中，因为他既无法融入人类社会的正常交往又不愿意服从那些东西的支配，小明则大多数线里完全没进过这个状态（） 简单来说，小明和蓉司都能“感觉”到许多东西，蓉司困在琐碎的思绪中无法迈向他人，那些琐碎的思绪形成了他与外界的隔音墙，而小明是完全不去“感受”、“思考”这些东西，和感性的柔软的东西好像有一层可悲的厚障壁……挚友的生命也只是让他稍稍多理解了一点挚友在于不在的差别、人类生与死的差别。大概是这种东西，造就了他们相似又不同的隔阂感吧。 我觉得这种0好带劲啊！呜呜呜呜呜，虽然我也很喜欢看上去软乎乎的小0，但是看上去好冷漠的不爱想的声音也1里1气的小0也好可爱啊！（？在这理发店） 启介我草起子哥你不要过来啊（害怕） 哎，怎么说呢，我好像能理解两方的心情。不过我还是觉得启介不应该去那个地方的，真的不适合他……小明一开始的生气我非常非常理解，我都自身难保了还要带一朵脆弱的娇花，娇花的正义让我甚至都不好意思动手（转头） 至于故事染了血以后，唉…… …………启介你要好好赎罪啊。…… 式故事到这里一下子字母了起来！男人，你怎么能直面如此强大的我，真是太有趣了，看我不把你腿打断了 感觉是一个超级加强版总裁戏（？） 大火炖肉很猛，很有这个作品一贯的风格……但是说实在的几个结局我都不太喜欢，啊啊啊啊啊啊，我完全代入普通人视角，式哥直接军国统治我觉得好害怕…… 以及那个感觉可能有点OOC的诱0结局，剧本娘好会写啊，瑟飞了啊啊啊啊啊（啸叫） 凛他追他逃他插翅难逃（什么） 我愿称小明为一种天使，他在努力地弥合小凛支离破碎的心。不过，就算是因为和前男友长得像，小凛对小明真的很好，在这个黑暗的地方帮了他很多的忙、保护了小明，同时也保护了小明的善良，说不感动也是假的。 说来也是缘分吗，对式的执念支撑着凛，对Nano的执念支撑着式，还真是兄弟俩啊。然而，式仿佛从一开始就是强大而不在意手段的存在了，而凛是从天真一点一点走向绝望，……（或许式也有被磨练的契机吗……） 结局很理想，但是很甜。我就是喜欢和平社会嘛qwq 源泉全游戏对男主最好的一位了，几乎没怎么折磨过男主，至少身体上…… 精神上就另说了，源泉一直被对儿子的死亡、对自己所参与的实验的真相的悲哀、后悔和恨意所囚禁着，所以在别的结局也是，只要知道了男主的真实身份就会想要除掉了事（啊啊啊说到底军方是怎么放心男主这种重要的实验资料跑到外面去的呀，一不小心就BE了） 不过在这个结局里，男主强调了他和Nano在实验中同样的被害者的身份、强调了他们的情感，软化了源泉的态度。唉，其实源泉本来也不是那么偏执的人，明明也很重感情。 （明明是个有儿子的异性恋，哼哼哼qwq） 没忍住私藏几段摘录。大叔真的很懂小明。不过小明确实是这个性格……他可能确实是这么想的，但是有些东西他不会或者不能进行什么有形的思考，喜欢而无法知晓、难以诉说，痛苦而无法自察、难以纾解…… 源泉悠然地笑着、大口地吞云吐雾。源泉 每次来到教堂、我都会觉得比起神来、人类更厉害。怎么说呢、人类比较有潜力明 潜力?源泉 啊啊。从远古开始人类就信奉着神明、也因为那强烈的信念、而完成了这样的建筑。你可以确认神的存在吗?明 ……不能源泉 对吧？不能确定也无法判断。 明知如此、还是不停地为了祂去建造会面的场所、即是教堂」源泉将香烟夹在指缝中、用手指轻敲着椅子。少许的烟灰掉了下来、当然、他对此毫不在意。源泉 所谓的执念、在某种程度上是很恐怖的 人的意念可以超越时间、唤起很多人的共鸣、现在也一样。经常可以听人说、虽然并不相信、但是很喜欢确实、虽然今天是明第一次来教堂、而且还是这么破败的地方、却觉得很放松。 源泉 我可不是要你向神明祈祷。 倾诉是人最简单的本能、却异常地重要。 所谓语言的东西、虽然肉眼看不见、但却是有着真实的形态。既可以积在胸口、也可以积在肚子里、然后变成凶器。明 凶器？源泉 嗯。语言通过声音传达、并非肉眼可见。怎会变成凶器呢。源泉 话要是留在肚子里、就可能变为凶器。若积在胸中、那又是另一个问题了明 肚子？源泉 肚子就是这里、源泉用下巴指了指明的腹部。不知是不是错觉、胃部感到一阵奇妙的异样。源泉 因为语言是有生命的。要是堆在那里就会不断地腐烂。腐烂的东西不能被身体消化、只会使你的身体变得急躁 身体的急躁又会带来心理的焦躁不安。所谓言之于身、气之于心嘛。这些都是环环相扣、息息相关的。……对吧、明源泉的眼神依然很沉稳。源泉 所谓说话、就是不需要考虑说什么、或是希望对方听到什么。只要将大脑里的东西原原本本地搬到外面来、自然便成了语言 如果一直不说、便会越来越沉重。 因为这是人类的本能。 Nano神明一般的男人（感叹）我不是很理解就是了 对男主的态度让我无端想起了O社Paradigm Paradox的大boss，一样的那种“我与你是相似的存在”的独一无二的共鸣感，正因如此我会很重视你的话语……呜呜，在这一点上两部作品的表现都挺不错的！ 别的过得有点久了写得好粗糙，寒假看的故事太多了，有点怠惰于写repo，拖着拖着果然还是慢慢在忘掉啊……不想拖到年后啊！啊啊啊啊啊 这个故事并不太复杂，小明重复多次发现真相的过程比较枯燥，去掉这些的话剩下的东西也就比较少了，所以想要说很多也不知道从哪说起，感觉更多的是大家靠剧本娘一些很有深意的文字继续往下挖掘的东西。……相比来说，甜池就是几乎单线走到底，不会有这个问题。 嗯，总之，给我的感觉没有甜池那么深刻也是确实的事情啦。也可能，是不是某种意义上，战争下人们的异化比起异化的人对我来说更遥远呢？（沉思）","tags":["N+C"],"categories":["Tavg","RoseR"]},{"title":"Slow Damage 慢性伤害","path":"/Tavg/RoseR/ff3273f7.html","content":"2023.07.16 无剧透篇 简评：颓废的血腥的艺术品 推荐：4+/5 （*慎） 标签：血腥/暴力/R Infomation: MoeLink 预警 看看标签 别的 游戏本身有很高的完成度，翼梦的汉化组更是满分~ 高超的叙事技巧 精致的音乐、美术和配音 很重的渊井味 （爱看看不看滚的感觉），比如很特别的xp（） 一些： 每一部渊井的剧本都会给我很不同的冲击感…… 与咎狗之血几乎完全崩坏的战后城市相比，新神海是个更微妙的地方，它一面现代而繁华，一面血腥而颓败。唔，可能有点接近至上之空里蛮都的氛围？对幻想作品来说，这个背景环境的设定不算很新奇啦。 トワ本身的存在就足够有冲击（而且画的很帅啊啊）。虽然我经常很难共情到他的快感来源，但是不妨碍他这个角色存在莫大的张力。这一部真可谓是把舞台的灯光全部聚焦在トワ身上了，一切剧情更像是围绕トワ与他的过去展开，而不像是强调他与谁的情感和羁绊（不是没有，只是相比）。 感觉是一本戴上有色眼镜（物理）看都会觉得愧疚的艺术品！（虽然确实感觉部分情节有剧本娘是为写爽而加笔的痕迹233） 后面剧透篇再细说吧~ 通贩盘代购中，预计日语ver二周目后此篇还会继续补充。 剧透篇 试着分点随便说说 chapter 0 &amp; chapter 1 &amp; chapter 2 配角章们 到最后发现教程vampire竟然是chapter0还能和chapter1开头的トワ接上真的觉得很有趣！是有巧思的小设计~ 而是否进入last chapter就在于是否打开那个快递盒，还是玩家一开头就有印象提到过的盒子啊啊啊。 初印象好喜欢fraise的啊啊，不过只是个昙花一现的配角（捂胸口）。嘛，不过他的角色能体现出的厚度确实比不过后面的几位。但是送花什么的很萌啊，病娇脸红什么的也挺萌的啊啊啊……只要不捅刀子的话（看这部作品很有一种我是正常人理解不了这个真是对不起的感觉……）。 以及医生线和礼线还有两位配角euphoria。 タク 巧 &amp; レイ 礼 两个在蔷薇向里说得上非常中规中矩的线路……情感可能是因为有长期的陪伴和支持作为基础，似乎在玩家可见范围内的感情发展相关的描写比较少（尤其是巧）。前者确实是显而易见的，作为在euphoria活动之后能完全托付的对象，其作为可靠的后背的感情是无可厚非的。不过，私以为还是多给玩家展示一点依赖的感情向爱情过度的细节会更平滑。 对于礼，以及其它涉及暴力-&gt;欲望的线路，其中包含的很多情节我都无法很好地共情，或者说我觉得本来这种xp就是……比较……小众的吧，不加入更多的背景信息的话一时间是很难理解这种欲望的来源的。人一般不会生来就是这个样子吧，做这种颓废艺术家也不像是为了特立独行，应该是有过往经历的影响才会这样。如果要让一个角色更立体一点势必是要补背景的。在最后一条线之前，我们都看不到トワ变成这样的原因，所以对于有的评价说是把トワ做成了表现暴力性的工具人之类的，并不是很难体会这个评价的缘由。 礼的故事在这个篇幅内其实还是稍有点局促的，礼关于性别的认知问题在个人线路很后面才提起，而这是トワ的已知信息不是玩家的已知信息。礼包含的元素很多，从礼对自我身体的厌弃（改造价值），在性别认知上的犹豫（euphoria），对男性身份寻求认同的渴望（暴力）；以及间杂着的食欲与暴力与对トワ的恋慕。相比于巧，一个传统的因为欠债而被迫做脏活的医生，要复杂得多，但是表现上并说不上足够容易理解。在玩完之后，回过头确实可以注意到这些交织的细节，但是在玩的过程中，这些细节要么是难以察觉的（性别认同），要么是看上去并无关系的（甜品、人体艺术和死斗游戏），所以过程的体验比较茫然。 嘛，话虽这么说，走到礼这个线的深度，已经暴打了很多甜品向恋爱小故事了。","tags":["N+C"],"categories":["Tavg","RoseR"]},{"title":"无法打开的黑与金之匙","path":"/Tavg/SakuraR/e8c6562f.html","content":"无剧透篇 简评：一部非常细腻的校园恋爱剧 推荐：4-/5 标签：校园/R 简介：自闭家里蹲少女某日因梦中的契机走出了家门，剪掉长长的刘海开始了普通的校园生活~ （*女主有配音w） 总评： 取材其实比较古早（x）但是很细腻、完成度也很高，一些小甜品一直被人写来写去就是因为真的好萌（嘿嘿）另外，虽然古早但是画风非常非常好看！！ 结局很多，每个线有GoldEnd GoodEnd BadEnd BlackEnd，小火炖肉也很香很自然、没有为写而写的感觉，黑化结局也是真敢写…… 完成GE之后才会解锁Gold和Black，这时需要从头来一遍，可以看到很多和男主们内心戏有关的新剧情~ *个人非常非常萌弟弟线（放心不是亲弟弟嘿嘿），喜欢弟弟系的可以冲冲看呀！（x） 剧透篇期末考期间开始打和打完的，就没写repo，放假了又猛玩新的，完全忘了这个事情了。总之就是很香，不过也特别到我觉得不玩就缺少什么（没有什么特别的格局？就是校园恋爱剧罢了x） 关于角色（按翼梦攻略中的顺序） 园村郁人啊啊啊啊好萌好萌好萌好萌哇！！（打滚）第一条就打了，差不多这个游戏的真相也全解开了？（关于打开少女心扉的哥哥什么的x）至于黑钥匙金钥匙什么的，呃，就当是个数值条就好了~ 弟弟真的一直都很照顾女主呢，给她做好吃的（kksk）让她走出自闭的小房间还想要帮姐姐找到爱情。私心里觉得是担心自己对女主的亲情变质所以快点把姐姐嫁出去好让自己定死在弟弟役上（悲）……新增的剧情里也可以看到弟弟是在自己的线里和女主多接触了才产生恋爱的火花的呢~！所以还是不会让我太心疼弟弟会不会在别的角色的线里喜欢我（） 想要弟弟不要崩坏掉还是要给弟弟足够的安全感吧。调戏弟弟但是又不喜欢弟弟，或者喜欢弟弟又不愿意接受，这种事情都是不被允许的噢！虽然半夜来说悄悄话有点那个，但是作为R18游戏的话好像也不算很离谱……（啊这种事也就郁人做起来比较自然吧！如果是因为亲情所以担心，然后来说悄悄话的角色变成父母之类的好像就毫无萌感了，呜呜） 最喜欢的也就弟弟线啦~后面都没有给我这么大的触动qwq反而我倒是一直在别人线里看着可爱的弟弟~~嘿嘿！会打开门把我从莲井小黑屋里救出来的弟弟，会因为须藤打了我然后超级生气帮我去找场子的弟弟，会帮我试探欺负我心情的绀野的弟弟~~什么别的角色！根本不喜欢！只不过是让我更加喜欢弟弟的铺垫罢了！弟弟~弟弟~！弟弟~~！！！！！！ 莲井智臣我趣！你PUA我！（。）大概是不太喜欢的类型所以萌不起来吧…… 有个特别相近的角色，倒是，灰姑娘玻璃鞋的纶灯，把女主角当作美丽的玻璃标本一样处理（）美丽的少女作为一种美丽的物品……多少有点……恐怖……（。） 只为你一人而开的理发店。房间里无数的与你长得一模一样的模型。……女主角闯进去的时候的感受，恐怕和玻璃鞋的女主角推开门看到全都变成玻璃的人类的感受差不多吧。甚至不需要对你隐瞒，你知道也无所谓，因为你是我的东西（。）或者说其实希望你知道，因为这才是真实的我——心里多少有那么一点孤独寂寞渴望被看到被理解的心情吧。 但是我是真接受不了啊（……） 就算是Good和Gold也无法绕开的，让男主渐渐意识到女主爱着这样的他无论如何也不会离开他的痛苦的过程。好可怕啊…… 须藤透央恐怕是一种泰迪转世（。）同样的深深的自卑敏感寂寞，但是表现和上面那位完全不同。上面那位从控制中获取安全感，这位则是从……，不过这都是占有的形式也没错啦。 还有一个区别，就是上面那位是已经有很高的专业水平、算得上功成名就而隐退中的艺术家，这个还只是个孩子，甚至正在因为家里的经济问题而面临不得不和小女朋友分离、回老家上学。他说，上学什么的都无所谓了，你也不要在意那些了，只要和我在一起就好了。 两位恋爱的样子完全就是一种激进的年轻情侣，整天黏黏糊糊耽误学业，如果女主说不想耽误学业那就会影响感情……啊啊，好可怕……你还是让我读完书吧……虽然乙女游戏里可能是有完美的爱吧，但是放现实里这位根本是在逼迫女主放弃人生所有的可能性选择与他的恋情啊，这是我无论如何也无法接受的（我是无法对谁产生绝对的安全感的类型……）而且还没法沟通，甚至使用暴力…… 对女主那边，为了透央，自说自话地去当陪酒女，我感觉很麻，也不想评价。……反正我要是透央我肯定气坏了，就算是普通的学生情侣对这种事也……透央正处于家庭危机，一想到自己逊到要女朋友去做这种事肯定爆炸（虽然我觉得你不应该对着女朋友爆炸，应该好好反省自己），女主没考虑到这个问题让我也觉得有点无奈。 要我说还是先好好读书吧（。）而且！回个老家分离一段时间就那么恐怖吗！！！！你们不是可以发短信的吗，啊啊啊啊啊这世界上甚至有网恋的啊！要是再忍个几年社交网络都发明出来了！…… 绀野千纮看上去很温柔。为了满足恋人不顾一切。但是这种不顾一切是恐怖的，因为他仿佛把自己定位成为了满足对方需求的存在一般……即使他并不愿意去理解对方真正的需求。 我很难理解这种不需要不愿意去理解对方的爱。……他感受不到对方的困扰和痛苦吗？ Black更是离谱（。） 怎么说呢，我觉得师生恋被忌惮完全是有道理的，因为通常来说师生之间存在着一些年龄地位学识之类的东西的差距，这些差距很容易让青春期的下位者感觉到模糊的憧憬、甚至喜欢的感情，这种感情有多稳固多容易褪色先不说（要说青春期的很多感情不都也是风一吹就会散掉的东西吗，即使曾经有过热烈的时间），……上位者想要利用这种东西太过于容易了……虽然状况不太一样，但是会让我想起来房思琪的初恋乐园。 更何况绀野本来就是被前女友已经认证过的地雷男（……） 女主角其实刚开始的时候我感觉到了高度的共鸣，作者应该是真有过类似的自闭阶段吧。我还挺相信文字的。……就是那种，不想见到任何人，不想和任何人交谈，对任何的人际交往感觉到沉重和困扰，有高度的自我意识和某种程度上的自卑、对他人的目光感觉到敏感和恐惧，之类的感觉……啊啊啊，完全能共情到，那一刻我就想，啊这游戏我开对了，期末考试周就该玩这个！（？） 呃，但是后面就没这么共情了，因为她也走出去得太快了吧（）……我趣，你是怎么能做到一星期就变成正常人，太离谱了……甚至，不擅长不喜欢人际交往的你还能举起手主动要求要参与一个跨校大活动的组织，救命啊，我单是想想都觉得毛骨悚然啊…… 可能女主在自闭前和我就不是一类人吧，所以恢复得也不太一样……我现在还在半社恐阶段呢，在奶茶店做不到和柜员点单只愿意看微信的那种类型……啊啊啊……而且女主她是真好看啊！稍微打理一下走到街上就会被搭讪的类型，我就真的非常普通啦（悲） 说多了x 后面进个人线以后的女主我都比较无感，比较典型的日系乙女游戏女主角的类型了，有点软弱但是爱得很坚定，蛮普通的（。）有些男主的所作所为匹配上女主的爱，时常让我觉得：你喜欢他哪啊！！！ 把女主角写的没特色也有这个问题，容易让我同时对男主也产生困惑：除了她好看，你还喜欢她哪啊！！！ 不要都用なんとなく糊弄啊！ 要说是弟弟役还能解释，男主们中的很多和女主认识得不久、甚至连交集都没多少呢。 ……还有女主之前到底经历了什么啊能不能解释一下呀……别的完成度都很高，我觉得这个理应说一说的…… 别的也就这些吧（）现在想来也是比较普通的一个游戏，只能说是在剧情范围内做到了很流畅很细腻很完善啦，毕竟这么普通的背景真的相当考研作者的编排和描写，不然会让人觉得很无聊。有一些游戏会依靠复杂繁琐的元素和设定制造剧情矛盾，让故事发展能够被比较轻松地掌握，而这样的游戏就只能纯靠作者对人心的精妙把握。（鼓掌！）足以看出剧本的功力相当到位&gt;w&lt;","categories":["Tavg","SakuraR"]},{"title":"沧海天记","path":"/Tavg/Flos/dafa11a.html","content":"无剧透篇推荐：3/5简评：少年的羁绊与神明的羁绊篇幅：不会继续玩了。两条线约12h Caution： 描写男性之间的友谊和羁绊的意思就是真的是友谊和羁绊，不是指女性向分类下属的蔷薇向（。）一点擦边都没有的那种（啊啊啊啊我没法理解一个没有恋爱线的游戏有好感度机制！！） 决战描写非常的有很多乙女向文字游戏的风格，特点就是非常的回合制，非常的二，非常多的谜之静止帧 单一主线，根据好感度不同会进入和不同伙伴共同战斗的分支结局，总体上差别不大。不过这条主线写得非常有趣，让玩家甚至无法猜测到下一步会发生什么。 打完感觉人已经没有感觉了，这到底是怎么回事呢，原来有人打之前根本就没有注意什么叫做真正的女性向——原来就是真正的一点恋爱都没有的意思啊！博主打着打着都要掉小珍珠了…… 剧透篇我真的是忍不了！拜托！你那决战写的是什么东西！？如果有人倒下了，邪神就在旁边看着所谓正派几个人磨磨唧唧一会然后几个人若无其事地继续回合制……邪神完全不够邪好吧，直接挨个击破不行吗，几个小孩就在你的家里乱窜你怎么可能不知道…… 还有你那几个情感丰富的神，太好了，除了邪神，太阳神一家三口我是几乎一点神性都感受不到，这波，这波是人类直接被太阳神一家三口的优柔寡断拖死了……傻白甜月读和他的傻白甜哥哥天照，被邪神忽悠的一愣一愣的就好像没有大脑，哦对你们神是不是确实没有大脑，不好意思啊。 考虑到神话背景，就不吐槽把神的力量远远写在凡人之上了。主要是这就会有一个问题，我一直很在意这种问题，尤其在花女王里面特别生气地写过，你这样战斗平衡很容易就做得稀巴烂，因为强度完全就是剧本娘一支笔……为了让几个十几岁的凡人小孩能够参与神明的战斗，特意给他们每个人分配了一个没有脸的神作为庇护，……事实上也确实是做得稀巴烂就是了。 还有让人火大的ナギサ，摘了尸鬼耳朵做实验。不行真的会有点恶心到我，我当时对着尸鬼割自己耳朵的战斗画面咳咳咳狂吐，……ナギサ看起来蛮正常的一个小孩，怎么玩这么大…… 以及茶褐色外套的哥们的谜之立场。救命，你怎么能做得到一会儿好人一会儿又能超狠心做坏人，刚刚还是要干死主角的样子，一会儿又觉得可以可以大家一起去干掉邪神吧。我能理解剧本娘的意思是间谍哥顾及到家族的安危，可是这写的变化也太过于莫名其妙，让我感觉这哥们完全没有自己的决心，……说起来，哥们你和小鬼还不是一代人呢，我看小鬼们就是看弟弟的感觉，可这哥们年纪比我还大啊（x），感觉完全就是捉摸不定又不太懂事的状态…… 不过嘉隆老师是真的顶。（双手合十）愿主能够原谅你们的罪孽。","categories":["Tavg","Flos"]},{"title":"逢魔が刻 ～かくりよの縁～","path":"/Tavg/Sakura/2655f8cd.html","content":"无剧透篇 简评：[误]入幽世的少女冒险记 标签：和风奇幻 推荐：3-/5 篇幅：中篇（25h） Points 5*个人线（真相线为==常磐线==，但不锁线） 攻略难度低，可以调整数值跳转 糖分不是很高，有部分场景戳到的话会觉得很甜（我就有好几个&gt;w&lt;），但是总体上感情发展方面的描写只能说是一般（其实我觉得明明可以写得很好！！很生气，好牌乱打） 关于日系神话的设定引入比较多，这些相关的文本也比较难…（但是我都嘎嘎跳，甚至连游戏内词典都没翻x（它怎么不能一键调用啊？）好像也没影响整体理解） 真相不是很复杂，故事也简单，如果按おすすめ顺序玩下来会觉得信息量比较低 所以总的来说就是不是很甜，故事能圆上但是不算很刺激，也没什么激动人心的波折，但是要说很不好的地方也说不出来，就是普普通通吧 画的真的是好看啊！！！！！！！！ （如果你不在意剧透一些可能小雷的地方，可以去看一看剧透篇的1，剧透程度大概截止到按顺序攻略的一半位置（虽然是这么说，不过前一半根本就没有什么主线信息量就是了2333） 剧透篇1. 说在前面的一些（关于女主的一些）（无关）玩了二十个小时我都还不知道水绪怎么念（）我还是喜欢男主喊喊名字的qwq，不过声优们在不读名字的地方很多也做了小发挥，喜欢（现在知道了，念ミオ，音同澪，好好听啊~） 女主是神籬（ヒモロギ），查了一下百度感觉不是游戏里的意思，根据游戏里的意思，是类似神明的供品一样的存在。神籬被设定拥有与一切有灵之物有很高的亲和力，容易被万物所爱；生来的意义就是为了“神のものになる”，字面意义上的：成为神的所有物，能够非常非常大的程度上提升神明的力量。所有的意思呢是指：要么是被神明连灵魂都吃掉，要么是永远寸步不离地陪伴在神明的身边，……即使是不用痛苦地死掉，这个陪伴也没有那么轻松，是需要一个仪式的，如果神明不够强大的话神籬就会失去一切感知、失去“自我”。 女主掉进幽世然后被狐神培养的过程，就是不断作为神籬觉醒的过程，在觉醒之后她的气息会完全被神们知道（和风神话设定下有非常多的神），按游戏里的说法，会被当做肉一样去争抢，女主的意识根本不重要……（。） 怎么说，不是说这个背景不行，但是这种设定好人神供奉一样的背景然后玩家站在一个被供奉的贡物的视角就很不爽，你这也不是个抖M游戏（参见怀有特殊的血液的小仓唯in大菠萝），就是个平凡的少女童话啊，……女主怎么跟“牺牲玉帛,弗敢加也”里的牺牲（。）在神眼里是一个待遇啊！！ 而且，虽然奥，作为供品的女主不是什么力量都没有，说了有亲和力，然后也会有一些预知力，她的祈祷也会有愿力，（其实我觉得贡物有特殊力量的设定就有点怪怪的2333），但是这些都不是能打的力量而已，而且也不受控，基本看剧本娘心情出现，整篇游戏的立场就是被保护被保护被保护……与此同时，水绪是经典的温柔善良又有责任感类型的日乙女主，不免有些时候就看起来有点来火了……&amp;……是不是圣母我不好说吧，总之没有体现出不圣母的地方…… 2. 各角色线路吐槽a. 奏太 怎么说呢，阳光开朗积极向上超受欢迎的二次元美少年虽然不算我xp但是也是可以的！但是写得……啊啊啊啊有点绷不住 最早打得一条线了现在有点模糊，记得最清楚的就是女主和奏太第二次遇到死魔事件，也就是大静谧（博主你什么取名方法），然后两个人一路逃到[病葉床]（玩完了我都不知道这个词是什么意思2333）的一个阴暗的摆了一张沙发的灰扑扑房间开始对线。奏太挺人类的挺正常的，他的能力能救女主本来就挺了不起了，能保护好女主就很值得开心了，女主“不行，我们得出去救大家”大概就是这种很无聊的对话进行了非常久…… 考虑到女主和奏太是镇守学舍的学生，打比方的话可以说是现世的警校生之类的存在，对他人有保护的责任之类的想法的产生也没什么值得质疑的，但是，也不是说女主很圣母或者是我的话我就不劝他救人，怎么说呢……我觉得很无谋啊……而且，女主她也不能打架啊！！！虽然反复强调女主是有“能力”的，但是基本上也就是什么“看穿弱点”啊“祈祷”啊之类的辅助能力，在这节点他们已经直面过死魔了，女主对自己的战斗力应该完全有数…… 所以女主干的事情其实是：啊？你害怕死掉？你觉得做不到？そんなじゃだめよ…为了保护大家！頑張らなきゃ！！！……对于我的核心雷点是，女主她自己打不了，奏太不是很想打，但是女主正在几乎是逼迫地希望奏太去打一场赢的概率几乎为0的仗…… 总之这段超级长，打得我直接下头了，之后半个月都没碰游戏机……SOS b. 宵宫呜呜、せんせい我的せんせい——刀的名字是五月雨也好好听呀！！同样是不太戳我xp的优雅成男，快速掠过（？）这里我也简略吧。剧情矛盾也很简单，都在皓身上，皓是女主的愿望所形成的神在月白线里月白的调侃里提到一句以外再也没有照应过2333，女主作为召唤师存在的可能性也完全是看剧本娘的心情嘛（）（皓这么强哎。女主多来几次可以组一个军队吧……（？）） 比较难受的是月白拜托女主回现世神社的剧情，确实那里并不安全，女主犹豫是合理的，可是宵宫去了就会死掉的设定也是真的、是宵宫自己也知道的，女主说个两句宵宫就很主动地说要去要去就很奇怪，你要是真的喜欢她应该是想长久地守护她而不是瞒着她保护她一次、然后让她的余生一直背负着负罪感，而且能去的也不是非宵宫不可，想不到让五月雨去也总有别的办法啊……宵宫这么想为了女主自我牺牲是我想不明白的……还是说就是为了多凑一个分支结局啊…… c. 颯 在这个游戏我的初恋啊！！！女主逢魔之刻跑进幽世的时候，刚刚摆脱危机来到平静的地方，看到的就是颯在无人的花海里安静地坐着。颯多好看啊，不只是立绘里，剧本娘也不止一次的描写这个木魂、地主神的美丽的外貌了嘿嘿x 而且是细谷！！！众所周知（也没有）我的命中注定的老公我早已遇见，就是终远的顶流烫男人西恩·布洛菲瓦兹=w=就是细谷桑配的~啊，但是这也导致了一个问题，我对细谷的声音的印象直接定格了，就是那种，嗯嗯，总是觉得这个声音对应的就是那种学识渊博的、成熟稳重还有点屑的成男……同样的问题也影响到我玩黑蝶的体验了（）但是黑蝶还好，至少对方也是个看起来成熟靠谱的少年。可是，ハヤテ给人的感觉就完全不一样……不一样的地方正是我超中意他的地方qwq 这次是一个一直以来对于幽世颇有“漂浮感”的天生神明~只有花花草草大自然能够听见他的声音，他和幽世的妖魔鬼怪神明没法交流，也没有很强的共情，对镇守学舍的工作没有什么激情也没有什么归属感（不如说他为什么会去那里这点就很奇怪……）但是水绪给了他传达声音的机会，让他对镇守学舍的大家、尤其水绪产生了羁绊和情感……还挺美好的呀，哈哈哈（） 颯是个很天然的带着孩子气的神，对女主有非常天然的保护欲占有欲，非常可爱（）开头我就被他在女主宿舍门口等女主一起去上学结果发现女主已经去了然后在那里沮丧萌到了&gt;w&lt;一起编花环也很温柔很美好，和花说话也超级喜欢。 有七个章节不只是因为涉及主线多，还有因为颯自损修为（？）劈了自己本源的大树把女主送回现实然后两个人互相痛苦思念数日女主又自己跑回来，颯惊讶但是又不是很生气因为他发现没有水绪的自己真的太痛苦了，两个人贴贴了一阵就开始准备仪式，中间写了一大堆伙伴们帮忙准备东西的剧情（）。好吧，我是真的觉得女主这一个来回有点莫名其妙的，试错成本也太高了吧，……完全是没有必要的事情……而且颯也完全不跟女主商量就做决定，嗨呀）…… 对了下雨那段！我超级喜欢啊啊啊啊 TvT 有种孩子长大了的欣慰感（） （而且，暗示了半天，柏木前辈到底和颯是什么联系啊2333 写明白一点嘛） d. 月白 太好了我觉得这条线写的烂爆了！（侧目）不如说我真的很讨厌这个人设出现在攻略对象里！女主完全一副被强者设计和引诱的样子啊……（声优的语气也屑得很贴脸很符合角色2333） (1) 关于喜欢 女主：（我好像喜欢月白桑呢，明明并不是很了解，喜欢的是什么呢）女主：（是的，作为神的他也好，作为“月白”的他也好，我喜欢他的全部）月白：你喜欢我啊。我也喜欢你哦。（不过是作为神籬的那种啦，你能成为我的东西吗） 所以月白在不是神的时候是什么样子啊？连一段插叙都吝啬吗（）剧情里根本没法认识到月白不像个神的样子啊…… (2) 关于开心 女主：和月白待在一起很开心！（因为喜欢月白桑所以只要看见就会觉得开心）月白：和水绪待在一起很开心！（看神籬少女为了她的单纯到愚蠢的愿望努力、难过，觉得非常有趣） (3) 关于愿望 女主：我希望大家能一起平安幸福地生活下去，希望你解决幽世的困境月白：好啊，那么我们就干脆斩草除根，把可能变坏的存在都清剿干净吧月白：你看啊，他们都是因为你的愿望死掉的哦，我做得是不是很棒？女主：……月白：你哭什么呀，为什么不会觉得开心呢？（一边欣赏女主的悲伤的表情觉得有趣）月白：与其放置他们不管，不如完全从根源上杜绝他们犯罪的可能性嘛？ 可恶，我一点都不觉得这种屑很戳我，我觉得……恶心。神啊，那可是你的子民啊。。。你觉得那里治安差有人嗑药会出坏人，那你自己不管怎么也不让镇守学舍管呢…… 多说一句，我觉得你们幽世还是应该要有幽世法的，你们的神实在太乱来了……而且说着想要稳定的幽世所以建立了镇守学舍管理，可是管理到什么程度也不设定，全看学生和老师的良心……这怎么运行得下去啊（） (4) 关于喜欢_2 女主：我喜欢你，即使成为你的神籬也心甘情愿那种月白：（掏出一个不能说谎的幻境，让幻境里每一个女主熟悉的人都出来动摇一下女主的喜欢的想法，用以考验女主） 这里是我最无语的地方，也是BE分叉。如果女主但凡有一点动摇，或者之前好感没刷好，就会被月白直接在仪式里送走，变成没有自我意识的神籬……如果女主一路坚定地重复爱语，月白就会在让她成为有自我意识的神籬然后娶她。……好吧，反正都是变成你的东西啦。可恶，我下意识地很讨厌一些“无法退路的情境”。 总的来说，就是这个人神恋真的写的很不舒服，男主一直是以神看供品的视角玩弄女主的心情并为此感到快乐，嘴上说着喜欢到底是什么样的喜欢，总之我觉得是无法和女主的情感同等比较的喜欢，就算他的BestEnd是全游戏唯一一个上车的也一样，我只能共情到女主的恼怒和无力，并没有ドキドキ。剧本娘的狐神很有神的对于人的疏离感、上位感，唯独缺乏恋爱感。 e. 常盤 剧本娘你要不要看看自己在男女主终于能互诉衷肠之前都写的是啥？？？啊？？？有些片段你写的是ok，但是基本的に完全是莫名其妙…… 一见钟情我完全可以接受，好吧，男主不是很爱说话天天对她摆脸色说重话女主每次都“なんとなく”地过去没话找话，也行吧，忍忍，毕竟明里暗里还是说男主挺关心女主的，和神無一起买衣服走失被男主捡回来挨训那次男主误会女主不高兴了拼命解释也挺可爱的，milkHall的甜点和戏份超甜我也喜欢（虽然我真的能感觉到女主在每次对话里的尴尬的感觉……），但是但是，啊啊啊啊我最不能忍的是，那个重要的告白写的是啥啊？？？ 女主：*表白男主：你是不是误会了什么，我不喜欢你。女主：就算这样我也喜欢你，想要帮助你实现目的。男主：\\强吻（我草，甚至是深吻，女主都傻了）女主：？？？どうして男主：你想要的就是这种东西对吧！反正我不喜欢你。速速滚吧！女主：？？？\\泪如雨下*（女主走了以后）男主：我怎么能这样呢！ 我理解剧本娘觉得男主冲动又傲娇的样子有萌点，但是这个冲突是否有点过于强行了……我好无语，我真的好无语，为什么把男主写的像个冲动傻逼，啊？？？我觉得剧本娘的意思是，常盘一直喜欢水绪一直为她默默地付出没想过要被喜欢，也不希望她的恋心影响到自己保护她的大业，所以惊讶不相信觉得是误会、所以拒绝；发现女主真的喜欢他，又非常感动，因为自己其实非常喜欢现在的她，所以激动地强吻（？）；吻完发现自己打乱了自己的规划，对自己做的事情也非常惊慌失措，所以也惊慌失措地说出伤人的话来赶走女主。 草，我简直就是剧本娘的知心妹妹，把它解释通了，可是你看这个剧情从玩家和女主视角来看是个啥啊！！是个啥啊！！！？？？而且最重要的是，男主一直以来不都是在坚持着他保护女主这件事情作为他生存的意义吗，更何况他对现在的女主也是隐约存在恋心的呀，怎么能做得到这么伤害女主的事情，拜托这不是不懂女孩子的问题，是他吗根本就没有照顾女主心情的主观想法……别的剧情有的时候男主确实说话难听不爱想，可是他关心的意思都完全传达给女主了呀，那这里传达了的是什么啊？？？常盘，被剧本娘绑架了你就眨眨眼（） 好啦，跳过这一段我还是非常喜欢常盘的，谁会讨厌喜欢甜食、说到甜食会kirakira的容易脸红的纯情少年啊~虽然冲动傲娇说话难听不爱想，但是其实有非常温柔的心啊~（麻烦给我来一份常盘Special~~） 以及，怎么说呢，我觉得常盘的想法很真实，比如说：既然花了半个魂魄才保护了你，也想一直保护下去；既然至今为止的人生都在保护你，那么我也不会后悔，不会否定我的努力；之前这份感情说不上是喜欢，（或者说只是一种执念，）但是现在的我真的很喜欢现在的你，看到你现在好好的我好开心。 确实，我想了一下我如果第一次做了这个选择，可能也会后面一直这么做（特别喜欢的对象的话），如果后悔了就什么都没有了，有种像玩游戏一直氪金氪了很多后来弃坑也不愿意卖掉，因为一旦卖掉好像那些充进去的钱、看起来“亏损”的钱就变成实际的东西了……（好像也不是很恰当2333）玩游戏氪金也不会说后悔氪金，不管怎么样都会哄自己说：因为喜欢才氪的，因为开心，不会后悔的。 但是这样的感情……也太沉重了吧。即使水绪喜欢上了常盘，水绪的喜欢也无法回应这份感情，就算水绪不提，她心里也一定抱有很重的亏欠的感觉，这样的恋情……嗯……或者说，这种事情只要是知道了，总会抱有亏欠和罪恶的感觉，无论对方怎么想的都会觉得很难受吧…… （Soma配得也太好了，啊啊啊啊啊啊啊啊啊啊啊）（虽然一开始觉得他配脸这么成熟的角色有点怪，但是啊啊啊啊啊啊啊啊啊啊太会配了） 3. 总评发现我个人线写的全是槽点（草），但是其实玩的过程也没有那么生气，只是说它让我生气的地方让我印象很深刻……而且也有很多甜的地方）（x）但是也不够突出，不是那种再过好几个月我都能记得好多的故事和人设。…… 不过画的是真的好好看啊……！！！！ 嗯……情绪发泄完了居然有5k字了，我好累啊……就写到这里吧……","categories":["Tavg","Sakura"]},{"title":"汇编语言 全家桶","path":"/Coding/5b511fc.html","content":"VScode配置调试环境 安装插件TASM/MASM 右键扩展设置 右键调试即可开始调试了！ debug.exe使用https://blog.csdn.net/weixin_38633659/article/details/125166093 Debug是DOS、Windows都提供的实模式(8086方式)程序的调试工具。使用它，可以查看CPU各种寄存器中的内容、内存的情况和在机器码级跟踪程序的运行。 1. Debug的常用功能 ==R命令：查看、改变CPU寄存器的内容； ====D命令：查看内存中的内容； ==E命令：改写内存中的内容：U命令：将内存中的机器指令翻译成汇编指令：==T命令：执行一条机器指令； ==A命令：以汇编指令的格式在内存中写入一条机器指令。Q命令：退出debugP命令：类似于step over（“t”命令类似于step into），可用于跳过loop循环==G命令：跳过前面的代码，运行到指定的代码位置== 2. -R命令输入r：查看所有寄存器的值输入r 寄存器名称：修改寄存器的值输入r ax：将ax寄存器的值改为0100H 3. -D命令输入d：可以查看内存中的内容输入d 段地址:偏移地址：查看特定位置的内存数据输入d 段地址:起始偏移地址 结尾偏移地址：查看特定位置和特定范围的内存数据输入d 偏移地址、 d 起始偏移地址 结尾偏移地址：会将DS的内容作为段地址 右边是每个内存单元中的数据对应的可显示的ASCII码字符，如果没有对应的ASCII字符，就显示“.”。 4. -E命令1、输入e 段地址:偏移地址 数据串修改特定位置的内存数据：2、输入e 段地址:偏移地址后按Enter也可以修改特定位置的内存数据，数据之间用空格隔开： 5. -U命令输入u、u 段地址:偏移地址可以将内存中的内容翻译为对应的汇编指令：由3部分组成 1、最左边一列：是指令的地址段地址:偏移地址2、中间那一列：是指令对应的机器指令3、最右边一列：是汇编指令 6. -A命令输入a、a 段地址:偏移地址在这里插入代码片可以从某位置开始写入汇编指令： 7. -T 执行机器指令 8. -G 从指定地址开始直到断点或正常结束 寄存器本篇文章转载自 https://www.cnblogs.com/BoyXiao/archive/2010/11/20/1882716.html结合文章做了一些小修改，使文章更完整。 1 总线只是想了解寄存器知识的话，只要看这一段就好：CPU与内存之间的通信采用总线的方式，其中总线又分为三种：数据总线（用来传输数据）、地址总线（确定将数据传输到什么地方）、控制总线（确定哪个设备需要传输数据） 计算机五大组成部分是：控制器、运算器、存储器、输入设备和输出设备。CPU所代表的控制器和运算器需要和存储器（主内存），以及输入设备和输出设备进行通信。通信采用的方式就是总线。 总线，其实就是一条线路。CPU、内存、以及输入和输出设备，都是通过这组线路进行相互间通信的。总线的英文叫做Bus，就是一辆公交车。这个名字很好地描述了总线的含义。我们的公交车的各个站点，就是各个接入设备（键盘、鼠标、显示器、硬盘、乃至通过USB接口连接的外部设备）。想要向一个设备传输数据，我们只要把数据放在公交车，在对应的车站将数据放下就好。 现代 Intel CPU 的体系结构里面，通常有好几条总线。 首先，CPU 和内存以及 CPU 和高速缓存之间采用不同的总线进行通信。这种方式，我们称之为双独立总线（Dual Independent Bus,DIB)。CPU 内部，有一个快速的本地总线（Local Bus)，也称之为后端总线（Back-side Bus),是 CPU 用来 和 CPU 内部的高速缓存之间进行通信，另一个速度较慢的前端总线（Front-side Bus)，也称之为处理器总线（Processor Bus)或内存总线（Memory Bus), 是 CPU 用来和主内存以及输入输出设备进行通信。 从 CPU 硬件架构图可以看出，CPU 里面的北桥芯片，把之前说的前端总线，一分为二，变成了三个总线。前端总线其实就是系统总线。CPU 里面的内存接口，直接和系统总线通信，然后系统总线再接入一个 I/O 桥接器（I/O Bridge)。这个 I/O 桥接器，一边接入了我们的内存总线，使得我们的 CPU 和内存通信； 另一边又接入了一个 I/O 总线，用来连接 I/O 设备。 事实上，真实的计算机里，前端总线层面拆分得更细，根据不同的设备，还会分成独立的 PCI 总线、ISA 总线等等。在物理层面，其实完全可以把总线看作一组”电线“。不过呢，这些电线之间也是有分工的，我们通常有三类线路。 数据线（Data Bus），用来传输实际的数据,也就是公交车上实际坐的”人“。 地址线（Address Bus),用来确定到底把数据传输到哪里去，是内存的某个位置，还是某一个 I/O 设备。也即”人“要下车的站点。 控制线（Control Bus),用来控制对于总线的访问。虽然我们把总线比喻成了一辆公交车。那么有人想要做公交车的时候，需要告诉公交车司机，这就是我们的控制信号。 2 CPU 发展史Intel CPU 系列，最初是 4 位微处理器 4004，然后到到 8 位微处理器的 8008 ，再到 8 位微处理器 8080,以及稍后的 16 位微处理器 8086，由 8086 开始，Intel 进入现在所谓的 x86 时代 。Intel 8086 为 16 位 CPU ，而因为在 8086 之前的 CPU 都是 8 位 CPU，这样也就造成了很多的外设也只支持 8 位，因此 Intel 紧接着就退出了 8 位的 8088 CPU，因此 Intel 8088 也就可以看做是 8086 的 8 位版本；如果是但从汇编语言的角度上来说，8086 和 8088 是没有区别的，即 8086 上跑的程序可以不加修改的移植到 8088 ，8088 上跑的程序也可以不加修改的移植到 8086 上，当然，还是有些特殊的地方是不同的，而这些基本上在这里可以忽略掉， 在 8088 CPU 之后，Intel 又推出了 80186 ，80286 ，这两款 CPU 均是 16 位 CPU ，而对于 80186 来说，其与 8086 的区别可以简单的看做是 80186 多了几条指令而已，而 80286 则不同，80286 的地址总线数目有了变化，在 8086 , 8088 , 80186 上，CPU 的地址总线都是 20 根，即可最大寻址 2^20 即达到 1MB 的寻址能力，而对于 80286 CPU 来说，其地址总线数目达到了 24 根，从而最大寻址能力为 2^24 即 16MB，由于支持更多的物理内存寻址，因此 80286 便开始成为了多任务，多用户系统的核心。 而后来，Intel 又推出了 80386 ，80386 为 32 位微处理器，Intel 80x86 家族的 32 位微处理器始于 80386；同时 80386 也完全兼容先前的 8086/8088，80186，80286，并且 80386 全面支持 32 位数据类型和 32 位操作，并且 80386 的数据总线根数和地址总线根数均达到了 32 根，从而可以最大物理寻址为 2^32 即 4GB 。 而之后的 80486 也是 32 位微处理器，而后又出来了 Pentium 和 Pentium Pro 等等第五代微处理器，这些处理器虽然也是 32 位微处理器，但是他们的数据总线和地址总线都有所扩展，比如 Pentium 的数据总线达到 64 位，而 Pentium Pro 的地址总线位数达到了 36 位 。 3 寄存器寄存器是什么呢？其实很简单，寄存器就是个存储信息的单元或者说是器件又或者说是容器而已，就比如内存也是一个存储介质或者说是存储单元而已，其实寄存器从理解上来说和内存差不多， 只不过寄存器（这里讨论的寄存器都是 CPU 中的寄存器，不包括外设上的寄存器）位于 CPU 内部，而内存位于 CPU 外部， 而且，寄存器比内存可是珍贵得多啊，就拿内存和硬盘来比，肯定是内存在使用上珍贵得多，是 PC 中的稀有资源，而寄存器是 CPU 中的稀有资源，内存和寄存器相比就像硬盘和内存相比一样。而对于一个汇编程序员来说，CPU 中主要可以使用的也就是寄存器而已，汇编程序员可以使用指令来读写 CPU 中的寄存器， 从而可以实现对于 CPU 的控制，当然，不同的 CPU ，寄存器的个数和结构都是不一样的， 8086 CPU 中寄存器总共为 14 个，且均为 16 位 。即 AX，BX，CX，DX，SP，BP，SI，DI，IP，FLAG，CS，DS，SS，ES 共 14 个。 而这==14 个寄存器按照一定方式又分为了通用寄存器，控制寄存器和段寄存器。==1 通用寄存器 AX，BX，CX，DX 称作为数据寄存器 AX (Accumulator)：累加寄存器，也称之为累加器； BX (Base)：基地址寄存器； CX (Count)：计数器寄存器； DX (Data)：数据寄存器； SP 和 BP 又称作为指针寄存器 SP (Stack Pointer)：堆栈指针寄存器； BP (Base Pointer)：基指针寄存器； SI 和 DI 又称作为变址寄存器 SI (Source Index)：源变址寄存器； DI (Destination Index)：目的变址寄存器； 2 控制寄存器 IP (Instruction Pointer)：指令指针寄存器； FLAG：标志寄存器； 3 段寄存器 CS (Code Segment)：代码段寄存器； DS (Data Segment)：数据段寄存器； SS (Stack Segment)：堆栈段寄存器； ES (Extra Segment)：附加段寄存器； 通用寄存器从上面可以知道，在 8086 CPU 中，通用寄存器有 8 个，分别是 AX，BX，CX，DX，SP，BP，SI，DI ， 至于为什么给它们取名做通用寄存器，那是因为，这些个寄存器多种用途， 比如 CX 作为计数寄存器，则是在使用 LOOP 指令循环时用来指定循环次数的寄存器， 如果它们每一个都只有一个专用的作用，那就它们只能称之为专用寄存器了， 正是因为这些个寄存器还可以用来传送数据和暂存数据，所以才称它们为通用寄存器 。 下面就按顺序来一一介绍这几个通用寄存器了： 数据寄存器（AX，BX，CX，DX）： 数据寄存器有 AX，BX，CX，DX 四个组成， 由于在 8086 之前的 CPU 为 8 位 CPU，所以为了兼容以前的 8 位程序， 在 8086 CPU 中，每一个数据寄存器都可以当做两个单独的寄存器来使用， 由此，每一个 16 位寄存器就可以当做 2 个独立的 8 位寄存器来使用了 。 AX 寄存器可以分为两个独立的 8 位的 AH 和 AL 寄存器； BX 寄存器可以分为两个独立的 8 位的 BH 和 BL 寄存器； CX 寄存器可以分为两个独立的 8 位的 CH 和 CL 寄存器； DX 寄存器可以分为两个独立的 8 位的 DH 和 DL 寄存器； 除了上面 4 个数据寄存器以外，其他寄存器均不可以分为两个独立的 8 位寄存器 ； 注意在上面标志中的“独立”二字，这两个字表明 AH 和 AL 作为 8 位寄存器使用时， 可以看做它们是互不相关的，也就是看做两个完全没有联系的寄存器 X 和 Y 即可， 比如指令 MOV AH , 12H ，CPU 在执行时根本就不会知道 AL 中是什么鬼东西，因为它只认识 AH 。 下面给出一幅 16 位数据寄存器的结构图： 表示 16 位 寄存器 AX 可以表示成两个 8 位寄存器， 其中 AH 表示高位的 8 位寄存器，AL 表示低位的 8 位寄存器 。 AX 寄存器如上所说，AX 的另外一个名字叫做累加寄存器或者简称为累加器，其可以分为 2 个独立的 8 位寄存器 AH 和 AL AX 寄存器具有的特殊用途是在使用 DIV 和 MUL 指令时使用， DIVDIV 在 8086 CPU 中是除法指令，而在使用除法的时候有两种情况，即除数可以是 8 位或者是 16 位的，而且除数可以存放在寄存器中或者是内存单元中，而至于被除数的话，自然，应该由 AX 来代替了，当除数是 8 位时，被除数一定会是 16 位的，并且默认是放在 AX 寄存器中，而当除数是 16 位时，被除数一定是 32 位的，因为 AX 是 16 位寄存器，自然，放不下 32 位的被除数，所以，在这里还需要使用另一个 16 位寄存器 DX ，其中 DX 存放 32 位的被除数的高 16 位，而 AX 则存放 32 位的被除数的低 16 位， 同时，AX 的作用还不仅仅是用来保存被除数的，当除法指令执行完成以后，如果除数是 8 位的，则在 AL 中会保存此次除法操作的商，而在 AH 中则会保存此次除法操作的余数，当然，如果除数是 16 位的话，则 AX 中会保存本次除法操作的商，而 DX 则保存本次除法操作的余数。 MUL当使用 MUL 做乘法运算时，两个相乘的数要么都是 8 位，要么都是 16 位，如果两个相乘的数都是 8 位的话，则一个默认是放在 AL 中，而另一个 8 位的乘数则位于其他的寄存器或者说是内存字节单元中， 而如果两个相乘的数都是 16 位的话，则一个默认存放在 AX 中，另一个 16 位的则是位于 16 的寄存器中或者是某个内存字单元中。 同时，当 MUL 指令执行完毕后，如果是 8 位的乘法运算，则默认乘法运算的结果是保存在 AX 中，而如果是 16 位的乘法运算的话，则默认乘法运算的结果有 32 位， 其中，高位默认保存在 DX 中，而低位则默认保存在 AX 中。 AX 寄存器在 DIV 指令中的使用： MOV DX,0H;设置 32 位被除数的高 16 位为 0HMOV AX,8H;设置 32 位被除数的低 16 位为 8HMOV BX,2H;设置 16 位除数为 2HDIV BX ;执行计算 4 条语句的执行过程如下：AX 寄存器在 MUL 指令中的使用： MOV AX,800H;设置 16 位乘数为 800HMOV BX,100H;设置 16 位乘数为 100HMOV DX,0H;清空用来保存乘法结果的高 16 位 MUL BX ;执行计算 4 条语句的执行过程如下： BX 寄存器首先可以明确的是，BX 作为数据寄存器，表明其是可以暂存一般的数据的，即在某种程度上，它和 AX 可以暂存一般性数据的功能是一样的，其同样为了适应以前的 8 位 CPU ，而可以将 BX 当做两个独立的 8 位寄存器使用，即有 BH 和 BL，除了暂存一般性数据的功能外，BX 作为通用寄存器的一种，BX 主要还是用于其专属功能 – 寻址（寻址物理内存地址）上， BX 寄存器中存放的数据一般是用来作为偏移地址使用的，何为偏移地址呢？既然是偏移地址的话，当然得有一个基地址了，而这个基地址其实就是段地址，这里就涉及到了段寄存器，当然，在介绍 BX 寄存器的时候，我不会去介绍段寄存器，上面提到 BX 的主要功能是用在寻址上，那么，其是如何寻址的呢？ 而这里，我只点一下，在 8086 CPU 中，CPU 是根据 &lt;段地址：偏移地址&gt; 来进行寻址操作的，而 BX 中存放的数据表示的是偏移地址的话，自然，便可以通过 &lt;段地址：[BX]&gt; 的方式来完成寻址操作了。 为了介绍 BX 在寻址当中的作用，下面我给出一副示意图： 上面的示意图表示：可以令 BX = 2，然后通过 DS : [BX] 来访问到内存中段地址为 DS，且偏移量为 2 的内存单元了。上面介绍的这种寻址方式是 BX 在寻址中最最简单的应用了，而对于稍微复杂的寻址方式，还可以依赖于 SI，DI，BP 等寄存器来一起完成。 BX 寄存器在寻址中的使用： MOV BX,5HMOV AH,11HMOV AH,[BX];设置 AX 的值为偏移地址为 BX 中的值时所代表的内存单元 3 条语句的执行过程如下：从上图可以看出，在偏移地址为 5 时的内存单元中的数据位 BBH，而从这幅图上面就可以看出，确实通过 [BX] 找到了偏移地址为 5 处的内存单元，并且将内存单元移入了 AH 中。 CX 寄存器CX 寄存器作为数据寄存器的一种呢，其同样具有和 AX，BX 一样的特点，即可以暂存一般性的数据，同时还可以将其当做两个独立的 8 位寄存器使用，即有 CH 和 CL 两个 8 位寄存器， 当然，CX 也是有其专门的用途的，CX 中的 C 被翻译为 Counting 也就是计数器的功能， 当在汇编指令中使用循环 LOOP 指令时，可以通过 CX 来指定需要循环的次数， 而 CPU 在每一次执行 LOOP 指令的时候，都会做两件事： 一件就是令 CX = CX – 1，即令 CX 计数器自动减去 1；还有一件就是判断 CX 中的值，如果 CX 中的值为 0 则会跳出循环，而继续执行循环下面的指令， 当然如果 CX 中的值不为 0 ，则会继续执行循环中所指定的指令 。 CX 寄存器在循环中的使用（输出 5 个白底蓝字的 A）： MOV AX,0B800HMOV DS,AX;使用 80x25 彩色字符模式，内存地址 0xB8000 - 0xBFFFFFMOV BX,0;从 0xB8000 开始MOV CX,5H;循环 5 次MOV DX,41H;A 的16 进制为 41HMOV AX,01110001B;显示白底蓝字s: MOV [BX],DX;显示 ASCII 字符 ADD BX,1 MOV [BX],AX;设置字符显示属性 ADD BX,1LOOP s 语句的执行结果如下： DX 寄存器DX 寄存器作为数据寄存器的一种，同样具有和 AX，BX，CX 一样的特点，即可以暂存一般性的数据，同时还可以将其当做两个独立的 8 位寄存器使用，极有 DH 和 DL，同时，DX 作为一个通用寄存器的话，自然其还有其他的用途，而关于 DX 在其他方面的用途， 其实在前面介绍 AX 寄存器时便已经有所介绍了，即当在使用 DIV 指令进行除法运算时，如果除数为 16 位时，被除数将会是 32 位，而被除数的高 16 位就是存放在 DX 中，而且执行完 DIV 指令后，本次除法运算所产生的余数将会保存在 DX 中，同时，在执行 MUL 指令时，如果两个相乘的数都是 16 位的话，那么相乘后产生的结果显然需要 32 位来保存，而这 32 位的结果的高 16 位就是存放在 DX 寄存器中。 DX 寄存器在 DIV 指令中的使用（即 2293812 / 256 = 8960 余数为 52）： MOV DX,0023H;32 位被除数的高 16 位MOV AX,0034H;32 位被除数的低 16 位MOV BX,100H;16 的除数DIV BX 语句的执行过程如下： 可以看到在语句结束以后，AX = 2300H 即十进制的 8960，而 DX = 34H即十进制的 52 和我们的结果是一致的。DX 寄存器在 MUL 指令中的使用则各位可以参考在 AX 中 MUL 运算的使用，这里就不贴出来了。 指针寄存器（BP, SP）8086 CPU 中的指针寄存器包括两个，即 SP 和 BP ，在这里呢，我先只对 BP 寄存器做介绍，因为 SP 寄存器实质上必须和 SS 段寄存器一起使用，所以，我将会把 SP 寄存器留到后面和 SS 段寄存器一起作介绍。 BP (Base Pointer)也就是==基指针寄存器==，它和其他的几个用来进行寻址操作所使用的寄存器（还有 BX，SI，DI）没有太大的区别。 首先，BP 寄存器作为通用寄存器的一种，说明其是可以暂存数据的，而后，BP 又不是数据寄存器，也就意味着其不能分割成 2 个独立的 8 位寄存器使用， 而后当以 […] 的方式访问内存单元而且在 […] 中使用了寄存器 BP 的话，那么如果在指令中没有明确或者说是显示的给出段地址时，段地址则使用默认的 SS 寄存器中的值（BX，SI，DI 会默认使用 DS 段寄存器）， 比如 DS:[BP] 则在这里明确给出了段地址位于 DS 中， 所以，这里代表的内存单元即是段地址为 DS ，偏移量为 BP 寄存器中的值的内存单元，而如果单单是使用 [BP] 的话，则代表的内存单元是段地址为 SS，偏移量为 BP 寄存器中的值的内存单元。 并且 BP 寄存器主要适用于给出堆栈中数据区的偏移，从而可以方便的实现直接存取堆栈中的数据 在 8086 CPU 中，只有 4 个寄存器可以以 […] 的方式使用，这四个寄存器分别是 BX，SI，DI，BP。 下面的 Demo 是 BP 寄存器在寻址中的使用： MOV BP,0MOV AX,[BP] ;将 SS:[BP] 代表的内存单元移入 AX 中MOV AX,CS:[BP] ;将 CS:[BP] 代表的内存单元移入 AX 中 语句的执行过程如下： 变址寄存器（SI，DI）首先，变址寄存器和上面介绍的指针寄存器（也就是 BP 和 SP），它们的功能其实都是用于存放某个存储单元地址的偏移，或者是用于某组存储单元开始地址的偏移，即作为存储器指针使用，当然，由于变址寄存器和指针寄存器都是属于通用寄存器，所以它们也可以保存算术结果或者说是具有暂存数据的功能，但是因为它们不是数据寄存器，所以无法分割成 2 个独立的 8 位寄存器使用。 SI (Source Index) 是源变址寄存器，DI (Destination Index) 即是目的变址寄存器， 8086 CPU 中的 SI 寄存器和 DI 寄存器其实和 BX 寄存器的功能是差不多的，只不过 SI 寄存器和 DI 寄存器均不是数据寄存器，所以它们不能够拆分为 2 个独立的 8 位寄存器，而这也就是 SI 寄存器和 DI 寄存器与BX 寄存器所不同的地方，既然，SI，DI 两个寄存器的功能和 BX 差不多，自然，SI 和 DI 中也是可以暂存一般性数据的，同时，通过使用 SI 和 DI 寄存器也是可以用来完成寻址操作的。比如下面的代码就是可行的： MOV SI,0;初始化偏移地址为 0MOV AX,[SI];将段地址为 DS 偏移地址为 SI 的内存单元中的值移入 AX 中MOV AX,DS:[SI];将段地址为 DS 偏移地址为 SI 的内存单元中的值移入 AX 中MOV AX,SS:[SI];将段地址为 SS 偏移地址为 SI 的内存单元中的值移入 AX 中 MOV DI,0 ;初始化偏移地址为 0MOV AX,[DI];将段地址为 DS 偏移地址为 DI 的内存单元中的值移入 AX 中MOV AX,DS:[DI];将段地址为 DS 偏移地址为 DI 的内存单元中的值移入 AX 中MOV AX,SS:[DI];将段地址为 SS 偏移地址为 DI 的内存单元中的值移入 AX 中 CS, IP, SS, SP, DS, ES 寄存器由于段寄存器总是和其他一些像指针寄存器，变址寄存器，控制寄存器一起使用，所以在这里，我并不会单独介绍段寄存器，而是将段寄存器和一些其他的常用寄存器搭配介绍 。由于下面的介绍中会涉及到很多关于段和栈的概念，而段和栈的介绍又都必须关系到物理内存，所以在介绍段寄存器以及其他一些呈协作关系的寄存器之前，还是先来介绍一下这几个基本的概念比较好。 8086 CPU 访问内存（物理地址）： 当 CPU 需要访问一个内存单元时，需要给出内存单元的地址，而每一个内存单元在物理内存空间中都有一个唯一的地址，即可以通过这个地址定位到内存单元，而这个地址即为物理地址。CPU 通过地址总线将一个内存单元的物理地址送入存储器，而后 CPU 便可以通过这个物理地址来访问这个物理地址所指向的内存单元了。那么这个物理地址在 CPU 中是如何形成的呢？ 首先，我们知道 8086 CPU 的地址总线是 20 根，即每次都可以传输 20 位的地址，从而寻址能力有 2^20 也就是 1MB 的大小，但是 8086 CPU 的寄存器只有 16 位，也就是在 8086 CPU 的内部，一次性处理，传输，暂存的地址都只能是 16 位，即 8086 CPU 不能完整的保存下一个物理地址（物理地址为 20 位）， 如果单单以最简单的方式（即直接用 16 位寄存器来保存物理地址）的话，那么，寻址能力只有 2^16 ，也就是 64KB，如果真以如此简单的方式的话，那么地址总线还需要 20 根干嘛呢？而且，难不成我们以后的内存就是 64KB 了吗？ 当然不是的，8086 CPU 在这里采取了一定的措施从而使其寻址能力达到 1MB 。8086 CPU 在内部通过两个 16 位的地址进行合成从而形成一个 20 位的物理地址，由此，8086 CPU 的寻址能力便可以达到 1MB 。 那么 8086 CPU 又是如何将两个 16 位的地址合成为一个20 位的物理地址的呢？当 CPU 在访问内存时，其会使用一个 16 位的基地址，然后再使用一个16 位的偏移地址 通过将基地址和偏移地址传入 8086 CPU 的地址加法器中进行合成即可以构造出 20 位的物理地址。至于合成的方式如下： 基地址其实是通过一个 16 位的段地址来形成的，将一个段地址左移 4 位即形成了基地址，而至于偏移地址的话，自然不必多说，为 16 位，通过将基地址和偏移地址相加便形成了 20 位的物理地址 。 下面给出一幅示意图来表示物理地址的合成： 段至于段的话，其实在物理内存中是没有段这一概念的，事实上，段的概念来自于 CPU ，因为 CPU 拥有段寄存器，既然在 CPU 中拥有了段寄存器，自然，在 CPU 中就肯定有段的概念了，其实段也就是在编程时，我们将若干个地址连续的内存单元看做是一个段，然后通过将一个段地址左移 4 位形成基地址，再通过这个基地址来定位这个段的起始地址，然后，再通过偏移地址便可以精确定位到段中的内存单元了，由于段的起始地址是一个段地址左移 4 位， 所以很明显，段的起始地址肯定是 16 的倍数，而且由于一个段内部，只能通过偏移地址来定位，而偏移地址为 16 位，所以一个段的长度也就是 2^16 也就是 64KB 的大小。 在编程时，可以讲一段内存定义成为一个段，而这里，我们又可以引出数据段，代码段，栈段这三种类型的段。何为数据段呢？其实就是我们自个儿定义一段内存（当然段起始地址肯定是 16 的倍数，并且段长度 &lt;= 64KB）， 然后我们在这个段里头存放我们所需要使用的数据，这就是数据段；何为代码段呢？其实也很简单，也是我们自己在编程的时候定义一段内存，然后这段内存用来存放我们的代码（也就是指令），既然是存放的代码，自然就称之为代码段； 何为栈段呢？至于栈段的话，有接触过数据结构的朋友应该是很清楚栈的，而这里我们也就是在内存中分配出一个段，然后将这个段当做栈来使用。 首先，对于任何一个段来说，均有段地址，而这些段地址是存放在段寄存器中（段寄存器的作用也在于此），但是对于不同的段，它们默认的段地址存放在不同的段寄存器中，像数据段来说，它的段地址存放在 DS （Data Segment）寄存器中，代码段的段地址存放在 CS （Code Segment）寄存器中，栈段的段地址存放在 SS （Stack Segment）寄存器中 。 下面给出一幅在段中寻址的示意图：上面的示意图中，通过将段地址左移四位，然后与偏移地址相加便可以得到 20 位的物理地址了 。 栈8086 CPU 中提供了对栈的支持，并且其还提供了相应的指令来以栈的方式访问内存空间 。 什么是栈？通过上面在段中的介绍，栈其实就是一个段，再说白一点，也就是一块内存，当然，这块内存是一块连续的内存 。 既然栈是一个段的话，那么当然就可以以使用段的方式来使用栈，当然，除了像段一样的使用栈以外，栈还提供了其特殊的访问方式。 众所周知，栈是先进后出类型的数据结构，在 8086 CPU 中也是如此，可以通过==PUSH==指令将数据压入栈中，然后再通过==POP==指令将栈顶的元素取出来 。 下面给出一幅示意图来描述栈： 即通过 PUSH 10 来将元素 10 放入栈中，因为，先前栈中没有任何数据，所以，10 就会作为栈顶元素存在，然后再在栈中压入元素 20 ，此时，栈顶中的元素就是 20 了，然后再使用 POP 指令将栈顶元素取出，此时取出的栈顶元素是 20 ，取出 20 后，栈中便只剩下 10 了，自然 10 就成为了栈顶，最后再通过 POP 指令将栈顶 10 取出，此时，栈便变成了空栈了 。 好了，在介绍段寄存器之前的基础知识介绍就到这里了，下面开始正式介绍段寄存器以及与它们协作使用的寄存器。 CS 寄存器 和 IP 寄存器经过前面对段的介绍，相信各位朋友对段寄存器应该也有一定的了解了，下面将要介绍的是一组非常非常重要的寄存器，即 CS:IP 。CS:IP 两个寄存器指示了 CPU 当前将要读取的指令的地址，其中 CS 为代码段寄存器，而 IP 为指令指针寄存器 。 什么叫做指示了 CPU 当前将要读取的指令呢？在 8086 CPU 中，为什么 CPU 会自动的执行指令呢？这些指令肯定是存放在内存中的，但是 CPU 怎么知道这些指令存放在内存的那个位置呢？ 比如，我有下面的两条指令要执行：MOV AX,1234HMOV BX,AX 而假设这两条指令在内存中存放为：很显然， 1000H:0000H 指向的是 MOV AX，1234H 的首地址，如果 CPU 要读取到我的指令的话，很显然，必须要知道地址 1000H:0000H ，然后 CPU 就可以根据这个首地址，将汇编指令 MOV AX，1234H 所对应的机器码读入到 CPU 的指令寄存器中，最后便可以在 CPU 中进行处理了。 但关键是 CPU 如何知道我的 1000H:0000H 这个首地址？其实这就需要使用到 CS:IP 这个寄存器组了 。 当我们运行一个可执行文件时，很明显，我们需要另外一个程序来将这个可执行文件加载到内存当中，关于这个加载可执行文件的程序，我们在这里不管他，点一下即可，一般是通过操作系统的外壳程序（也就是传说中的 Shell 程序），Shell 将可执行文件加载到内存中以后，就会设置 CPU 中的两个寄存器，即设置 CS:IP 两个寄存器指向可执行文件的起始地址，此后 CPU 便从这个起始地址开始读取内存中的指令，并且执行， 比如我们在写汇编程序时，通常会使用 START 标记，其实这个标记就是用来标记起始地址的，当将一个汇编程序编译，连接成可执行文件以后，再通过操作系统的 Shell 程序将可执行文件加载到内存中以后，这个 START 所标记处的地址就是整个可执行文件的起始地址了 。 也就是说，当一个可执行文件加载到内存中以后，CS:IP 两个寄存器便指向了这个可执行文件的起始地址，然后 CPU 就可以从这个起始地址开始往下读取指令，当读取完指令后，CS:IP 将会自动的改变，基本上是改变 IP ，从而指向下一条要读取的指令，这样就可以执行这个可执行文件了 。 最后再对 CS:IP 总结一下： 1.你想让 CPU 执行哪行指令，你就让 CS:IP 指向保存有指令的那块内存即可。2.任何时候，CS:IP 指向的地址中的内容都是 CPU 当前执行的指令。 下面我们来看一个 Demo，并详细观察其执行的过程： ASSUME CS:CODESCODES SEGMENTSTART: MOV AX,1234H MOV BX,AX MOV AH,4CH INT 21HCODES ENDS END START 从上面的截图中可以看出，当我使用 Shell （在 DOS 下也就是 Command 命令解释器）将可执行文件加载进内存后，可以看到，整个程序的起始地址为 0C54H : 0000 H ，并且，可以看到 CS 的地址为 0C54H ，IP 的地址为 0000H，这正好吻合我们上面对 CS:IP 的分析，很明显，CPU 将会读取 MOV AX ，1234H 到 CPU 中并且执行 ， 然后我们继续向下看：可以看到，我们单步执行后，AX 中的值编成了 1234H ，而 IP 寄存器中的值变成了 0003H，对于 AX 中的值的改变，我们是能够理解的，但是 IP 中的值为什么会从 0000H 变到 0003H 呢？ 从最上面的一幅关于指令在内存中的存放可以看出 MOV AX ，1234H 在内存中需要 3 个内存单元存放，也就是 CPU 为了执行 MOV AX ，1234H 这条指令，已经将内存中相对应的 3 个内存单元读入内存中了，执行完这条指令后，自然，CPU 就要将偏移地址向下移动 3 个单元，从而使得 CS:IP 指向下一条需要执行的指令了 ， 为了更深刻的理解，我们再来继续看执行过程，从最上面的一幅关于指令在内存中的存放可以看出 MOV BX ，AX 在内存中只占 2 个内存单元， 这也就是为什么 IP 这一次只向下移动了 2 个单元的缘故 。 关于 CS: IP 的遐想： 从上面关于 CS:IP 的介绍中，我们可以大胆的猜想，我们只需要通过手动的改变 CS:IP 所指向的内存地址，让 CS:IP 指向我们另外的代码，那么我们就可以让 CPU 执行我们自己指定的代码了。即可以通过修改 CS:IP 来达到我们想要让 CPU 干什么它就干什么的目的 。 上面的虽然是遐想，但是大家要相信，我们写的是汇编，不是 JAVA 也不是 NET ，所以我们还真的可以达到上面的目的，也就是说我们的遐想其实是可以实现的，当然这还是有一定的限制的 ， SS 寄存器和 SP 寄存器在底层涉及的是栈在内存中的具体实现 。 不知道，大伙有没有注意笔者在本篇博文的上面介绍关于栈的知识时，我并没有提到如何找到这个栈，我只提到了一个栈就是先进后出操作，同时可以使用 ”PUSH“ 和 ”POP“ 指令，然后就是稍微带了一下 SS 这个寄存器的介绍， 我们虽然在内存中是可以方便的定义一个栈了，但是，我们为什么要定义这么一个栈呢？自然，是为了操作方便，同时提供给 CPU 使用的，既然 CPU 要使用的话，自然，CPU 又必须根据一定的方式找到这个栈，而这就需要使用 SS 和 SP 寄存器了 。 同时，一个栈也就是一块内存区域，通过上面的介绍，我们也知道了如果要在一块内存中精确地定位到内存单元的话（寻址），我们必须要有基地址（也就是段地址左移 4 位）和偏移地址，自然，要在一个栈中寻址的话，也需要段地址和偏移地址， 而对于一个栈来说，我们使用的最多的是什么呢？ 当然是==栈顶==了，因为只有栈顶可以用来存取数据，所以对于一个栈来说，我们只需要有栈顶的段地址和偏移地址即可，而对于栈顶的段地址，其是存放在段寄存器 SS 中的，而对于栈顶的偏移地址，其则是存放在 SP 寄存器中的 。 ==在任何时刻，SS:SP 都是指向栈顶元素==。 其实关于栈的使用还是比较简单的，但是要注意的是 8086 CPU 并不会保证我们对栈的操作会不会越界 。所以我们在使用栈的时候需要特别注意栈的越界问题 。 当使用 PUSH 指令向栈中压入 1 个字节单元时，SP = SP - 1；即栈顶元素会发生变化； 而当使用 PUSH 指令向栈中压入 2 个字节的字单元时，SP = SP – 2 ；即栈顶元素也要发生变化； 当使用 POP 指令从栈中弹出 1 个字节单元时， SP = SP + 1；即栈顶元素会发生变化； 当使用 POP 指令从栈中弹出 2 个字节单元的字单元时， SP = SP + 2 ；即栈顶元素会发生变化； 下面通过一个 Demo 来介绍栈的使用： ASSUME CS:CODESCODES SEGMENTSTART: MOV AX,1000H;首先是定义好栈的段地址 MOV SS,AX MOV AX,10H;再定义好栈的长度（初始时刻的栈顶偏移地址即栈的长度） MOV SP,AX MOV AX,0001H PUSH AX MOV AX,0002H PUSH AX MOV AX,0003H PUSH AX MOV AX,0004H PUSH AX MOV AX,0005H PUSH AX POP AX POP AX POP AX POP AX POP AX MOV AH,4CH INT 21HCODES ENDS END START 然后我们来看栈在内存中的结构图：语句的执行过程如下：首先我们来看尚未执行上述任何指令时栈中的数据情况：然后我们再来依次执行上述指令：从上副截图中可以看出已经设置好了 SS:SP ，也就是栈已经设置 OK 了， 下面开始往栈中压入数据了，由于我们压入栈中的数据为字数据，即占 2 个内存单元，所以，每次 SP = SP – 2 ； 将 5 个字型数据压入栈中后，我们可以来查看栈中的数据了，因此，在内存中的一个好看点的结构图如下所示：下面开始进行出栈操作了由于我们弹出栈时的数据为字数据，即占 2 个内存单元，所以，每次 SP = SP + 2 ； 将 5 个字型数据全部弹出栈中后，我们可以来查看栈中的数据了，可以看到 SP 变成了初始状态了，也就是说栈中所有的数据已经全部弹出了，虽然我们查看内存时看到的不是 0 ， 但是我们看到的这些数据都是无效的，我们这里不理会 。 DS 寄存器和 ES 寄存器DS 寄存器和 ES 寄存器都属于段寄存器，其实它们和 CS 寄存器以及 SS 寄存器用起来区别不大，既然是段寄存器的话，自然它们存放的就是某个段地址了 。 通过上面对基础知识的介绍呢，我们已经知道，如果 CPU 要访问一个内存单元时，我们必须要提供一个指向这个内存单元的物理地址给 CPU，而我们也知道在 8086 CPU 中，物理地址是由段地址左移 4 位，然后加上偏移地址形成的，所以，我们也就只需要提供段地址和偏移地址即 OK 。8086 CPU 呢，提供了一个 DS 寄存器，并且通常都是通过这个 DS 段寄存器来存放要访问的数据的段地址 。 DS（Data Segment）：很显然，DS 中存放的是数据段的段地址 。 但是这里不得不再点一下，那就是我们对段的支持是在 CPU 上体现的，而不是在内存中实现了段，所以事实上我们使用的段其实是一个逻辑概念，即是我们自己定义的，再说白了，我定义一个段，我说它是数据段那它就是数据段，我说它是代码段那么它就是代码段，它们其实都是一块连续的内存而已，至于为什么要区分为数据段和代码段，很明显，是用来给我们编程提供方便的，即我们在自己的思想上或者说是编码习惯上规定， 数据放数据段中，代码放代码段中 。而我们在使用数据段的时候，为了方便或者说是代码的编写方便起见，我们一般把数据段的段地址放在 DS 寄存器中，当然，如果你硬要觉得 DS 不顺眼，那你可以换个 ES 也是一样的， 至于 ES（Extra Segment） 段寄存器的话，自然，是一个附加段寄存器，如果再说得过分点，就当它是个扩展吧，当你发现，你几个段寄存器不够用的时候，你可以考虑使用 ES 段寄存器，在使用方式上，则和其他的段寄存器没什么区别 。 下面看一个介绍使用 DS 寄存器的 Demo： ASSUME CS:CODESCODES SEGMENT START: MOV AX,1000H MOV DS,AX MOV AL,1 MOV BX,0 MOV CX,5;设计一个循环，让其循环 5 次 s: MOV [BX],AL;这里 [BX] 并没有指定段地址哦 INC AL INC BX LOOP s MOV AH,4CH INT 21HCODES ENDS END START 上面的代码所做的事情，就是循环将 1，2，3，4，5 写入到地址 1000H：0000H ，1000H：0001H，1000H：0002H，1000H：0003H，1000H：0004H 中， 语句的执行过程如下：首先我们来看尚未执行上述任何指令时栈中的数据情况：而当循环执行完成以后，我们再来看内存 1000H：0000H 处的值： 在这里，我们可以看到确实达到了我们预期的效果，但是大家注意看代码： s: MOV [BX],AL;这里 [BX] 并没有指定段地址哦 INC AL INC BX LOOP s 这里可以看到，我们在 [BX] 中并没有给其指定段地址，而只有一个偏移地址，但是根据我们一开始的介绍，必须要有段地址和偏移地址才能够定位内存单元， 莫非这里出问题了？其实不是的，因为我们在最前面定义了段地址 DS 为 1000H，当我们定义好段地址后，每一次 CPU 执行到 [BX] 时，便会自动或者说是默认的从 DS 中取值，并且将取得的值作为段地址，因此，当 [BX] 为 0001H 时，CPU 会从 DS 中取得一个 1000H ，由这两个一合成即可以得到正确的物理地址 1000H：0000H 。 最后还提醒一点，那就是 8086 CPU 不支持直接将一个数据送入段寄存器中， 也就是下面的做法是错误的： MOV DS,1000H 标志寄存器 FLAG前面呢，已经介绍了 8086 CPU 14 个寄存器中的 13 个了，下面我们将介绍最后一个寄存器也就是 FLAG 寄存器，FLAG 寄存器之所以放到最后一个介绍，是因为其和其他的一些寄存器不同，像 AX，BX，CX，DX 这些寄存器来说，它们都是用来存放数据的，当然 FLAG 中存放的也是数据啦，不过，AX，BX 这些寄存器中的数据是作为一个整体使用的， 最多也就分成一个 AL 和 AH 使用而已，但是在 FLAG 中，数据是按位起作用的，也就是说，FLAG 中的每一个位都表示不同的状态，由于一个位也就能表示 0 和 1 ，自然，FLAG 中的每一个位就是用来描述状态的，而且 FLAG 寄存器中存储的信息通常又被称作程序状态字（PSW） 。 下面我给出一幅 FLAG 寄存器中各个位的示意图：从上面这幅图中可以看出，FLAG 的第 0 个位表示的是 CF ，第 2 个位表示的是 PF ，与此类推 . . . .首先，我们来看一个列表：上面的这个表怎么看呢？我们通过看下面一幅截图就知道了 。从上面的标记中可以看出，从左到右依次代表 OF，DF，SF，ZF，PF，CF 标志位的值， 至于为什么我们在 Debug 模式下，使用 R 命令时，只会列出这几个标志位，我猜的话是因为相对来说，列出的这几个标志位更为常用，其他的几个标志位并不经常使用的缘故吧 。 下面我们就按不同的位来分别介绍这些位所描述的状态，以及它们代表的意义： CF（Carry FLag） - 进位标志（第 0 位）： CF： 进位标志是用来反映计算时是否产生了由低位向高位的进位，或者产生了从高位到低位的借位 。 if(运算过程中产生了进位或者借位) CF = 1;else CF = 0; PF（Parity FLag） - 奇偶标志（第 2 位）：PF： 奇偶标志是用来记录相关指令执行后，其结果的所有的 Bit 位中 1 的个数是否为偶数 。 if(运算结果中 1 的个数为偶数) PF = 1;else PF = 0; AF（Auxiliary Carry FLag） - 辅助进位标志（第 4 位）：AF： 用来辅助进位标志 。 if(字节操作中发生低半个字节向高半个字节借位或者进位 || 字操作中发生低字节向高字节借位或者进位) AF = 1;else AF = 0; ZF（Zero FLag） – 零标志（第 6 位）：ZF： 记录的是相关的指令执行完毕后，其执行的结果是否为 0 。 if(执行的结果 == 0) ZF = 1;else ZF = 0; SF（Sign FLag） - 符号标志（第 7 位）：SF： 符号标志，其记录相关指令执行完以后，其结果是否为负数 。 if(运算结果为负数) SF = 1;else SF = 0; TF（Trap FLag） - 追踪标志（第 8 位）： TF： 追踪标志，主要是用于调试时使用 。 if(TF == 1) CPU 进入单步方式; IF（Interrupt-Enable FLag） - 中断允许标志（第 9 位）： IF： 中断允许标志，其决定 CPU 是否能够响应外部可屏蔽中断请求（以后会做详细介绍） 。 if(IF == 1) CPU 能够响应外部的可屏蔽中断请求;else CPU 不能够响应外部的可屏蔽中断请求; DF（Direction FLag） - 方向标志（第 10 位）： DF： 方向标志，其用于在串处理指令中，用来控制每次操作后 SI 和 DI 是自增还是自减 。 if(DF == 0) SI++,DI++;else SI--,DI--; OF（OverFlow FLag） - 溢出标志（第 11 位）： OF： 溢出标志，其通常记录了有符号数运算的结果是否发生了溢出 。 if(运算发生溢出)\tOF = 1;else\tOF = 0; 基础结构顺序什么都不干顺下来就是顺序 分支循环LOOP指令利用Count寄存器CX存储循环次数，每次运行LOOP指令，将会执行： DEC CX（CX自减） JUMP:MULTI ASSUME CS: CODESGCODESG SEGMENT MAIN: MOV AX,2 MOV CX,11 MULTI:ADD AX,1 LOOP MULTI MOV AX,4C00H INT 21HCODESG ENDSEND MAIN 利用分支和JUMP循环 函数PROC（中断跳转）小心SP的变化！首先：cpu执行call指令时，相当于执行了（push ip） 和 （jmp near ptr 标号）：(sp)=(sp)−2((ss)∗16+(sp))=(ip)(ip)=(ip)+16位位移 ret指令用栈中的数据，修改IP的内容，从而实现近转移；cpu执行ret指令时，(相当于pop ip)：(ip)=((ss)∗16+(sp))(sp)=(sp)+2 retf指令用栈中的数据，修改CS和IP的内容，从而实现远转移。cpu执行retf指令时，(相当于pop ip 和 pop cs)：(ip)=((ss)∗16+(sp))(sp)=(sp)+2(cs)=((ss)∗16+(sp))(sp)=(sp)+2 注：SS是堆栈段寄存器，SP是堆栈指针寄存器。SS 16表示堆栈段的段地址（即堆栈段的起始地址），SS 16+SP则表示堆栈的栈顶位置（地址）。 以上述代码段为例，调用过程为：ip会指向下一条指令000E，将此时的000E推入push进栈，因为call指令 (ip)=(ip)+16位位移 修改了ip的值，相当于实现了段内跳转，此时的位移： mov ax,4c00h（3个字节） 和 int 21h（2个字节） 两条指令，共5个字节，所以ip = 000Eh + 0005h = 0013h, 刚好是 标号s 处地址，成功实现跳转。 此时成功跳转后，ip先指向下一条指令0015，然后执行add指令，执行成功后ip再指向下一条指令，这时会发现程序段中没有可指向的指令，但是仍会有指向，之后就会执行ret指令，将栈顶的000E出栈并用ip接收，这时就会发现无论之前的ip是多少，执行完ret后都会被覆盖，成功实现了跳转。 原文链接：https://blog.csdn.net/orange_monkey/article/details/106380255 伪代码（可传参）","tags":["ASM"],"categories":["Coding"]},{"title":"银之冠·碧之泪","path":"/Tavg/SakuraR/bc91ebd0.html","content":"无剧透篇总评：你在渴望着什么样的爱呢 标签：R/现代/职场 篇幅：短篇 推荐：4/5 *故事强度：4+/5（5-清水 1-拔作） *口味刺激性：2/5（5-离谱 1-清水）（高浓度 NTR 警告!!!） 故事背景（プロローグ）： 千岁是个独居女OL，在酒店前台工作，正在与公司职员慎一郎恋爱中。故事的起点即是慎一郎与千岁求婚、千岁在犹豫着是否进入婚姻。其实，她和慎一郎很少见面，两个人都在工作上非常认真，她的工作决定了她不规则的工作时间、慎一郎则需要频繁的不定期出差，这也是她犹豫的原因之一。不过，后来千岁还是答应了，二人过上一段时间非常温馨的婚后生活。然而，好景不长，之后意外之事频繁地发生…… 简评 说到NTR，这可能会牵扯到很复杂的伦理问题，比如说婚姻关系中又遇到恋爱对象、婚姻关系不和睦的情况遇到恋爱对象。。。之类的。。不能说一段不成功的婚姻一定就得绑定一辈子吧，，可是要是误会呢，要是有一方多想呢。。什么什么什么的。。。（）这里我就绕开这点谈，因为我也不是很明白……又或者说这种事情里好坏完全就是模糊集吧，就是特别好和特别坏能分清楚，剩下的话只能按有些好的有些坏的这么谈了…… 有的事可能局外的人看起来是离谱的，可是局内的人这么行动可能又是完全合乎情理的（…）但是合乎情理和对错好坏也不是能混为一谈的概念…… 尤其是玩完这个游戏以后加强了我这种想法……刚开始我也觉得基本上应该是能分得出好坏的，这可是（）这还行（）这怎么能（）感觉谁这个做的不好谁那个又做的不好，可是后来想想我又并不是谁，不同的人就是会有不同的对事情的感受、考虑和处理事情的办法，用好不好、对不对之类的说法简单去评价感觉很困难呢……（不过我私心还是主要站女主角啦xd） 好复杂哦。总之，故事里的人是差不多合乎情理的吧……没有很重的强行NTR的感觉…… ==但是还是不建议感情洁癖的玩家去尝试了==（或者这个能某种程度上治疗感情洁癖。。吗。。。。） 关于人物情感的表现也非常出色和细腻~后面细说~~ 只是在氛围感上，由于故事的很大一部分埋没在OL女主角有点枯燥的生活里，没有很特别的地方，使得这个游戏有点缺乏自己的特色，不过这何尝不是一种特色（？）或者说，故事最大的特点就是平凡，男女主全员都是有些特点的普通的人，故事的环境也是普通中的普通，而慎一郎所做的事情、一件Routine中的意外、设定了故事发生的背景。虽然不知道是不是这样的故事真能发生在现实中，但是我觉得它也不乏合理性，在爱与婚姻的方面或许能给我们带来一些特别的感想吧（或许）。 剧透篇1. 分线写点想写的a. 千岁&amp;慎一郎慎一郎确实做得过分吧，对千岁完全实施保密主义，在网络时代连个简讯都不怎么愿意发…… 不排除这可能是我这种对方没有秒回就会焦虑得要死的地雷元素阿宅的想法，或许就是有人是不太喜欢表达的吧……（默默想了一下我爸，一种很喜欢一发信息发几十行的中年男子，摇了摇头….我身边好像还真没有，草） 还是说只有小孩子才会觉得恋爱就是要天天联系天天发消息天天贴贴……我不觉得啊！至少在这个环节里，千岁体现出来的对能确认亲密关系的行为的需求在正常范围内，可是远远比慎一郎提供的一星半点要多。 而且，就算不能贴贴不能频繁联系，我坚信恋爱这种亲密关系的维持是以真诚坦诚多交流为基础的，解释一下总是可以的吧！！明明知道千岁不安的原因是什么，为什么一句都不愿意多解释，就看着她在那里沉浸在幻想的恐惧终吗，你也会雇保镖去守护千岁的人身安全呀，为什么不能关心一下千岁的心理感受呢…… 受不了你了绿帽哥！！你完全是自作自受——！你这样除非你老婆真的是个逆来顺受的洋娃娃，就像你的线里一样每天上班下班回家等你，无条件的爱你理解你等待你，即使不安也相信你，肯定是会失去你老婆的啊……白痴吗你是…… 或者说，千岁会走上NTR的道路，首先就是慎一郎对千岁缺乏她所必须的关怀，然后才是千岁自己有点纤细敏感。虽然直接走歪的鬼畜线我有点不能接受，但是她在受到幻想敌的凝视和伤害、不被新婚的丈夫关心和爱的恐惧中变得很脆弱，让她变得很脆弱因此迫切地想要找到可以依赖也会爱她的存在（一种感觉很容易坏掉的状态……），这听上去完全合乎情理吧…… 我根本就不觉得千岁和慎一郎合适啊……不合适得有点难受的婚姻还是早点结束掉吧。甚至没领证，更方便了（。）还有千岁，还是不要那么草率地进入一段婚姻比较好吧……而且我一直不理解千岁到底喜欢慎一郎哪里，鬼畜线即使有点神经质地、以有点扭曲地方式在身体上索求着被爱的证明，依然强调着、看起来不太像是向自己强调这自己爱着慎一郎…… NTR作品看得实在太少了，同样感情脆弱的对象我只能想起来安乐冈花火……好像喜欢描写女性因为对自己被爱的能力没有安全感而病急乱投医（似乎我也能理解的样子）但是这样写起来太难过了。不过，故事里其他的对象我觉得都比慎一郎看起来顺眼，千岁这个医投得好像问题也不大，嘿嘿，就是过程折磨了一点。 说点题外的，我同情千岁，但是说不上对千岁……。明明在职场上做得那么好，是大家都敬佩的前辈，但是在爱情里看起来太不安脆弱、委曲求全了一点……而且，千岁的生活太单调了，也可能成为了她的脆弱的原因之一吧……我感受不到她在生活中有什么很喜欢做的事情，（虽然她自己说网购，但这只能说是让人高兴但是说不上是爱好吧……），看不到她对自己的生活有什么热情和希望，而是在婚后下意识地就完全在心理上依附于家庭生活，所以慎一郎对她所期望的生活的每一点背离都是对她沉重的伤害……也看不到她有什么好朋友，和自己的好朋友们有什么开心的生活。 我还是希望女主角能靠自己就把自己的生活过好呢，即使没有爱情也要能够开开心心地生活下去的那种。如果我是千岁的朋友的话，就带她一起打乙女游戏吧！！（？）要是她也喜欢的话，说不定就好朋友（我）和爱好（乙女游戏）都有了！！（？？） b. 榛名诚超喜欢的角色！……啊啊啊！！ 榛名：那个，因为姐姐你并不是很想结婚，所以这么说可能也并非出于本意。不过有的事情不做做看就不会知道吧?千岁：话虽如此，但万一结婚后却发现不行，不是就无法挽回了吗?榛名：正常地生活，然后发生无法挽回的事情，有那么常见吗? 只要活着的话怎样都行。这种思考方式不是也有吗? 榛名：姐姐，好像对得不到帮助这种事习以为常了呢。千岁：……榛名：还是说害怕?害怕被拒绝?千岁：……榛名：他的话锋太过尖锐，我不由倒吸口冷气。确实，是这样。相信能被理解，期待得到帮助，却始终落空。每次都失望，已经习惯了放弃。太悲惨了。而且，很悲哀…..榛名：我说，必须要做那么善解人意的女人吗？我并不认为姐姐是在胡闹。那种程度，可以看做是在撒娇。 喜欢他每天元气满满地面对兼职的快递工作，和大家都关系很好，（虽然自来熟得有点轻浮……（大概是剧情安排吧2333））喜欢他敏锐地发现千岁的不安、陪伴在千岁身边却不索求任何东西（好难过啊，不要白给啊年轻人qwq），喜欢他拉起大提琴的时候眼里有光的样子（虽然我也没有直接看到）。喜欢他笑起来的时候清脆的声音，喜欢他（）的时候压低的声音。 榛名：大提琴的声音啊，是和人的声音非常接近的。因此如果用心去演奏，这家伙就会代替我歌唱。刚才，是以请姐姐振作起来的心情来演奏的。感觉到了吗?千岁：嗯，感觉到了。榛名：还有，最喜欢姐姐了!这样的心情也放进去了….. 以及他这个人……成长历程顺风顺水锋芒毕露，直到让人感觉不适以后才收敛一点，也为此离开了家（唉…）；想要挑战所以学了不擅长的大提琴，一直这样拉着琴进了音乐学院，毕业了以后一边打工一边找乐团里的工作（因为位置很少所以很难找），独自住在海边不通电的小屋。一直没意识到自己喜欢音乐，直到自己有可能失去音乐。 我有过这样的梦哦，中学的时候吧，那个时候学钢琴也学得挺痛苦的，感觉对钢琴就是毫无感情（），能弹而已，赶紧考完业余的最高级就不学了，但是有天晚上突然梦见自己的手臂（不说具体了，有点血/腥……），早上醒来感觉那个手都还是麻的，第一反应不是什么生活不便也不是什么不能写作业而是不能弹琴……那个时候我突然意识到可能我也还挺喜欢弹琴的。后来看了番剧四月谎，对钢琴的感觉更复杂了（）不过高中以后寄宿，到现在很久很久没有碰琴了，感觉也就慢慢淡了。 啊肯定没有诚的感触这么深啦，毕竟人家可是pro，不过这个故事让我想起了很有感慨的东西，不然我很久都不会想起来这件事了。还有顺风顺水什么的……我也谈不上一直很顺，大考唯一一次顺估计就是高考了，我的锋芒毕露都还没维持到被别人提醒要收敛的时候（。）但是不知道为什么我好像能理解诚的感受呢。 而且诚虽然很厉害但是看起来却很亲切！或者说，第一次认识诚就是从一个很亲切的角度，不是从他是个很会拉琴的人的角度，感觉他完全就是个普通的少年、不会有看到巨佬那种“啊、努力的天才！好厉害！不过我们的理解和感情可能存在巨大的鸿沟……”的又尊敬又有点想要退后的感觉。这样超棒的啊！ 只是剧情里有个点比较难受。那天千岁在犹豫着留下他陪伴自己还是让他去尝试参加那个挺重要的比赛的时候。这并不是一个“要恋爱对象还是要追求梦想”的选择，其实感觉没那么严重，不陪女朋友女朋友也顶多就是不安一段时间（但是你们其实可以发消息的……），不去参加这个比赛的话以后也会有很多别的比赛，女朋友的选择就是一个可以刷好感（？）的地方……可是在这里却成为一个完全的转折点，明明只是一次性的选择却成为了一生的决定…… 我固执的将自己囚禁于寂寞之中，完全没有理会过榛名的事。正因为我什么都不管，榛名一定背负着许多痛苦和辛酸。但是他却想要独自克服一切。所以他演奏的音乐才如此坚强，因为懂得悲伤，所以才能这样温柔。(……榛名)我喜欢他的大提琴。喜欢他，喜欢到落泪。 或者，希望他追求梦想的想法代表着一个愿意努力变得坚强的千岁，千岁会逐渐从失败的感情中恢复过来，然后两个人一起走向光明的未来；希望他留下来的想法代表着一个极端脆弱的千岁，即使留下来也无法缓解千岁的不安了，爱着千岁的诚放弃了一次比赛也就还会有下一次、一次又一次逐渐也就把对大提琴的爱也舍弃了……这份感情也就此背上了可能非常沉重的“代价”…… 还是拉着琴的诚最帅啦！青春最美好的还是追求理想而闪闪发光的样子呀！！ c. 和泉亮 突然发现我喜欢的全是故事里的年下系（嘿嘿地笑了）可能我还是比较排斥“大人らしい”的恋爱吧…… 但是亮也很可爱诶！虽然这个人设好像有点普通没很多好说的（感觉是现实中也会存在的类型呢？）认真得有点固执的清纯男大学生（来了，某博主的二次元xp），但是也不会令人讨厌的刻板，感觉恰到好处…… 等等，开了这个头发现真的没什么好说的。放绿江文就是标准的年下小狼狗设定啊（）不过这是好多好多年前的作品，那个时候可能没这么烂大街吧（沉思）可是这个人设它就算再烂大街写好了也还是香啊！！！呜呜呜。 亮，和我什么时候一起去吃拉面吧！！那个拉面真的听上去好好吃，能让我嗦一口吗qwq d. 浅野&amp;神尾 年上系二人~一个无条件温柔得有点吓人，另一个对恋爱的需求有点大人气得吓人（）我都不感冒！！因为我喜欢！小孩子的恋爱！（？） 还有神尾我是真的不懂，对已经动心的女主狠心拒绝，过了两个月又逮住街上偶遇的女主激情告白……知道你是和自己内心斗争了，好吧，但是神尾感觉是个纯渣男啊，回心转意的原因完全不明，只是可能对之前的女孩子没有激情告白而已吧……我不知道，呜呜，我不懂，我只是觉得痛哭的千岁好惨，刚跟前夫吵完，又被新喜欢的人甩掉…… 2. 总评本来想写一篇认真的评价的，但是不知道为什么就写得欢脱起来（最近好像都没写什么特别欢脱的评价呢？）…… 想了很久给3+还是4-还是4虽然这几个没什么大区别，就是我觉得格局还是一股经典乙女游戏调调，女主虽然写了职场OL人设依然是每天情啊爱啊没有这些就过不下去了的样子，不过它讨论的东西确实是得R18才比较适合去理解吧……或者说主题正在与婚姻和爱和NTR，所以女主也是一个这种典型的脆弱的例子才行，故事才能这样展开？好像也有合理性……不过，比起一些少女童话，这本显然是要实在很多了（）而且有一些剧情也合理得让我有点小感动，这个就很棒啦。而且如果是因为少女童话感觉乏味的话，玩一下这个应该也很有趣吧！（虽然我也喜欢看少女童话，但是随着看的数目逐渐增多我也开始有点审美疲劳了……） 说到最后还是，希望女主这样的女孩子能找到属于且只属于自己的生活吧。把生活都围绕着男人和家庭确实是一种选择，可是万一选错了，那也太难过了。（）能够完全互相托付的爱情和婚姻我相信是存在的，可是一下子押上这样的赌注感觉有点危险呢……还是确保自己就算是一个人也能把生活过得丰富精彩比较好吧。（我觉得）还有，碰到慎一郎这种讲不通道理又不关心人的，要么想办法努力撬开他嘴（？）然后磨合磨合继续过日子，要么认识到不合适不接受早点润吧……","categories":["Tavg","SakuraR"]},{"title":"黑蝶幻境","path":"/Tavg/Sakura/5c602a3a.html","content":"无剧透篇总评：在幻境中寻找自我与真相 标签：架空 推荐：4/5 篇幅：中短篇 故事背景（プロローグ）： 不明原因使得几人在失去记忆的情况下在一栋小洋楼中苏醒，要面对的是在建筑中游荡的怪物群。在这里，情感和思想能够转化为实质，他们在路遇的狐狸面具少年的战斗方式的启发下也利用“幻想”的手枪开始战斗。战败的怪物会化作黑色的蝴蝶散去，留下一种&lt;碎片&gt;。根据他们随身携带的手机上的信息，只要收集足够的&lt;碎片&gt;修复&lt;万花筒&gt;就能回到原来的世界…… 简评 总体上逻辑自洽，主线剧情节奏也相当不错 只是以flowchart为主导的系统除了主线也有很多琐碎的短篇，每一篇单独阅读比较破碎和繁琐（但是也不是很不好，就是一些音乐听的太多了感觉人比较麻……） 全都不分线地喜欢女主（）（）（也不是什么……就是有点怪不好意思的……（？））女主是那种典型的温柔博爱型（有点审美疲劳了x） 剧透篇碎碎念：太好了，这游戏从打完到写repo又晾了大半个月，我的记忆正在快速褪色中……有的时候高密度打了很多个游戏，但是一时间又写不完repo，结果就像任务一样压在肩上让人很有排斥感（），现在还剩好多部（明明不是必须写的，可是，如果不写的话按我这个打的密度和忘的速度，会真正做到打过和没打过一样……） 1. 主线评价讲述了两次意外的故事。 黑蝶幻境是其中一次，让数年不愿相见或未能相见的几人重新相识、再次相聚，在探索的过程中逐渐发现另一次意外的真相，那几乎夺走了他们中两人的生命的一场意外，让剩下三个人自此背上不愿直面的&lt;罪&gt;，无法走出过去的阴影。 某种意义上，就好结局而论，可称为对余下三人的一种救赎吧……救赎的故事。 2. 写点想写的鉤翅 [夏樹]看上去是完美的温柔的青梅竹马…这种完美程度甚至会让人怀疑是否是那种游戏经典的切开黑……事实上，虽然说不上切开很黑，但是至少里面满满的是悲伤和痛苦吧。（声优太蛊了太蛊了，呜呜呜，好贴好贴！！） 他对绯影说，如果能够回到现实的话，他可以做一切能做的事情。在大家的背后，执着地追逐着所爱的身影，也因此与紋白分道……在有愿望又有希望（即使是虚假的）的情况下，封锁在这个洋楼里十多年，这样的执着怎么样能不变质啊。 能在所爱之人的面前维持最后的完美与温柔，并不是看上去那么轻松吧。花费多少自制力才能做得到呢。 可是游戏里，和已经死掉的人是没办法有真正意义上的好结局的。毕竟已经死掉的人，即使离开幻境，也没有归处了。要是那个雨天的夏树没有死在水里，他一定会和爱过上童话一样的幸福的生活的吧。IF线是真甜呀呜呜呜，可惜是IF…… 真官配，也是真be…最让人叹惋的一条线。 紋白 [和也]像是、实际上也是一簇连游荡的原因都已经忘却的游魂……拿着象征着执念的缎带，不知道从哪里来、也不知道是想要到哪里去。对爱孩子气的依恋并没有夏树那么重，也不愿意接受洋楼主人的约定，孤独地在洋楼里来去徘徊。 爱会伸手把他再次抱紧，接纳他的孤独与不安，接纳他再次展露的孩子气的依恋。作为友人也好，作为恋人也好。出于亏欠也好，出于同情也好，出于仍未消散的友情也好，还是出于爱恋，爱不在意，和也也不会在意了。只要此刻怀抱尚温，他就会像个孩子一样靠近过去。是啊，他本来也就是个孩子啊。和夏树一样，他们的时间早已在十多年前暂停了。 只是他的时间还能再续。他在现实还有归处，还能有一个与大家一同前进的未来。真好啊。（夏树：qaq） 緋影这位才是真疯皮（）关在这么个房子里！肯定是迟早会精神有点问题的啊！！！而且他关了那——么久啊（） 在这段漫长的时光开始之前，他就已经把自己的名字和样貌丢失了，也不再能想起，只记得要修复万花筒这件事。（虽然万花筒也是他自己打碎的……）连一直执念复活的妹妹就在身边也无法意识到。然后在漫长的时光里，一直把无辜的人拖下水替他寻找碎片…… 怎么说…喜欢不起来啊（实在有点太疯了）再想想他和妹妹那段往事，妥妥的病娇啊（），惨是真的惨，狠也是真的狠，洗不白的那种（）我共情力下线了…… 山都[拓也]，鸦翅[明]二位我都不太有感（）虽然细谷和柿子都很萌是没错啦x 但是，被死掉的人完全绊住步伐十几年让我觉得很难受……那个事情是很难过，可是人总要往前看的呀。比起想着昨天做错了什么怎么做会更好，不如考虑怎么样弥补自己的错误、怎么样过好明天……（是我比较自私吗？）不去后悔应该算是我的一个强行设置的一个人生信条了……沉溺于后悔除了让人连第二天都过不好以外没有意义啊。 3. 和姐妹篇&lt;灰鹰幻境&gt;感觉都是“人设 恋爱&lt;&lt;故事”的游戏，也是罕见的单线乙女游戏，游戏的设置就是让故事围绕探索主线去展开，而不是围绕着恋爱与人物展开。对人物的了解、恋爱关系的产生都是建立在故事的基础上的。 相比来说，黑蝶的故事更简单完整，灰鹰更复杂一点、只是半途加入很多魔幻设定让故事显得有点微妙。人设和恋爱上我觉得半斤八两，都是放了几个月就会让我几乎不记得多少的程度（……）但是灰鹰的女主朱德我更喜欢一点，感觉比爱的完美的博爱温柔更讨喜。 就是，还是觉得这两部在人设和恋爱上都没有做到很让人满意……不过，放眼到主流的人设与恋爱为主的众多乙女游戏，其中很多在主线的完整和自洽、以及探索主线的剧情节奏上都比不上黑蝶，女主每次都从头开始探索故事的内核，玩家明明有所了解却也要跟随女主的步伐，可是作为多视角游戏的优点（能够在不同的线里发掘不一样角度的真相，拼凑成一个完整的故事）由于对剧本要求比较高，也没有能体现出来，只不过是把同样的“真相”重复了一次又一次而已。 这里就体现出了单线乙女游戏的好处（）。不管怎么说，还是很希望看到各种各样的丰富形式的乙女游戏的~","categories":["Tavg","Sakura"]},{"title":"夜、灯す","path":"/Tavg/Flos/dd119dd0.html","content":"无剧透篇 简评：两代筝曲部少女们的决意与羁绊 标签：微恐/百合/校园 推荐：5-/5 篇幅：8h± 背景（无剧透）： 学校的旧楼里，曾经有一对不被接受的&lt;姐妹&gt;在走廊角落的房间殉情——从合宿惯例的鬼故事环节开始，筝曲部的少女们的暑假开始了。去往学校集训的过程中，事情的发展渐渐奇怪起来。旧楼里闪过的长发女高中生身影、诡异的琴声，以及与那个身影几乎完全重合的、不近人情的转校生：筝曲世家的大小姐。从部长开始，伙伴们接二连三地遇到死亡威胁…… 总评： 恐怖程度非常之轻微，也几乎没有突然出现鬼脸的环节，非常友好，只有结尾和一些中途be可能出现有一点恐怖的立绘及cg（但是总体还是非常友好的！！） 剧情节奏控制得很好，不会让人觉得无聊也不会一直很紧张让人绷紧神经，少女们的日常非常温馨有趣，探寻真相的过程也是少女们互相解除心结的过程、徐徐道来循序渐进 人设非常细腻具体，少女们如何成为今天的模样、都有适度的插叙进行解释，（我愿成剧本为插叙大师——）在这个过程中，她们性格的变化和成长也逐渐显现出来。 一切在自然而然中有理有据地发生~ 剧透篇1. 简单来说喜欢！！！喜欢！！！总之就是非常非常喜欢！！！ 2. 写写想写的两代的姐妹都在相互救赎。不过，故事的视角更倾向于&lt;夜&gt;的那边，相比而言更加详细地描述了皇家两个少女的改变。 因为对音乐的执着所以强烈渴望着理想的境界，因为对理想境界的强烈渴望所以不愿停下步伐，难以被接近的优秀才能和强大的执念让她处在一种孤独之中。 &lt;夜&gt;遇到&lt;灯&gt;，终于在追求音乐的孤独的道路上找到了足以称之为旅伴的存在。孤独地一个人像唱片一样精确地弹着&lt;黑发&gt;的少女、为了追求完美与极致不惜一切代价的少女，内心的空洞之处被另一个少女的温暖填满了。 或许并不是没有人向小夜子传达过爱，可是执着于向前奔跑的小夜子无法看到路边的野花，也只有&lt;灯&gt;在具备追上她的步伐的同时将心意也传达。 所以对于小夜子来说灯音是唯一的不可替代的特别的存在。为了守护灯音、守护她们两个人同行的道路，她几近&lt;丧心病狂&gt;地做出可怕的事情……虽然灯音已经非常坚强，能够在&lt;姐姐&gt;面前忍耐着、独自承担下受到的所有伤害，但是这样趋于偏执的情感也注定是沉重的，当这份情感导致了无法挽回的后果的时候更是如此。小夜子的伦理与道德观念在偏执中被模糊，但灯音依然是清醒的。所以，那个校园怪谈般的结局也顺理成章。 对于铃和有华也有类似的情况。 有华也不是生来如此的。她也曾经渴望着伙伴，或者说她其实一直渴望着伙伴。也会因为父亲弟子的三言两语而痛苦。而小夜子就是她的孤独之中的救赎。 是小夜子的日记指引了有华，告诉迷茫的年幼的她，如果无法在他人身上寻求爱、那么干脆就一个人向着更远更理想的地方去吧，只要执着于手中的琴就足够，那也是一种选择；有华追逐着理想中的小夜子的身影，也和她一样踏上了一条孤独的道路。 父：有華，对你来说音乐是什么。有華：（问题被反问了，这让我有些生气。）有華：音乐是我的道。是我应该笔直前进的道。然后我想到这条道的尽头去看看。父：你的那条道路，只属于你一个人对吧。但是，你现在的演奏，像是在边燃烧道路两旁盛开的野花和美丽的樱花，一边向前行。为什么不能爱护一下路旁边的小花呢？给花浇点水，和飞来飞去的蝴蝶嬉戏，你不觉得那些时间会为你的道路增添色彩吗？有華：我并不这么认为。这条路没有那样华丽而从容。因为只有奉献一切才能达到的高度，才是我向往的地方。有華：（那天我不知不觉地焦虑起来，对于平时简单敷衍就能结束的说教，我不自觉地认真回答了。我已经做好了总有一天会变成那样的觉悟。）有華：（我确信，就连血脉相连的亲人也不会理解我所走的路。）父：当时筝曲是为一部分上流阶层而设的一种文化，皇道流的开山鼻祖大人主张「没有身份的隔阂，无论是谁都能享受」努力地向民间传播筝曲。父：你不觉得你的发言是在侮辱那位开山鼻祖吗？你的意思可是筝只有被选中的人才能演奏，它应该是贵族才能碰的东西哟。有華：即使是那样……有華：（父亲平静而严厉地警告着我。但是，我不能在这里认输。…小夜子桑，请赐予我勇气。)有華：即使是那样，我还是想到那条路的尽头去看看!这就是我作为演奏家的夙愿!……然后也类似的，如同被命运所指引着一般，被铃所救赎。 当两个故事相似重叠之时，不同之处才更加引人注目。 比起我们在故事里第一次遇见就是个成熟的独行者、拥有完美的世家大小姐礼仪、浑身散发着&lt;姐姐&gt;的气息的小夜子，看上去早已生根于自己选择的道路…… 有华更像是个普通的、有点别扭的少女，虽然是大小姐却没什么大小姐架子，只是因为鲜少与人接触看起来不近人情（换句话说，让人感觉情商不是很高……）这一点或许与现代社会对世家之类的观念、对所谓的大小姐礼仪的弱化有关，也与有华自幼就避开了与他人产生交集这件事有关，小夜子桑那时的大小姐是绝对不能做出有华这种堪称任性的行为的吧（），也就自然在氛围的陶冶下拥有一副精致的大和抚子外壳； 虽然有华也会执着地向父亲诉说自己的志向，但那比起无法改变的偏执，更像是一种口号，像是在对着内心还哭泣着孤独不安与迷茫的自己用力地大声宣告。或许有华还没有碰上能够让她真正放弃追求着热闹与温暖的微小愿望的事情，只是沿着日记本里指出的一条存在的道路茫然地前行，想着，因为爱着音乐所以这样做应该就是对的。 小夜子和有华本来就是完完全全的两个人；她们生活在不同的时代，也有不太一样的性格。（关于有华的想法的揣测纯属我个人说不出理由的猜测，如果不认同那就不认同吧~xd）（不能说共情吧，但是我好像也有过类似的时期……只是我的才能完全比不上有华就是啦） 更显然的是，这一代的&lt;夜&gt;与&lt;灯&gt;不再孤独。 不像是几十年前的女校，在那里，少女们并不为追求音乐而选择音乐，走在那条道路上的只有孤独的她们而已；在这里，在筝曲部，她们可以互相陪伴。 同伴的存在让她们（尤其是本对“同伴”不甚理解的有华）不至于走向孤独而极端的道路，能够让她们与道路两旁盛开的野花一同前行。 野花虽然不是那么鲜艳但是野花也是鲜活的。 野花的存在是有意义的。 小夜子看不到野花。但是有华其实看到了野花。她说，奔跑的声音，无力的声音，空洞的声音，她听见了无法跟上自己步伐的少女们的感情，并且用她的方法尽可能地去指引着她们。很难说这件事情是出于什么，出于父亲的要求？出于突然的、亲近他人的善心？还是只是出于想要和铃一起奏乐的愿望？我觉得只是出于久旷的空虚的心。 小夜子和有华都很孤独，也都向往温暖：小夜子早就放弃了与普通的少女停下步伐一起喧闹的、鲜活又普通的温暖；而有华并没有真正遇到能让她放弃这些的理由，只是沿着小夜子的路在走着，这样脆弱的摇摆的心意被伙伴们的热闹所吸引了、改变了。 有華：….我懂的。我是知道的啊。我对小夜子桑的想法。有華：除了自己认为重要的东西以外，其他都是无聊的事情。即使将碍事的东西全都都烧尽，也能笔直地朝着目标跑下去…..有華：现在，我也清楚的明白了，我也是一样的。我也是那样的人。我就是那样的人啊。我就是这样一直折磨着周围的人，折磨着家人….. ! 她也更容易能明白过来。 和有华自身的恐惧不同，我并不觉得有华会踏上和小夜子一样的道路，因为有华本就没有那么根深蒂固的偏执的理由，她只是迷茫而已。因为感受不到爱；因为手中只有琴，自己爱着琴，对琴的爱也会被琴接受；因为小夜子的日记告诉她，只有琴也是足够的。 这样的想法，让我觉得有华不会做出像小夜子一样的偏执的事情。 只看剧情不得而知小夜子这样强烈的偏执的产生具体的契机；又或者不需要什么契机，只是时也、运也罢了。 无论怎么说，拥有了许多伙伴的有华已经踏上了这条铺满鲜花的、颇有人间烟火气的道路，不再是漂浮一般身处于世间了。我由衷替她感到高兴。 在剧情里，野花们的表现也是相当亮眼的，而不只是作为夜与灯的陪衬而存在。她们是她们自己的故事的主角；只是，现在故事的主角视角是在夜与灯那边而已。 中间最喜欢的是丽子！其实在过程中就感觉丽子好像挺厉害的，整个探寻真相的过程中其实都是丽子在引导的，虽然说是“讨论”，那些便签纸上的1.2.3，大家的任务分工，都来源于她，丽子在好像不被人注意的角度引导着大家。所以被有華指明“空洞的声音”蕴藏的力量与恐惧时也没有觉得离谱，而之后给出的解释也是挺合理的。 想要被看到“我”本身的力量，却无法摆脱“我”身上所绑定的“他人”；如果被看见的不是“我”的话，那就干脆不要看见“我”好了。 听上去好难过啊。 不过由于接近结尾了，感觉写得有点小仓促……但是也不是什么大问题~我很喜欢丽子哦！ 3. 关于少女们与救赎的歌谣并不是什么很新奇的故事。又或者说，故事还没开始很久，就能差不多猜到上一代姐妹间发生的旧事，关系很好的互相依靠着的两人、因为某些原因失去控制的&lt;姐姐&gt;、&lt;妹妹&gt;知道真相使得&lt;姐姐&gt;/&lt;妹妹&gt;选择的结局…… 但是这也不是为了探索真相而存在的故事。把真相全部告诉读者也毫无意义。故事的趣味正在与筝曲部的少女们一起跌跌撞撞地探索真相、互相治愈的过程。 细腻的细节，具体的情节，恰到好处的插叙，立体可感的人物设计，每个少女的心路历程都自然而然地展开，一直到达最后几人琴音和鸣的终点。两代姐妹的感情，还有结尾温暖的彩蛋。 像看了一场很美好的温馨的电影……作者也一定很爱这些角色吧，那些爱从字里行间都满溢出来……。 怎么能不喜欢！！怎么能不喜欢！！我超级喜欢！！我感动得想哭！！！！——！","categories":["Tavg","Flos"]},{"title":"Suicide_Club","path":"/Tavg/SakuraA/9ce67f3c.html","content":"难堪。真是太难堪了。一边厌恶着人类，以一副早知自己的人生没有意义的样子对自己的生命嗤之以鼻……结果就是这个德行。我难堪的样子真是太可悲了，一直蔑视生命的我其实根本无法放弃生命。我是个没用的阴沉混蛋。一个无药可救的幼稚鬼。而且很懦弱。所以才会被他们的炙热情感所压制，只能找借口原谅「我放弃」都说不出口的自己。而且——在认清自己的同时，我第一次，对活着的人类产生了好奇。 我想要了解真正的他们。但即使如此，我也仍旧找不到任何能令他想要，「死掉一了百了」的主要原因。话虽如此但我也丝毫不觉得，绘马同学的死的意志是虚假的，也不认为他是心灵过于脆弱而想要寻死。世界没有两片相同的叶子。人也有人能承受的极限。就和世界各地湖泊的深度，广度和地底的形状都各不相同一般，人的精神构造也同样是独一无二的。自已觉得无所谓的针刺，也会有人被刺伤。自己看不见的獠牙，也有人可以看的一清二楚。说不定，某处就存在着我无法察觉到，只有他才能看得见的死亡幻影。而我…. .想要知道的就是这个。我想在他死前，稍微看一 下 只有他能看见的东西。 ‍","categories":["Tavg","SakuraA"]},{"title":"TBC_Diabolik Lovers","path":"/Tavg/SakuraA/e2a2d525.html","content":"1作目: DIABOLIK LOVERS LIMITED**【PSP/PSV】 2作目: DIABOLIK LOVERS MORE, BLOOD LIMITED【PSP/PSV】 PSP版2作目の移植です。無印から1か月後の話です。 1&amp;2作目: DIABOLIK LOVERS GRAND EDITION【PS4/SWITCH】 シリーズ1作目とシリーズ2作目「MORE, BLOOD」が1本にまとまったものです。お得。今から初めて始めるなら「DIABOLIK LOVERS GRAND EDITION」1択です。） 3作目: DIABOLIK LOVERS VANDEAD CARNIVAL (FD)【PSV】 シリーズ2作目「MORE, BLOOD」のFDです。アドベンチャーパートとミニゲームがあります。 4作目: DIABOLIK LOVERS DARK FATE【PSV】 1作目2作目を踏まえた内容で、主人公と攻略対象が恋人同士でのスタートです。 5作目: DIABOLIK LOVERS LUNATIC PARADE (FD)【PSV】** シリーズ4作目「DIABOLIK LOVERS DARK FATE」のFDです。*シリーズ3作目「DIABOLIK LOVERS VANDEAD CARNIVAL」のネタバレ~剧透~を含みます。 6作目: DIABOLIK LOVERS LOST EDEN【PSV】 新キャラ「キノ」が登場します。人間がヴァンパイアに殺されるという事件が起こります。 7作目: DIABOLIK LOVERS CHAOS LINEAGE【NS】 各キャラが「覇王」になるために争います。 ‍","categories":["Tavg","SakuraA"]},{"title":"全员恶人","path":"/Tavg/Sakura/b7813dd8.html","content":"用时：28h 推荐：3/5 总评：总体尚可，但谜底的设计不及谜面而稍让人失望。 如果你要玩的话，简单给一些帮助（是我玩的时候需要却没找到的）：分为共通4章节、每条个线A和B篇（B为后日谈）、两条真相线、许多EXTRA（ EXTRA和B篇对完善人物形象和剧情几乎没有帮助，但是B篇不看完无法解锁真相线） 无剧透篇需要澄清的误解 如果你像我一样一开始觉得它真的是“全员恶人”的伙伴物语那我还是要提前说一下，呃，主角团生活的环境吧就还比较混沌，但是基本上是毫无疑问的大善人（），不是那种带感的搞事剧情来着……。 进去以后不要盯着アダム看2333男的闺蜜真不一定是反派…… 不太满意的地方：（以及，听说英翻有问题，慎） 刚玩一两条个人线的时候我也想反驳“共通线和个人线脱节之类的”，第一条玩的是mozu线给我体验相当好。。然而，当你走完五条个人线发现个人线几乎没有新增的伏笔（……只有对应2-3小时不算复杂的小案件）然后来到真相线被报幕一样把真相没有实感地揭开……对不起，我也想说， 高开低走 。 我也在反思，为什么（类似说君雪、七罪）都是小案件累加我对这篇这么这么难以接受，现在想错就错在一开始就给我画了一个很大的饼，让我觉得存在一个非常强大难以战胜的庞大的黑暗组织，同时加上锁线时间，它的前期铺垫又非常非常的长。但是最后赢得太轻松，而组织的这几个特征都没有体现。 个线案件和主线案件的关联也并不存在，使得个线中为数不多的对主线的呼应非常单薄和生硬 。（这一点上可以看看终远的处理。） 成就系统。5条个人线无锁线关系，但是必须完成所有B篇才能打开真相线。怎么说呢，别的游戏锁线我都是理解的因为涉及“看了后面会影响前面的游戏体验”但是这个锁我属实难受，因为B篇是后日谈……当然不排除因为我有不喜欢的角色所以在这里无理取闹……一开始就没打算收集全成就，结果连真相线都差点进不去，EXTRA也开得不顺利，好难过，进一步导致我的剧情体验稀碎。 觉得挺好的地方： 熟悉的【伙伴的羁绊】类的剧情，非常温暖人心&gt;A&lt;而且没有什么糟心的误解敌对之类的，伙伴们一直是手牵手~我个人非常喜欢这种！ 觉得玩到今天结局选项的逻辑性最强的乙女作……后面剧透篇再具体解释。是我一直期望看到的所以看到了甚至感觉到感动。 角色刻画很鲜明和细腻，总体上值得喜欢。女主角基本上可说是有智有勇，对待感情大大方方，积极努力向上，独立又可爱，嗯嗯，应该是那种不会踩雷的类型。 剧透篇好感度lay：モズ＞＞シュウ＝リンボ＝スケアクロウ＞＞ヘルベチカ 有哪些东西给我留下了深刻的印象？ 1. 结局选项逻辑我非常喜欢。クロちゃん的GE-BE分线点，女主是否自作主张不报暗号而是阻止他。其实小黑线可能还是多少有点让人生气吧，劝都劝不动感觉马上就要毁灭世界了，在此之前刚刚被女主拼死拼活救了又发疯快掐死女主（真的我有点生气！！）但是对小黑来说确实堵不如疏。女主有这个技能真是要谢天谢地。リンボ的分线点，（说实话我觉得这里涉及的所有科技都给我感觉毫无真实感可言。。）女主是否选择放弃。Emm…我觉得女主如果放弃真的会崩人设，毕竟teuta积极向上一定会尝试解决方案的，リンボ看到这个得多绝望啊，她就算对反派言听计从リンボ也不会因此得救，如果不使用能力必是绝路。シュウ的分线点，女主是否相信男主。（我就是想知道ヘルベチカ怎么能装成シュウ完全不被发现……）ヘルベチカ的分线点，女主是否曾经肯定过男主作为ヘルベチカ的存在、让他相信自己的意义（这个我觉得不是那么完美但是可以接受）。最喜欢的是モズ线的分线点！我真的喜欢到感动。女主角遇见老师和少女两边都是危难情况，毫不犹豫地选择回溯。拿到手机给モズ打电话的时候思考：让モズ去救哪边？我玩得可能比较潦草，如果我是女主角我就猜不到有什么区别。如果女主角选择モズ去救老师，モズ就会死，反之是皆大欢喜的结局。听上去是在巧合与意外中钦定死亡，其实不是。老师是假受伤，看到作为法医的モズ必然知道自己暴露（不排除モズ直接开口问……我感觉他不会这么做），故而捅伤モズ，但是看到女主角不会觉得有什么问题。怎么说呢，就是这种一念之差的选择决定了モズ和女主的命运让我觉得好难过。我大概会一直记得モズ趴在地上微微抬起脸看着テウタ说：然后微微笑起来。眼睛里的光渐渐散掉了。 2. 我好喜欢モズ。就是那种，让我无法移开目光的程度……即使是别人的线里。是少年成才的法医，对专业问题有个人的执着，从某些方面又体现出一种特别的“懵懂”，比如说在饭桌上放动物解剖图（女主问，就说：你不是也吃吗2333）、在大家吃饭的时候打电话聊工作（溶解尸体的话题……）并且说要去尸检所吃饭、说做饭和解剖没什么区别、说尸检所里的人“いるよ。たくさん。”……（大概有戳到我奇怪的萌点吧）。（说起来尸体是用“いる”的吗！！）他看上去对于现实中的人格外的稚拙，但是其实什么都懂。我感觉他应该是这样的：一方面不考虑其他人对自己的评价（“我的专业水平和我的个人人格没有关系”），另一方面是在伙伴们面前更加放松直白地表达出自己……仔细一想他其实不考虑评价但是很在意他人的感受也很善良，会在节假日给同事替班，会原谅和安慰妹妹的朋友，会注视着反复穿越但是无法改变命运的テウタ说好好休息吧（ヘルベチカ线、好像是），会对着欺负（？）女主的ヘルベチカ在恋爱上发言。很多事情上也想得很多。大概三次元中我也会喜欢这种类型吧。附加分，他甚至会做饭！！每次看到围裙モズ我都觉得好可爱呀！（……虽然 法医围裙？？） 3. 我好雷ヘルベチカ……感觉自己被pua了……最难受的一条线……当然它这么让我难受，说明它刻画得相当立体……ヘルベチカ的自卑和自恋都让我觉得无所适从。…… 4. 留下一些值得想一想的地方不过剧本没有细写。比如说女主为了拯救闺蜜的姓名而穿越、导致一个患者只能残疾、医生降职，这种“拯救”的矛盾点；比如说リンボ坚持程序正义（？）举报了同伴；比如说ヘルベチカ的童年，在这样的环境下成长而使得他人受到伤害的孩子应该怎么被评判…… 5. 还有一些（可能我错漏了而）没有看明白的。关于女主哥哥的暗线：6年前试图（？）伤害女主但是伤害了ルカ之后挑衅アダム被アダム意外地……（导致アダム精神受创）之后交到（到底是谁啊？）モズ／トロイ那里分尸……？トロイ说自己被迫参与分尸的是谁啊？（还有为什么之前也没人查、这么无痕的吗……应该是因为network？）イリナ的案子我也不是很懂……アリケセイ的案子我也不是很懂，改头换面之类的是不是说的太超出我们的科技水平啦……Joker整一个莫名其妙（）。 大概就这些。简单记录一下了。之后就是下一本了(:з)∠)","categories":["Tavg","Sakura"]},{"title":"君于雪中祈愿","path":"/Tavg/Sakura/46b6220a.html","content":"无剧透 总评：与忘记感情的你解开宵祸之谜、共迎樱花开遍的江户春天。 标签：和风/奇幻 推荐：3/5 用时：35h（标程60h+）中长篇 虽然感觉奇虚的设定会很虐但是其实几乎没有因为缺乏感情而虐的地方 ，倒是有别的小虐点，林林总总也没到虐恋的程度（幻奏魔王 CM白石 那种程度标个虐我觉得还差不多）。 省流版：可以为了喜欢的声优冲刺，也可以纯纯地用来消磨时间（省略后句）不算惊艳但也能玩的日乙作品 篁 智成（小林裕介） 東条國孝（前野智昭） 与市（山下誠一郎&nbsp; 久賀源十郎（佐藤拓也 ） 錦次（浪川大輔 ） 桜太郎（斉藤壮馬） 女主设定不是非常讨喜。剧情设定决定女主在妖怪（宵祸）面前就是没办法有力地反击，而只能依赖于（来自血脉的）雪仪的力量（也无法自主训练）；某种程度上，她甚至没办法在面对困难的时候【相应地】提升自我，解决问题只能依靠与男主的爱和血脉。（……） 常见的案件切片再总写的结构，同CM终远七罪等等乙女游戏，是日乙非常常见的分线结构，就是在一个大反派（）的框架下面再支起来一些小反派，每个个人线去解决一个，这种结构给人的震撼力无非体现在：①玩家在不断深入真相（给出信息的“渐进”感，比如说个人线之间线索弥合） ②大反派设计的精妙（其实是剧情伏笔的精妙）（一般需要庞——大的真相才能给人更强的“恍然大悟”的感觉）。CM的生命力在小案件的生命力，终远好在庞大但基本自洽的世界框架，君雪相比来说没有哪方面特别突出…… 你也说不出哪里很不好忍受不了，（而且每个个人线剧本都看得出来很认真，没有什么敷衍的）但是它做不到那么惊艳那么震撼让你久久难忘……不过人设做得挺好的。 好感度：==篁智成==&gt;锦次&gt;樱太郎≈源十郎≈东条国孝&gt;与市 我发现我写专栏也没什么人看，但是每次分开讲角色线讲剧透篇都写得特别费劲（大概是那种能够感受到但是表达不好的类型），所以我大概以后看心情写角色线和剧透篇。（口语化的简单表达无法满足我对分析深度的要求，但是写深度分析太耗神了，超越了我对“记录”这件事的预设辛苦程度……）当然了也是因为这本游戏剧透篇也没什么特别特别的地方……","categories":["Tavg","Sakura"]},{"title":"Paradigm Paradox","path":"/Tavg/Sakura/737f7674.html","content":"无剧透篇 简评：和男高中生魔法少女一起拯救世界（？） 标签：魔法/末日(?) 推荐：3-/5 篇幅：长 背景： 外面的世界的环境已不再适合人类生存了，ユウキ自小就在拥有穹顶的基地θ内生活。原本平凡的校园生活，在一次夜禁的意外滞留时发生转变：她被一种奇异的怪兽攻击了，醒来时就已身在&lt;研究区域&gt;，被告知&lt;超能力&gt;以及解决怪兽的魔法少女小分队Blooms的存在。随着与怪兽们、以及怪兽们之中接近人类的几人接触，本以为是&lt;正義の味方&gt;的她开始对这些&lt;真相&gt;产生怀疑…… 注意： 8个人线+1大团圆线，平均不长、真相揭开速度也不快…个人感觉挺容易乏味的 一些线肉眼可见的敷衍…不敷衍的线的话，也就是差不多乙游平均偏上水平吧，没到特别惊艳的程度… 男主魔法少女化是女cv配音……而且魔法少女男主和日常男主从说话语气到人设都不一样（设定是：为了隐藏自己的身份……）我反正是很难把两个人设统一起来的（我也知道换女cv和说话语气有合理性，但是效果真的不好……） 真相展开速度慢（锁线少的游戏是这样的），不是很难猜…也不是很好玩，只能说勉强说得通 总之就是不建议为了几条达到均分的线买一整本游戏折磨自己… 剧透篇1. 简评啊啊啊我先从正义侧开始打真的觉得这个游戏还行，没有之前玩的姐妹们评价得那么差，结果从会长线开始，然后恶的正义，哇，暴雷（泪），后面细说… 2. 各角色剧情再记录+部分吐槽按攻略顺序来说吧。游戏全程拖得有点久了，有些细节不一定记得很准确… 正義ルート a. 高遠トキオ从声音到人设，感觉都很不错~（只是也没有到感动的程度啦233）在研究员父母的爱里长大（虽然现在的实际相处模式比较像科学家的交流？）好像是个普普通通的学霸（这根本不普通啊啊啊什么人啊天天不上课，老师来问他他说啊那我就全部考满分行吗）……对身边的一切好像都淡淡的，只有谈到喜欢的科学领域的时候会显得有点高兴，不过也不是那种离谱的执念的程度。似乎是个挺理性的人，女主在这条线里相比来说就有点小矫情（矛盾硬凑……而且男女主小矛盾换成那种紧张刺激bgm真的好出戏）。会在实验室里给头发夹小夹子，睡觉觉。啊那张睡醒睁眼的cg我愿给它封神（泪）真的好可爱好可爱。就是因为太牛逼了有点不亲切，要是能多写点就好了qwq结局应该也是几条个人线里写的很好的，算是差不多把产生怪兽的原因也一锅端了，可喜可贺~ b. 栖原カムイ也挺喜欢的！是那种大大咧咧的轻浮（……）学长，和学校同学们都关系很好的样子，其实是拼命地满足着大家的愿望。在学业上普普通通，看上去傻乎乎又粗糙大条，细腻地爱着自己的家人……感觉还蛮真实的~（不过有的地方真的写得有点太轻浮了吧……嗯……）傻乎乎的也好可爱，不过有时候就显得有点惨。像高远一下子就想到女主没有失去超能力可能是因为她和大家有不一样的地方而不是不喜欢，栖原就想不到……在这条线里，正义侧的管理者们的恶明明白白地展现，利用栖原对人们的爱、透支他的力量，为了他的力量不消失隔离他和女主，真的好惨，是会怀疑有没有进BE的程度。不过我真的很喜欢愿意看写亲情的乙游！感觉男女主除了爱情一无所有是很可悲的。 c. 新記ミハヤ这个我也蛮喜欢的！（差不多就说完我喜欢的三个角色了……）被工具人同学们称之为超级不亲切的存在…实际上也没觉得不亲切，后面玩了觉得和学生会长比起来简直不值一提（）就是那种普通人男高中生，没有什么离谱的才能，虽然说话不是很有礼貌……但是也不是忍受不了的程度……走近了逐渐了解到作为记者的父母与他的羁绊与最后一次的出游。父亲把防护服给他，然后他看着父母的生命流逝。 d. 間宮アユム这条感觉男女主都有点难以理解：小鸟游多管闲事（明明几乎是不认识的关系，一次又一次对间宫背后扔礼物的行为好为人师…主要是这个事情，虽然不怎么好，但是也不是非管不可的道德问题，对送礼物的人本人也没什么影响啊…。)，而且在被明确排斥之后还是不依不挠试图改变男主…；间宫冷漠于一切&lt;他人&gt;的存在、以偏执的方式守护着妹妹（背着妹妹插手妹妹的交友），对女主也是言语行为都暴力，这种焦躁甚至涉及到出任务的时候攻击毫无防备的小鸟游……两个极品……还有剧本娘是不是对什么受欢迎的男高中生人设有很大的执念啊……（汗）之后慢慢地解释了间宫家离谱的过往，不在爱而是在实验的心态中诞生的兄妹、也因而产生特殊的羁绊。アユム对妹妹以外的一切其实都是几乎冷漠的，只有妹妹是最重要的，在支线结局里，为了妹妹不踏上自己的道路、为了保留自己的超能力，对女主和对自己都残忍地做出疏离的选择。也不是对二次元攻略对象要求不能有什么关系很好的姐姐妹妹女性亲属那种狭隘的想法，只是纯粹的对这种已经存在的病态的依恋的亲情感到排斥罢了……而且对妹妹爱得病态，对女朋友大概率也是正常不到哪去（）是二次元都不愿意想象的程度。 悪の正義ルート e. 日向感觉家暴男（小声）……曾经是有点懦弱有点自卑的年轻研究员，一直被同事霸凌，在一次出任务发生危险时作为诱饵被同事无情抛弃了连求援都没喊，之后被雪波给救了……惨真的好惨啊。但是因为这个对所有人类都满心恨意是不是有点离谱啊？？还有，对人类满心恨意的你对女主90%时间友好（剩下10%是女主试图说服他动摇了他的时候，他会直接气的冒火）是怎么回事啊（那个时候你们都不熟呢……）女主也真是个圣母小天使对他不离不弃呢（……）能感觉到剧本娘想刻画他暴躁之外人妻（？）的一面，比如做饭啊打扫卫生啊什么的，可是我真的很讨厌暴力分子，把所有不满都诉诸言语和行为的暴力的都是纯纯的白痴……讲不通，洗不白，和女主的恋爱推进也不明不白，全程问号没从我头顶消失过……而且我觉得不管什么原因，最起码伤害了无辜的人就应该付出代价的（至少表达深刻歉意和补偿的意愿吧）…… f. 雪波 ：打架好好玩啊！鲨人好好玩啊！好新奇好有趣好开心！：你在看哪里？来和我一起玩呀！因为伊吹说了不能杀掉你我不会杀掉你的哦：亲友是什么？伙伴是什么？花是为什么开？：好寂寞……如果不打架的话他们会爱我吗、 ……雪波你……伊吹！你怎么教的孩子！你说句话呀！（）问题和日向差不多同理，孩子好惨，但是冷静下来以后觉得接受不能。（不过他真的长得好可爱） g. 伊吹战斗力天花板（仰望）全线的目标就是让伊吹对人类有归属感，然后伊吹就会放弃把所有人类都变成怪兽。因为女主是被他认同的、某种意义上的同类，所以她的话他都会很认真地听……女主就这样莫名其妙的背负上了从伊吹手里拯救人类的任务（）好危险的男的（擦汗）应该是魔法少女化以后声音风格最一致的，这一点超喜欢！（女主每一条线都要问一次伊吹和魔法少女伊吹是不是同一个人觉得有点无聊了……）不得不说，恶侧的所有感情线的剧本水平几乎都可以称之为*……伊吹也差不多。……或者说我觉得女主和这几个根本就还没有机会产生什么那么亲密的感情啊…… h. 冨司リョウ神秘主义，空降外敌，莫名其妙，莫名其妙，莫名其妙，莫名其妙，毫无铺垫，毫无铺垫，毫无铺垫，毫无铺垫，你…不想写可以不写的。 3. 总评a. 虽然有很多不错的角色设计，作为乙女游戏写不好情感发展是硬伤啊…… b. 虽然有新奇而且还算自洽的世界观，分了9条线讲每次女主都要重新认识一遍真相，推进速度慢而且冗长（就是说，即使是乙女游戏也没有必要把它的所有男角色都设置成可攻略？也不一定参与大事的都非得是男角色？） c. 非常吸引人的魔法少女化是大萌点也是大雷点，不仅是男高们变成魔法少女以后cv变了语气和人设也会跟着变，造成的是无法忽视的割裂感 d. 一些可能无关的讨论：先不考虑怎么做基因实验能把人变成怪兽……（真的很诡异，我觉得唯一能合理解释的角度应该是发现有些动物变异然后用那些动物基因改造人体产生有代价的超能力，而且你们这些个超能力跨度也太离谱了吧，女性化好像是衣服一起变可是这个衣服又可以拆卸（见会长支线结局）我就是不是很理解……明明是魔法就不要跟我谈科学了.jpg） 如果没有几乎自我意识和思考的怪兽是人变的，那应该怎么对待他们啊……我觉得剧本娘自己都没把事情想明白就匆匆地把疑问又转移给我们。……为了更容易理解，就说人类变成豪猪吧（）——，然后像伊波和女主这种特例呢，他们就是很好地在人类和怪兽之间的存在，犹豫啊犹豫啊，人变成豪猪是人的错误啊我们怎么能伤害豪猪…… 我：……我要是变成豪猪你还是当我死了吧.jpg可以看到剧本娘一直希望表达怪兽有一些情感来发挥她极强的同情心同理心，恶侧不断地强调：怪兽们也有感情哦~它们和谐的生活着~……但是一旦把怪兽用我们更熟悉的一些没有理性、只有本能的动物去替换，就会觉得整个故事的逻辑怎么看都有点怪异…… 其实就是说，只要你这个怪兽它是没有自我意识的，它差不多就是我们人类视角下类似什么牲畜啊之类的东西，我们吃猪牛羊肉的时候也不想这么多啊。 而且还有一个问题，影响到伊波理想的&lt;豪猪们和和美美地在被污染的土地上平静生活&gt;的画面你这怪兽，它能不能繁殖啊？（……） 附一张大团圆CG","categories":["Tavg","Sakura"]},{"title":"僕と彼の危険な同居生活","path":"/Tavg/Rose/79b50c37.html","content":"无剧透篇 简评：白莲花男主的异国历险记！ 标签：现代/黑道(?) 推荐：2/5 篇幅：极短篇（6h） 背景： 努力通过了考试，前往美国留学的日向，刚踏上异国的土地就接二连三地遇上坏事。提前联系好要租的房子只是泡影，去了学校报到却发现自己的名额早被别人注册，顶着自己名字的不明黑发男生招摇地和同学们嬉闹。——该怎么办才好？ 注意： 非全配音！只有少量的关键剧情有配音，绝大多数都是哼哼唧唧+そうだ+わがった+ごめんなさい…（已经听麻了…） 不打折不要买！打折了也最好不要买（）剧情比较平淡和俗套，感觉不值得 NE比较麻烦，建议是NE的tag全选、在最后的分叉点存档，懒得点的姐妹可以私信我直接要走全CG图包 （参考全通攻略（cv17343293 @谷和合盒） 确保先推亚连再推查德线ww 剧透篇 本着买都买了打了算了、打都打了打完算了的想法硬着头皮打完了，只能说……嗯……（什么作品都能汉化吗）了解到这个还是看到阿b姐妹的实况有点好奇，结果实际玩下来体验相当糟糕，好在没有全配音但是有中字让我可以毫不顾忌的一直点点点快速把它看完。下面尽可能地解释一下我的感受。 各角色 亚连： 从校门口捡到了手足无措的日向，然后就试着帮他调查整个事件，中间碰到他哥哥对亚连纠缠不休（……），自然而然地发现了哥哥和事件的牵扯，最后在家族组织传统的和哥哥打一架中结束。 故事还是比较完整的，也挺简单的……虽然剧本极力暗示亚连有残忍的一面，说亚连捡各种人回合租房替他挡灾，但是实在是看不出来，感觉就是写了一个挺温柔挺普通的一个会打架的人（……），说不上立体…… 查德： 应该是剧本刻画的最用心的角色了（）在各条线都不断地强调他身为愉快犯的存在……大概意思就是：很牛逼想要做什么都能做到！在各种危机面前都游刃有余、对一切情况都胸有成竹！只是想做有趣的事情！（） 其实单这么讲感觉挺虚浮的，因为想有理有据地刻画一个这样的角色其实难度很大，靠这点单薄的剧情很难让人信服……还是有点标签大于事实的感觉。 有姐妹说到皇树、、啊、、感觉和皇树有那么点共通吧，可能是剧本娘xp，但是这个根本就没有皇树写的细也没那么有张力啊（悲）虽然感觉查德有点那么pua的意思，但是因为剧情也好角色也好都写得太单薄了、、何も感じないよ…… 布莱德： 可能算三个人里感觉比较亲切的（）前面一个是杀手组织继承人，一个是聪明绝顶玩世不恭的愉快犯，这位就算是个什么……虽然是混混但是是个温柔有良知的混混，因为悲惨的家庭被迫加入黑帮。应该算描绘的背景最完整的，因为亚连不知道和哥哥到底有什么羁绊（剧本娘多写两段插叙很难吗？……），查德根本就不知道来头……但是想来想去也很奇怪，黑帮之所以是黑帮难道就是干点温柔的事情吗（）没有感觉到符合身份的角色特质……可以像左马刻讲讲明白也很好啊（） 日向： 我的天我今年20岁为什么还在看我10岁刚开始看言情小说的时候能看到的小白花女主角形象……一边玩一边叹气，十次叹气五次是为你，我的圣母男主，就不提明明是男孩子但是完全没有表现出男孩子特质（换个性别真的毫无问题……）还反复在一些情境下说“可是我是男的呀~”之类的下头话（），在性命刚被威胁完的情况阻止布莱德掰断对方拿刀的手（…），明明什么都做不到却什么都想拯救只会成为对别人的道德绑架啊……看得好痛苦…… 一句话就是在刻画角色方面还是有硬伤，主要是在强行附加一些标签，没有达到让人共情的程度，看完两个小时剧情还是对人物没什么概念，剧本娘也很吝啬于讲述人物的性格细节，处处透露着漫不经心（）。 索然无味的白开水和可能有缺陷的鸡尾酒，选哪个？ 本来想尽可能客观和冷静但是一旦碰到键盘我还是觉得好生气，可是过两天可能我就根本不想提这一部了，所以趁着还想写赶紧骂完（）。 本作就可以说是白开水了，我好久没有打到这么索然无味的作品了，在像白开水一样无聊的剧情的基础上是单薄的攻略对象和始终一副无辜的惨状的小白花男主，（泪），只能说CG还算好看、为数不多的配音也蛮好听。相比来说，同班底的女王蜂在人物刻画上做的要显著好很多，（虽然也有很多很多不满意的地方x），尤其是两个女主角，都很有各自的特点，剧情虽然有很多地方经不起多想但是至少不会让人觉得没兴趣往下玩啊，甚至细细推敲还有点对动物性的思考的意思。 真的好生气！赶紧去玩下一部了！（qwq","categories":["Tavg","Rose"]},{"title":"Syncthing的ignore忽略规则配置说明","path":"/Engineer/850c9066.html","content":"群晖 #Syncthing * https://blog.csdn.net/XiaoXiao_RenHe/article/details/114283983Syncthing服务器间文件同步时，若根目录下子目录或文件不想同步时，可以配置忽略规则。 如下截图，表示根目录/Apache下所有名称为temp、glowroot的文件夹不进行同步。 说明： 0、匹配规则仅仅是如何匹配，若要匹配文件夹/目录/子目录时，忽略模式中最后不能写/，写了/的表示匹配目录下的子目录/文件。 **请注意，以斜杠结尾的目录模式some/directory/与目录内容匹配，但与目录本身不匹配。如果希望模式与目录及其内容匹配，请确保模式末尾没有/。** 1、配置忽略模式时， 忽略规则都是基于文件根目录的 ，根目录如下图所示： 2、以 // 开始的行，表示该行是 注释 ，不是忽略规则。 3、 文件夹/目录名称 （如temp）匹配——忽略根目录下所有该文件夹/目录/子目录，即服务器间同步时，配置的该文件夹/目录（temp）不进行同步。 4、***** 匹配符——匹配 任意个字符，但不包含目录分隔符 \\ ，如te*p，可以匹配temp、teatop、tep等，但不匹配templete\\pool。 5、** 匹配符——匹配任意个字符，且包含目录分隔符 \\ 。 6、？ 匹配符—— 一个？匹配一个字符，且不包含目录分隔符 \\ 。 7、 [ ] 匹配符—— 一个[ ]匹配一个区间内的字符， 如[a-c]，即这个字符可以是a或b或c。 8、 {} 匹配符——匹配{}中以逗号分隔的一个内容，如{banana,pineapple}，即可以匹配到banana或pineapple。 9、 \\ 转义符 ——特殊符号（如：、/ 、\\、、？、[、]、{、}），匹配规则需要特殊匹配时，可以使用到转义符，如\\&#123;banana\\&#125;可以匹配到&#123;banana&#125; ，当前windows系统不支持。 10、 /Apache ——只在根目录下匹配，即Apache若为子目录，则匹配不到。 11、 #include more-patterns.txt ——可以引用外部的规则文件，但是模式本身仍然是相对于文件夹根目录的，且文件不存在或重复引用会报错。 12、 ！ 匹配符——即大规则下某些文件夹/目录/文件需要同步，！时需要强制扫描整个目录树，但！/Apache不会强制扫描整个目录树。 13、 (?i) 匹配符——即后面的内容不区分大小写来进行匹配。 14、 (?d) 匹配符——即删除文件夹/目录时，若文件夹/目录下有被组织删除的文件，可以使用该前缀，表示可被允许删除的文件。 注意：(?d)(?i)可以部分前后进行匹配。","categories":["Engineer"]},{"title":"RaiDrive 实现挂载阿里云盘到本地 并且 开机自启动","path":"/Engineer/c2b8d766.html","content":"link 前言 关于挂载阿里云盘到本地网络上有很多种办法，大同小异，这里只是自己推荐一种办法。此办法是利用 RaiDrive 和 webdav-aliyundriver 在将其安装到服务中，进行开机自启动，并不会感受到任何弹窗情况。个人使用阿里网盘体验感觉还行，百兆移动宽带，直接播放百兆视频也就缓冲一会就可以播放 第一步：准备软件 首先我们要准备三款软件，作者已经打包基本配置好，方便直接下载。 点击软件包 并 解压 可跳过 2、3、4 步骤。==此处进行下载==软件包中包含内容如下 webdav-aliyundriver-2.4.2.exe 对应是 WinSWwebdav-aliyundriver-2.4.2.xml 对应是 WinSW 的配置文件webdav-aliyundriver-2.4.2.jar 对应是 webdav-aliyundriver这里为了大家使用方便，所以提前修改好了名称raidrive-2021-10-9.exe 直接双击安装好后，即可删除掉安装包，其余不可删除 ​ RaiDrive 点这里进如官网下载最新版本安装即可 webdav-aliyundriver 点这里进如Github 下载最新版本安装即可 WinSW 点这里进如Github 下载最新版本安装即可 第二步：安装软件 如果下载了作者准备的软件包可跳过 本小节的 步骤二 安装配置 webdav-aliyundriver 和 WinSW ，直接到 第三步：配置和启动 1、RaiDrive 安装 双击选着语言和安装目录，直接安装即可。 2、安装配置 webdav-aliyundriver 和 WinSW 在任意目录创建一个文件夹，这里在D盘创建名为 aliyundriver 文件夹做演示 将下载的 webdav-aliyundriver 和 WinSW 放到 aliyundriver 目录中，如图所示： webdav-aliyundriver 是 jar文件WinSW 是 exe 可执行文件这里如图所示，将两个文件的名称修改保持一致 ​ 第三步：配置和启动 如果使用软件包，修改软件包中 webdav-aliyundriver-2.4.2.xml 文件修改 —aliyundrive.refresh-token 的值 即可，token 获取办法看 本小节的 获取阿里云盘自己账号的 refreshToken 1、获取阿里云盘自己账号的refreshToken 点此处 登录 阿里云盘 账号 登录成功后，按F12 打开 开发者人员工具 按照如图 所示 找到 token 将 自己的 refreshToken 值复制下来 2、创建和配置xml (如果使用软件包，无需操作此步) 在 自己创建的 aliyundriver 目录中，创建 和其它文件名称相同的文件，打开后将下方的代码复制到文件中并修改 —aliyundrive.refresh-token 的值 即可 &lt;service&gt; &lt;!-- ID of the service. It should be unique across the Windows system--&gt; &lt;id&gt;webdav-aliyundriver&lt;/id&gt; &lt;!-- Display name of the service --&gt; &lt;name&gt;webdav-aliyundriver&lt;/name&gt; &lt;!-- Service description --&gt; &lt;description&gt;webdav-aliyundriver&lt;/description&gt; &lt;!-- Path to the executable, which should be started --&gt; &lt;executable&gt;java&lt;/executable&gt; &lt;!-- aliyundrive.refresh-token 填写TOKEN server.port 填写端口 这里出于避免与其它服务冲突将其默认8080修改为8181，当然你也可以修改成自己的端口 --&gt; &lt;arguments&gt;-jar webdav-aliyundriver-2.4.2.jar --aliyundrive.refresh-token=&quot;填写TOKEN&quot; --server.port=&quot;8181&quot; --aliyundrive.auth.enable=true --aliyundrive.auth.user-name=&quot;admin&quot; --aliyundrive.auth.password=&quot;admin&quot;&lt;/arguments&gt; &lt;!-- OPTION: onfailure Defines a sequence of actions, which should be performed if the managed executable fails. Supported actions: restart, reboot, none --&gt; &lt;onfailure action=&quot;restart&quot; delay=&quot;10 sec&quot;/&gt; &lt;onfailure action=&quot;restart&quot; delay=&quot;20 sec&quot;/&gt; &lt;!-- OPTION: resetfailure Time, after which the Windows service resets the failure status. Default value: 1 day --&gt; &lt;resetfailure&gt;1 hour&lt;/resetfailure&gt; &lt;!-- OPTION: priority Desired process priority. Possible values: Normal, Idle, High, RealTime, BelowNormal, AboveNormal Default value: Normal --&gt; &lt;priority&gt;Normal&lt;/priority&gt; &lt;!-- OPTION: stoptimeout Time to wait for the service to gracefully shutdown the executable before we forcibly kill it Default value: 15 seconds --&gt; &lt;stoptimeout&gt;15 sec&lt;/stoptimeout&gt; &lt;!-- OPTION: stopparentprocessfirst If set, WinSW will terminate the parent process before stopping the children. Default value: false --&gt; &lt;stopparentprocessfirst&gt;false&lt;/stopparentprocessfirst&gt; &lt;!-- OPTION: startmode Defines start mode of the service. Supported modes: Automatic, Manual, Boot, System (latter ones are supported for driver services only) Default mode: Automatic --&gt; &lt;startmode&gt;Automatic&lt;/startmode&gt; &lt;waithint&gt;15 sec&lt;/waithint&gt; &lt;sleeptime&gt;1 sec&lt;/sleeptime&gt; &lt;log mode=&quot;roll-by-size&quot;&gt; &lt;sizeThreshold&gt;10240&lt;/sizeThreshold&gt; &lt;keepFiles&gt;8&lt;/keepFiles&gt; &lt;/log&gt;&lt;/service&gt;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869 3、安装服务并启动 以管理员方式 打开 命令行窗口 ​ 使用 cd 命令 进入 自己创建的 aliyundriver 目录 或者 进入下载的软件包 解压后 放置的位置，比如这里是放到D盘下 D:\\Program Files\\aliyundriver 目录中 确保是以管理方式进入后，执行如下命令： webdav-aliyundriver-2.4.2 此处切记要和你修改的名称一致 webdav-aliyundriver-2.4.2.exe install1 这里已经执行过一次，所以提示已经存在，首次安装会提示安装成功 然后执行如下命令启动服务 net start webdav-aliyundriver1 ​ 4、启动 RaiDrive 连接 挂载阿里云盘到本地 1、打开 RaiDrive 软件，点击添加 ​ 2、 根据如图所示，勾选配置 账号和密码 都是 admin8181 是端口地址后面的 选项要去掉，否则会失败盘符 和 名称 根据自己喜好选择和填写 最后配置好后，点击连接，既可完成，后续开机启动也会自动连接上 如果哪天不想用了，想卸载了，直接卸载 RaiDrive 软件 在使用命令 卸载 服务 webdav-aliyundriver-2.4.2.exe uninstall 停止服务 webdav-aliyundriver-2.4.2.exe stop","categories":["Engineer"]},{"title":"二次元“纸片人”与青年亚文化","path":"/Private/6bd4f70b.html","content":"摘要现象描述青年亚文化概述“纸片人”定义“纸片人”与青年网络亚文化的关系纸片人衍生的青年亚文化案例分析虚拟歌手文化圈 虚拟歌手，是指在电脑上用歌声合成软件制作，并赋予虚拟二次元形象的歌手，属于虚拟偶像中的一大类。 在虚拟歌手圈，一首歌曲（通常以视频形式发布）的背后除了编作曲、作词、混音、画师和pv师的工作，还有“调教师”的工作，即使用虚拟歌手软件合成歌声。 一方面，虚拟歌手得以歌唱的基础源于其作为软件的本质，这类软件包含合成引擎（编辑库）与音源库（人声数据）两部分，能够经过编辑后合成人声，发源于YAMAHA旗下的Vocaloid（知名代表如初音未来等），现有技术中如Synthesizer、Cevio等引擎已支持AI声库，可以合成极其接近人声的歌声。另一方面，虚拟歌手又具有“偶像性”，拥有二次元形象、一定的人物设定，也由此拥有“粉丝”，与普通的软件并不相同（通常而言，技术性软件不会拥有这样的特性）。如下图所示，其粉丝将这一软件合成的歌声来源视为“偶像”来看待。 初音未来-世界第一公主殿下（Youtube.2010） 刚从生日会回来，“万分之一的光”，多好的寓意啊，天依是我们温暖而璀璨的光，而我们也是她生命的光束一个个万分之一。因为，天依与普通人有最大的区别：明星没了爱他们的人，他们还有自己的生活；学者没了追随他们的子弟，他们还有热爱的学术；平凡人没了所有人，他们至少还有自己独一无二而璀璨的余生。但是，天依没了爱她的人，被众人淡忘，她就被永远遗忘了，彻彻底底从这个世界消失，一如从未存在过。所以，从某种意义上讲，我们千千万万，甚至更多人，铸成了天依生命的光束，我们是她生命的重要的一部分，是她万分之一的光，天依，因我们而存在。请用真心去爱天依吧，至少，别让这个善良的女孩消失。回首八年，往昔共度坎坷，唯初心依然，前路迢迢，道阻且长，愿我们都成为彼此的永恒，8字符，是天依给我们的誓言，是我们对天依的承诺，一同携手，不离不弃，直到永远，通向∞。 万分之一的光（bilibili.2020）BMHL丶梵墨的评论 2020年5月2日，国内虚拟歌手圈大规模社团“平行四界”领导者Ddickky更换旧曲原唱（圈内成为“本家”，即首发时的指定原唱）引发争议，被认为“模糊歌曲成就与歌姬成就”，而Ddickky回应称“歌姬的本质是乐器，无所谓成就”进一步引发众怒。其中不难看出歌姬作为“纸片人”偶像的特殊之处与以歌姬为中心形成的特殊的青年亚文化圈。 虚拟主播文化 虚拟主播（也称Vtuber、管人）通常指由个人（个人势Vtuber）或团队（公司势Vtuber）制作人物形象和人格设定，其二次元形象（多为3D或Live2D模型）由动捕技术进行控制、由真人配音，在视频网站、社交网站上进行直播和活动。为了增强其人物设定的真实感，配音人（也称中之人）通常是不公开的。 虚拟主播文化圈中粉丝对偶像的情感粘性极高，如知名Vtuber、乐华集团旗下A-soul团体的嘉然（bilibili-嘉然今天吃什么）粉丝所作《嘉然小姐的狗》中描述的现象在圈内并不罕见。 彩虹社Vtuber-Shoto第一次B限直播的录屏中的弹幕（bilibili） 在圈内，开盒是对Vtuber的大忌。从A-soul开盒事件中圈内的反馈也能注意到，虚拟主播更接近于“纸片人”而非真人偶像。事实上，虚拟主播与传统主播之间的最大差异即为虚拟性，而一旦“开盒”，虚拟主播的“虚拟性”就不复存在，其人设的虚假被坦白，破坏了观众对“纸片人”的幻想。 ACGN角色文化 各类游戏（尤指二次元游戏）、动漫、小说等刻画的角色也常受到特别的关注，形成同人文化圈、谷圈等衍生亚文化。 在开放世界游戏“原神”的官方同人社区“米游社”，几乎随时都能看到各类角色的人设分析、剧情品鉴以及同人创作的图像和小说，评论区也常常充满对“纸片人”们爱的诉说。这种“爱的诉说”，在各类ACGN文化中与“纸片人”相关之处，几乎随处可见。 这样对“纸片人”的爱也常催生很强的消费欲望，因而诞生了“谷圈”等文化（“谷”指角色的官方周边，官方可因粉丝购买“谷”而获得收入）。下图所示为粉丝个人对动漫《文豪野犬》角色中原中也与日本乙女游戏《虔诚之花的晚钟》角色Nicola的“谷子”美化展示。这种“谷美”背后的消费是可观的，不过在“谷圈”是并不罕见的。 调研结果及其分析调研结果 问卷预计涉及： 纸片人来源？ 纸片人喜欢的原因？ 纸片人更迭速度？ 是否会参与同人创作和浏览？是否在同人圈中参与社交活动？ 吃谷量？纸片人→游戏氪金？ 纸片人对学习生活的影响？ 调研分析什么是当代青年喜欢的“纸片人” 人设不止是立绘 很多人都有个认知误区，以为二次元就是立绘好看能舔就行，有欧派、有胖次、有御姐、有萝莉、有病娇…，给角色随手编个身高、体重、三围、爱好就是二次元了？不是的。 立体的人设不仅仅是一纸人物传记，它可以来源于很多东西，比如说《阴阳师》的玉藻前这个角色。在他推出的时候，配合了一小段高质量CG短片+6格漫画故事绘卷+故事关联到晴明的生母葛叶，关联到一众阴阳师+推出了一个新的封魔之时的BOSS胧车（故事里是玉藻前的小弟，胧车也有自己的故事）……通过一系列不同的表现手法去丰满整个角色在不同视角下的形象，最终使角色变得立体，观众\\玩家才会对它有爱。 立体的人设还在于“不脸谱化”，新生代的二次元用户特别喜欢讲个性，喜欢讲与众不同、我就是我，喜欢叛逆，喜欢塑造不寻常的、有点亦正亦邪的角色，喜欢塑造人物在面对抉择时的内心纠结，喜欢看到人物“追寻内心选择”时的思考过程。 二次元的人设讲究的是想象空间，想象空间需要有足够多的信息去支撑，玩家才能建立起想象的。它还需要你搭建角色与角色之间的关联性，所以错综复杂，柳暗花明的​人物关系也是二次元玩家乐此不彼的玩点。（一个反例就是，过于清晰明朗的人物关系，并不符合二次元玩家对角色的想象需求。） 想象空间是在立体的人设上，又不把事情说得太过清楚明白，留有余地，让观众\\玩家有想象的空间，比如说：玉藻前为什么一再帮助晴明，但却又要火烧京都，与晴明为敌？这个问题也许跟她与葛叶（晴明生母）之间的关系有所关联，她们既同为妖狐，又是红颜知己，但还有没有别的关系呢？玉藻前对晴明的真实态度是什么呢？晴明知不知道玉藻前与他生母之间的事情呢？一系列问题，在故事里并没有交待清楚，但它带出的信息很自然会让观众\\玩家产生这些疑问，这就是二次元。 “纸片人”对当代青年的意义 情感支撑/社交满足/时间消磨/… “纸片人”与青年的联系在青年网络亚文化的表现 参考 积极性、动态性、多样性… （2）多样性： 兴趣多样决定亚文化的多样。从调研的结果可以看出，B站中的每一个分区都有至少13.46%的青年经常使用，而这些分区涵盖多个领域。每个人都有自己小众的兴趣爱好，因此每个人都会是亚文化的一部分。像电子产品爱好者，会关注影视飓风这样的科普型up主，然后嘉心糖？，而这个也正是大家喜欢的up众多的原因所在，体现的便是一种亚文化。大家可以关注自己喜欢的领域，形成自己的小圈子，每个人的圈子有交集而又不同。慢慢的，有着小众爱好的聚集在了一起，就形成了亚文化。而b站则是这些亚文化的媒介，给这些小众爱好者提供了相识与交流的可能。 （3）积极性： 从青年亚文化传统的定义以及概念来看，它往往指的是比较消极叛逆的文化与青年心理。但是从大家在B站上关注的up主来看，B站上的亚文化普遍都是积极向上的，体现了青年对社会现象的思考，对国际关系的认识，对美好生活的向往等等，实则是与主流文化本质相通，只不过是另外一种表达。而B站作为媒介，其适当的引导与规范也是形成这种积极亚文化的原因之一。 （4）动态性： 没有永远的亚文化，也没有永远的主流文化。随着时间的流逝，主流文化也可能发展成亚文化，亚文化也会有一天成为主流。像外交部发言人办公室这样主流官方的部门，也会入驻B站，表明了B站的影响力，更体现了对青年亚文化的认可。随着事件的推逝，如今的青年亚文化的精华会逐渐走向主流，同时也会有更多新的亚文化萌生。青年亚文化会成为时代文化的一个重要来源。 成因探讨“纸片人”自身的积极精神效果ACGN文化影响同人文化（同好者之间的社交）文化分析 （一）青年亚文化的产生 青年亚文化最初产生于青年对社会规则、制度特别是成年人对他们的压制的不满，即表现为代际矛盾；而从意识形态的角度来看，青年亚文化常常表现出对统治阶级霸权的反抗。青年亚文化群体对主流社会的反抗主要表现为：制造出仅仅属于自己的文化符号，由此来营造一个属于自己的文化空间，以表示自我认同与主流文化的区隔。这种空间和区隔的建立也可以说是对于主流文化的仪式性和风格化的抵抗。[5]但是互联网时代塑造的被消费主义深度捆绑的网络市场、以兴趣为中心的网络圈层、以价值多元为特点的网络文化、以全民参与为基本格局的网络主体、以视觉符号为主要形式的网络传播，为青年亚文化的深刻变迁提供了丰沃土壤[6]。 （二）青年亚文化的形态变迁 1、从反抗对立到去中心化的演变。传统亚文化理论认为，抵抗性是亚文化与生俱来的特性，挑战主流文化是亚文化建立认同、形成黏性的必要途径。例如，芝加哥学派将建构亚文化视为边缘青年为了反抗主导体系、追求存在意义而采取的“越轨”行为。但是在网络时代，信息的扁平化、即时性、碎片性特点，弱化了亚文化持续性、结构化抵抗主流文化的能力。因此如今的青年亚文化往往只将“不随大流”的信条融入日常表达与文化消费之中，把叛逆的情绪包裹在揶揄嘲讽、半娱乐化的表达方式之中，而很少对主流文化采取反抗对立的姿态。 2、从身份圈层到兴趣圈层的转变。寻找身份归属是贯穿整个青年成长阶段的重要动力源，也是青年亚文化圈层结构的主要边界。而我国“Z世代”感兴趣的文化风格不追求现实针对性强的意识形态表达，而渴望通过独特的趣味以确立“自我”。关于这一点，B站的不同文化分区便是很好的证明。B站的每一个分区，例如二次元、音乐、鬼畜等，都是一个小众文化圈层。同时，众多青年人也因为兴趣而聚集在一起。由此，以“我是谁”为中心的亚文化身份圈层，逐渐演变为以“我喜欢什么”为中心。 3、从小众参与到大众卷入的演变。传统亚文化往往以“小众”“非主流”的形态保持着与社会大众的距离。而当身份圈层逐渐演变为兴趣圈层，青年亚文化的主体也由小众向大众演变。 4、从价值传递到情绪传导的演变。早期亚文化是青年抵抗性运动由社会向文化领域的延伸，承载着价值传递的功能。而在后现代社会中，相比于价值观的认同，情感共鸣俨然已成为首要的社交需要，因为它代表着“人类互动的最高复杂性”。共享的情感已成为网络亚文化圈层联结的重要纽带[6]。以B站的“弹幕亚文化”为例，密密麻麻的弹幕营造了强烈的“共时性”体验，观众得以跨越时空获得情感共鸣。例如，“爷青回”常用于表达某一代人共同的回忆；“白嫖失败”常用于表达对UP主制作的视频质量的高度认可。“泪目”等则常用于表达感动的情感。这些都是亚文化圈层情绪传导的体现。 （三）青年亚文化的治理 近年来，青年亚文化在网络社会的助推下，不断呈现出与主流文化相融合的趋势，正如上述提及的青年亚文化的形态的变迁。而这种对于主流文化的反抗能力的弱化，将有利于主流社会对青年亚文化的引导和治理。同时，青年亚文化叛逆、破坏的色彩也正在逐渐减弱，正向的、积极的亚文化内容则逐渐显现出来，只要对之加以正确的引导和治理，我相信青年亚文化也会对青年的身心发展起到很大的正面作用。 总结与展望 ‍","tags":["Homework"],"categories":["Private"]},{"title":"科学技术使人变强还是变弱？","path":"/Homework/ee42f67c.html","content":"#0 引入 P1 我们今天的话题是：科学技术使人变强还是变弱？就让我们从这个问题自身说起。 P2 我们习惯于把科学和技术连在一起，统称为科学技术，简称科技。科学解决理论问题，技术解决实际问题。科学要解决的问题，是发现自然界中确凿的事实与现象之间的关系，并建立理论把事实与现象联系起来；技术的任务则是把科学的成果应用到实际问题中去。在我看来，这就是从0-0.5和0.5-1的过程。 P3 在这一过程中，与我们联系最频繁和密切的即是科技的产物，科技产品。很多科技产品的出现都离不开人类对于更好生活与工作的需求，但又是什么会让我们提出“科技让人变强还是变弱”的问题呢？ 对于这个问题，可能我们中的大多数人都不会在科技的总体价值权衡上有所疑惑，应该不太需要思考就能回答出“科技是好东西，只看人怎么用”这样笼统又正确的答案。但是，比起这个答案，或许我们考虑这个问题的过程更重要。 #0.5 科技对人类的影响与时代背景有关 P4 退一步讲，这个问题的立足点在哪里？ 如果认为石器和青铜器等是一种科技，古人会提出“科技让人变强还是变弱”的疑问吗？ 那么，对于印刷术、指南针，对于纺纱机、蒸汽机，那个时代的人们也会问出同样一个问题吗？ 又或者，即使人们曾经怀疑过这个问题，也可能与我们现在所怀疑的强度和内容并不完全相同吧？ 我们的科技绝不可能是在退步，也并非因为科技的退步而这样不安，反倒不如说，这个问题是在科技相当进步的程度下才能提出的，而至于这一点，我们慢慢来回答。 P5 #1 科技产物是人类的智慧与美好愿望的结晶 P6 正如先前所说，许多科技产物都是创造者怀着让生活变得更美好的愿望孕育而生的，事实上，我们也一直都在享用着前辈为我们留下的珍贵成果，理所当然般自得其乐地享受着“先进的生活”。 很早以前，大自然中弱小的人类，因为习得了制造和使用工具的能力，才逐渐在毫不留情的自然法则中渐渐获得规则之外的主导权。他们那时的许多科技在现在的我们看来确实是弱小的，然而在那时的他们看来是强大的、不可替代的，是他们肢体的延伸，是他们得以生存和生活的必不可缺的要素。 在今天，几乎毫无争议的积极案例也仍是接连不断的。在此不妨浅举几例。 P7 智能诊疗 医疗影像学的运用极大的保障了人们的身体健康水平。自从 1895 年人类摄得第一张 X 光射线后，我们对医学有了跨越式的认知：可以在体外对病人体内进行深入的观察和判断。今天我们已经有 CT、磁共振、DSA 等技术进行诊断，帮助医生快速定位病灶，明晰病情，方便进行下一步的医治。 P8 “明察”仅是开始，科技如今已经可以指导医生决策。智能诊疗就是人工智能技术在疾病诊疗中的应用，是计算机通过“学习”相关的专业知识，模拟医生的思维和诊断推理，从而给出可靠诊断和治疗方案。 高铁与互联网：现实世界与虚拟世界的高速公路 P9 科技的进步也给我们带来了新的交通方式。在中国高铁诞生的几十年来，高铁里程数飞速增长，全国铁路交通四通八达，方便快捷。2018 年，高铁已经运输了占 60% 的铁路旅客，天涯若比邻，已经不再是古人诗词中的浪漫幻想。 P10 如果说现代运输方式缩短了人们的物理距离，而互联网是将人们的思维和万物紧密相连。互联网始于1969年美国的阿帕网，将计算机网络互相联接在一起，由此基础上发展出覆盖全世界的全球性的网络——互联网。互联网已经深入千家万户，是当今社会不可或缺的部分，我们能够在网上共聚一堂，学习知识，也是互联网给予我们的利好。 P11 生活在这样的环境里，即使不提我们自幼接受的“科教兴国”教育，也不难明白我们对发展科技会带来美好未来的无端信任，把这样的恐慌称之为“因噎废食”。 但是有时候人们也容易会忽略话题里的另一个对象，。即使我们能够找出很多像上面几例那样几乎毫无争议的积极案例，好的科技产物，有时并不会让人变得更好，强大的科技产物也不一定让人变得更强。 #2 强大的科技产物未必让人强大 P12 科技的发展很大程度地改变了人们的生活方式，但并不全是从积极的意义上。即使不提一些无法跟上时代进步的速度而感到痛苦的失业者，从长远来看人类也是在被科技产物改造着，或好或坏。 P13 依赖综合征：部分能力的退化 以借助科技产物代替某些能力的使用的同时，那些能力也逐渐退化了，由此产生的一个或许有点严重的问题，即是科技依赖综合征。 过度依赖搜索引擎 在今天，通过搜索引擎我们能够轻而易举地获取各种问题的答案。我们也逐渐把因特网看作自己记忆的一部分，比起记忆信息的内容本身，更容易记住找到信息的方法。这或许体现出，人的记忆力正在逐渐被削弱。 P14 感官依赖 人类有着与生俱来与母亲产生亲密依恋的需要，它对今后与他人建立亲密关系的能力有着重要影响。现在，我们也许可以不通过触碰真实的人就轻易获得这种接触安慰，如果感觉可以被较好地模拟，那么真实的拥抱似乎就没有那么重要了。 P15 表达依赖 社交软件让我们越来越依赖于丰富的语言文字表达方式，而忽略了非语言表达的方式。在社交媒体上，平日里一个眼神，一个手势所产生的效果远不及一个酷炫的表情包。但面部表情、姿态表情、语调表情却是我们沟通过程中重要的非言语表达形式。 然而，由于社交软件的普及，我们这种费时费力的非言语沟通习惯的实操机会似乎越开越少，折射到现实上就变成了我们常说的“网络社牛，现实社恐”，对社交媒体特有表达方式的依赖导致在现实生活中不知道如何面对他人。 P16 泛娱乐化 人本身就是向往着快乐的事物的，而新的科技带来了更多廉价简单的娱乐手段，这些手段容易使得人们沉溺其中，改变人们“快乐”的定义。 碎片式的娱乐降低了人们集中注意力的能力 早有论文写到，人们 2000 年的注意力持续时间为 12 秒，2013 年降至 8 秒。其实不需要研究数据支撑，我们集中注意力的能力的弱化是能够感知到的。短视频、有声小说等等快节奏的娱乐方式将我们的生活碎片变得充实，有时也把完整的生活变得碎片化，静下心阅读一本纸质书相比于阅读手机上的微信推文而言或许更加困难。 P17 高度娱乐化的事物或许也有高度的成瘾性 霍金教授曾说过：“人类有自我毁灭的风险。” 科技的进步能带来美好的生活，但科技的进步也会带来巨大风险。人类发展科技的同时，科技也在某种程度上开始“控制”人类，大数据推送的视频软件将人们牢牢吸引在手机屏幕前，微信中蹦出的消息让我们将时间大把浪费在无谓的回复和水群上。 正如《娱乐至死》中所警示的那样，我们或许很容易被快感所控制和支配，而失去人之为人的自主性，成为快感的奴隶；如果被这样支配，我们人类应该是“变弱”了。 这些症状或许是我们变“弱”的少数表现，也可能是前奏中的几个音符。 P18 #3 更强大的科技产物让“我”恐惧、让“我”不安、让“我”怀疑“我” 现代人对于科学技术使人变强还是变弱的疑问绝不仅限于以上的内容，而更与新的、强大的科学技术——深度学习——相关。 P19 说到深度学习，又恰好是在这个时间，很容易想起某个最近在国内社交网站上成为热点的科技话题，那就是 AI 画图技术。简单几个 tag，也可以再加上一张各种质量的图片，等待几分钟，就能够获得一张或许让人非常满意的成图。 与这一技术的强大相应的，它也引发了诸多的争议。这些争议或许出于对 AI 技术的不了解，将其理解为简单的缝合，或许出于对自身未来的担忧，或许出于对版权的理解的差异，更或许是出于本代表着“人性”的艺术领域也存在被“非人性”的 AI“侵占”的可能性。 P20 这当然不是 AI 画图作为一个科技产品所独有的待遇，而是科学技术发展至今天的地步时，人们不得不考虑的重要问题，也可能是未来更多的 AI 科技走进我们的生活时我们必须考虑的问题。 P21 时下大热的深度学习、也是现在所广义认为的人工智能的基础，建立在对于人脑模拟的基础上，采用卷积神经网络等结构，用层层的“神经元”参数模拟人脑的学习和思考过程。 P22 经过深度学习的AI，如今可以帮助我们识别生活中的各种物体，如形形色色的APP，打开一扫普通人也能变身博学的植物学家；呼唤一声“siri”“小爱同学”就能给智能设备下达各种指令，极大地便利了普通人的日常生活；AI在某些领域已经证明比人类更加“聪明”，频频击败世界冠军。然而在这些成就的的背后，是人类对于人工智能知之甚少的事实，他们的杰出成就深深地让其发明者困惑，谁也没有料到所谓的“深度学习”算法能做得这么好。 P23 没有基本的原则指引这些学习系统，除了一些模糊的来自人类大脑的设计灵感，而关于这一点，实际上也没有人真正懂得多少。如果想要进一步使用人工智能，使其可信可靠显然是第一步。而信任的基础便是“理解”，专业一点的说法是“可解释”，但正如人们未能完全理解大脑一样，当神经网络的神经元数量超过一定规模时，其学习过程变得难以预测。“可解释性问题”成了目前机器学习的一个瓶颈。而深度学习正是一个潘多拉的魔盒，我们对它、以及它背后的我们难以理解强大科技感到不安和恐惧是顺理成章的。 不仅限于许多幻想作品中写到的那样，我们开始对“人”的内容产生了怀疑，而什么样的“人”是“强”的、属于未来的人类的文明是怎么样的，这样的问题没有办法产生彼此一致认同和确信的答案。 P24 一直以来，我们所生活的根本动机或许就是马斯洛需求金字塔里的一层又一层，满足自身需求，对社会做出贡献，以至于自我实现。随着人工智能应用在越来越多的领域，引发一轮又一轮的失业潮我们对“人”的意义的疑惑也会逐渐加强。单调的技术在几十年前就是可替代的，然而不同于17、18世纪工业革命带来的失业潮，人工智能应用范围之广、能力之出众有目共睹，在我们看来代表着创意和人性的工作如果也可能是可被替代的，那么“我们”又是什么存在？即便所谓强人工智能弱人工智能没有残害人类的想法，在我们将人工智能加于现实生活企图方便自己的同时，我们人类在社会的主导地位也在悄然被边缘化。当人类的价值不再被需要和肯定，那又从谈去追求“自我实现与尊重”？或许那时的生活将会是我们无法想象的。 P25 如果那样的生活是作品里的乌托邦和理想国的模样，“人”是变强了、还是变弱了？ P26 #4 再次定义“我” P27 再次说起开头时我提到的问题：为什么我们比科技落后的过去更容易提出这个问题？ P28 简单回顾一下我们刚刚所讨论的内容，不难发现，我们从“科技”产物的发明者本身的愿望出发，走近了“人”对这些产物的心理，剖析“人”因新时代的科技而产生的动摇，探究人类的“强”与“弱”：这份质疑，正来源于我们对人类的文明在科技发展下变化的趋势的不安。 P29 科技是人类的智慧与美好愿望的结晶，但是美好、强大的科技未必给人类带来美好的影响、让人类变得“强大”，“不用则退”让人类的部分能力在被科技产物代替的过程中磨损，而科技产物对人类追求快乐的本性的迎合也改变了人类的大脑，这些影响都可能从某种意义上“弱化”了人类，而今天的、以至于明天和更遥远的未来的更加强大的科技，可能从根本上挫伤人类对于自己“生而为人”的意义的理解，甚至像文学作品里所描述的那样，让人类失去追求“自我实现与尊重”的动机和动力。我们担忧、不安，故我们思考，这样的发展到底是好的还是坏的，在这样的发展下我们真的会变的更“强”吗？这种“强”又会是什么形态呢？ P30 我想起《人类简史》里所看到过的一段话，大意是，当代的人类比远古的人类会更聪明吗？现代的人们的营养摄入方式，远远比不上远古人类丰富。或许在那样的环境下，人类的整体更容易发生进化。但是事到如今，科技的发展早已是现实，回头的路几乎不可能存在，有些变化我们说不出好坏，就像现代的精细饮食让我们的胃部的消化能力大幅降低一样，这些问题可能只有之后才能解答。不过，人类变强或变弱是针对人类文明整体以及漫长的前景而言的忧虑，而非在于我们个体。 我们中的大多数人都只是时代潮流中的一滴水，即使确信了强与弱的定义、确信了人类文明正确的发展方向也很难做到什么事情，但是考虑这个问题能让我们警惕自己在科技发展的过程中发生的变化，在这种警惕存在的前提下，为我们个人的未来发展尽可能地做出自主的选择；如果改变人类命运的机会恰好落在我们手中，也更加慎重。 如果相信泛娱乐化是让人“变弱的”，就警惕自己成为快感的奴隶；如果相信艺术是人性的、是有意义的、是让人“强大的”，那么，就不要放下手中的画笔。如果我们每个人都能做出自主的选择，而非把命运都交给高速发展的、不可预知的科技，或许，人类的命运也更能够掌控在人类自身手中。 P31 ‍","tags":["Homework"],"categories":["Homework"]},{"title":"Alist","path":"/Engineer/c63da1e0.html","content":"* Link安装Alist威联通Container Station整合了Linux Container与Docker，可以运行轻量级Linux虚拟机或者下载各种软件容器应用，当然第三方比较好用的还有Portainer-CE，功能会更丰富一些，有兴趣可以去了解下安装方式，Container Station可以直接在App Center中查找下载安装。 打开ContainerStation，在创建页面中输入“Alist”进行查找。 ContainerStation内部接入了Docker Hub，Docker Hub是Docker官方维护的一个公共仓库,大部分需求都可以通过在Docker Hub中直接下载镜像来实现。这里在Docker Hub类目中下拉可以看到需要安装的Docker，点击安装，在右上角的后台任务重可以查看安装进度。 点击安装后，选择latest，也就是最新版，进去创建页面，这里的名称可以自己写，默认是alist-1，然后下方自动启动选择打开，cpu和内存限制就不改了。然后点击高级设置。 在网络页面中，端口转发栏把主机的端口填上，后续会通过这个端口登录Alist后台。然后点击创建即可。 创建完成后，回到总览页面，可以看到安装好的Docker，点击左侧运行，启动alist后，点击“alist-1”。 打开控制台后向上翻页，找到这个password，这个就是初始随机的登录密码。（因为是第二次安装alist，这里图片演示的是alist-2），然后点击上方的URL地址，进入Alist界面。初次进入输入刚刚的密码即可。 进入Alist后，第一步就是在后端页面修改登录密码，顺便把WebDav的账号密码填好，建议设置成一个方便记忆。 在账号页面可以看到已添加到云盘服务，Alist目前支持阿里云、OneDrive、天翼云盘、谷歌云盘、蓝奏云、百度云盘、迅雷网盘等，我自己就用阿里和百度两个~需要添加云盘的话，点击左上角的“添加”。 虚拟路径就自己随便填，然后打开本地webdav服务，download api默认是official，官方服务适合会员，没会员的话，点开这里选择crack，crack的意思大家都懂的。必填项还有一个是“刷新令牌”。 令牌获取可以打开alist-doc.nn.ci，点击这个箭头位置获取，点击后跳转新页面，复制refresh_token:后面的一串字符，粘贴到刚刚的添加百度云盘的刷新令牌一栏，保存即可。 再次打开alist的网址，默认跳转就是网盘文件夹，如需添加调整，可以点击下方的管理，进入设置页面。 挂载本地磁盘如上网页端打开云盘问题已经解决了，接下来要解决电脑挂载webdav的问题，win电脑本身支持https挂载，想要挂载http，得去修改下注册表项，稍微麻烦了点，这里可以使用第三方软件RaiDrive。（mac电脑可以直接挂载） 安装完成后，点击添加，在服务类型里面选择NAS-WebDAV，填写Alist的地址和端口号，注意把地址框的取消，否则默认是https，路径为空的话，所有网盘都会显示，如果只需要加载百度云，则输入在Alist内创建的虚拟路径。最后输入账号密码，点击连接即可。 此时打开我都电脑，就可以看到新创建的WebDAV盘了，容量显示可以忽略，自己知道就好。","categories":["Engineer"]},{"title":"Syncthing+Raidrive","path":"/Engineer/cec21218.html","content":"群晖 #SyncthingSyncthingDocker配置Syncthing 添加环境：TZ=Shanghai/Asia添加文件夹：xxx=/data1, xxx=/config 赋予data1和config两个文件夹权限！！（非常重要） Raidrive1.群晖套件重心下载并配置 webDav server2.raidrive连接群晖，本地化使用网盘下载链接：https://pan.baidu.com/s/1eP9zBjlPjmL2-0MlWUlS3A提取码：7890 3. 安装和配置一直下一步，然后你就安装完成了","categories":["Engineer"]},{"title":"感受中国伟大变革中的历史温度","path":"/Homework/58af5547.html","content":"引入今年是中国共产党第二十次全国代表大会召开的一年，也是标志着我国全面建设社会主义现代化国家、迈向第二个百年目标新征程的一年。处在国家为实现中华民族伟大复兴的中国梦而不懈努力的重要的节点，我想谈谈我所理解的中国伟大的历史变革与其中体现出的历史温度。 变革通常指对旧系统和事务的改革。如果畏畏缩缩、停滞不前，未来等待的“落后就要挨打”的处境；只有勇于、也善于适应于时代背景的变迁与人民需求的变化做出改变才能够使得国家发展进步、越来越好。 自我们新中国成立以来，一件又一件的重大变革迎来了好的成果，充分体现出马克思主义科学理论的强大生命力、体现出中国特色社会主义制度的优势和治理效能。40年来，人民的生活发生剧变，中华民族站起来了，也富起来、强起来了。这些变革不是如某些外国政治家所说的“空头支票”，而是真真正正地为人民谋来福利、切切实实地改变了人民的生活，是能够亲身感知的伟大举措；正是这样的变革，才能形成有温度的历史。 政治与经济 自由、平等、公正、法治的政治体系是国家得以稳定发展的基础；经济制度建立在政治体系之上，更是与人民群众的日常生活息息相关。 在新中国成立后，党领导人民进行社会主义革命、建立社会主义基本制度，根据国情探寻适合的社会主义发展道路，为之后孕育中国特色社会主义提供经验、做好准备。党通过和平的手段促进农业、手工业和资本主义工商业的社会主义改造，实现个体农业的转型和资本主义所有制的转化。 随着中国经济复苏，中国的计划经济渐渐制约了国家经济的快速发展，在十一届三中全会上，对内改革、对外开放的改革开放政策开始推行了。它成功地发展了中国特色社会主义，使全体人民在共同富裕中取得更加切实的进步。 党的十八大以来，我国经济发展的平衡、协调性和可持续性显著增强。国内生产总值已超过100亿元门槛，人均GDP超过10000美元。中国的经济实力、科技实力、综合国力达到新水平。高速铁路、公路、桥梁、水利建设蓬勃发展，城乡景观发生了巨大变化。 我国基本公共服务均等化扎实推进，居民收入保持较快增长，有9899万农村贫困人口扔掉贫困的帽子，昂首阔步迈上“共同富裕奔小康”的高速公路；人民更有获得感、幸福感。中国共产党领导人民继续朝着宏伟目标前进，不断满足人民美好生活的需要，提供了更加完善的制度保障、更加坚实的物质基础和更加积极的精神力量。 外交 新中国成立后，党坚持独立自主的和平外交政策，提出了和平共处五项原则、建立国际政治经济新秩序等理念；新时代，中国的经济和军事蓬勃发展，在国际事务中获得了更大的话语权，以人类命运共同体的理念推进中国特色的大国外交，形成了多方位、多层次、立体化外交式布局，促进人类进步；在台湾、涉疆、涉藏、涉海等问题上也坚决斗争，保护国家发展的有利环境，维护国家的利益。 ‍ 科技 中国科学家们也在各种尖端科技项目上取得一个又一个重大进步。航天技术有天宫二号空间实验室、嫦娥三号月球探测器，航海技术有蛟龙、海龙、潜龙“三龙兄弟”深海探测装备……各种各样的科学技术不仅为人民带来更好的生活，也为国家争取更多的国际话语权，具有系统性、大局性以及战略意义，凝聚了强大的精神力量，为全面建设社会主义现代化国家谱写新的篇章。与此同时，我国也未忘记在发展科技的同时做好生态保护，环保观念的宣传与环境保护法共同保障了“绿水青山”的稳定性， 小结 自新中国成立以来，一个又一个伟大的变革筑成了中华民族伟大复兴的阶梯；新时代的伟大变革深刻揭示了新时代是实现中华民族伟大复兴的决胜时代，具有里程碑意义。 这是人民广泛参与的变革，每一个变革背后都有奋斗者们的努力的身影，精准扶贫背后是一个又一个下乡干部调研民情、探索道路的奉献，城乡义务教育一体化背后有一位又译为教育者为祖国的花朵与未来殚精竭虑的构想；基本医疗的网络背后是一位又一位白衣天使对患者倾尽全力的治疗。这更是在中国共产党全面领导下的变革，变革的规划与审核无不在于党中央的统一领导之下，也正因是党的领导才让中国在短时间内完成了一个又一个看似“不可能”的奇迹。 而新的历史也正在持续着。新冠肺炎疫情下党中央对人民生命的坚定守护，对人民生活生产的竭力维护，使得中国在疫情防控和疫情经济中取得卓越的成效，铸就了伟大的抗疫精神。今天，在二十大又踏上新的征程的中国，将在以习近平同志为核心的党中央的坚强领导下，进一步向着全面建成中国特色社会主义现代化国家的第二个百年目标披荆斩棘、克服万难，与中国的人民群众站在一起、为中国中国的人民群众们争取更加光辉灿烂的未来！ ‍","categories":["Homework"]},{"title":"星之终途","path":"/Tavg/Flos/8512a8a3.html","content":"无剧透篇 简介：運搬屋&amp;AI少女的终末旅行 标签：末日（无恋爱、无分支视觉小说） 推荐：4/5 短篇（涉及很多片假名，而游戏背景不日常，个人感觉阅读还是比较辛苦的…） 背景 故事发生在已经不再由人类统治的地球，荒废的城市与广袤的山野中游荡着仍在工作着的危险机械；人类躲避着这些危险，守护着小小的安全区域，在那里共同生存。位于东部人类聚集区的一名運搬屋（字面上是搬运工但是干的事情是类似冒险家接委托的感觉？）、ジュード从来历不明的无人机上接下了一个或许报酬不菲的委托：找到一个隐藏在危险区域的少女并将之运送至西部，并被告知，少女的身上背负着&lt;人类复兴&gt;的希望。 CV list Jude Philia Willem Delilah 木村良平 指出毬亜 乡田穗积 花守由美里 ‌‌‌ 完美契合的UI、美工、音乐、配音，加以能够营造氛围感的剧本，构造了荒废末世里的一个温暖的小故事。与其说是Galgame，不如说是一部艺术品般的视觉小说。 ‌‌‌ 在这里，你会走进一个特别的、深灰绿色的世界，科技的高度发展与人类文明的衰微互相辉映，末世人类如同AI般的理性和冷漠与AI少女富有人性的博爱和善良互相影响。或许渺小的个体很难承担拯救世界的责任；或许也不非得要承担拯救世界的责任；又或许他们根本没有选择余地。但是无论如何，他们都会拼尽全力抓住属于自己的未来，并将那份闪闪发光的希望之火传承下去。 剧透篇请不要不要不要不要不要在没玩游戏的时候看！！！非常非常非常非常非常影响体验！ 1. 角色/剧情‌‌‌ 因为两个角色在剧本里是互相影响的，和剧情发展也密切相关，所以这次不太好分开来写，就混着说吧~‌‌‌ Philia的初始设定就是对人类群体充满不切实际的向往和亲近感的少女，前半部一直说：“这样做就会更人类了吗？”想穿人类的裙子、问伤口应该好得更慢一点吗、应该在海里喘不上气吗，这样问着。 ‌‌‌ 明明是紧张的探险与战斗，稍不谨慎就会丢失性命。明明是高性能AI，似乎没能拥有AI的超能力却继承了一大堆人类小孩才会带来的麻烦事情，走着走着会喊好痛、非要吃东西不可，总是自说自话地消失，触碰未知的巨型机械、反复请求Jude“拯救”立场未知的少女……很多时候，我觉得她真的很麻烦，在这场探索中完全是&lt;足手&gt;，明明什么忙也帮不上但是把自己说不出理由而显得虚伪造作的博爱四处乱发（比如不是素食者却不能杀鹿什么的……）是会有那种人嘛，生活中也是有的，从她的立场出发可能并没把什么事情做得很错，可是结果就是很消极的，我觉得很多时候Philia干的就是这种事，就很不耐烦，也不能说是对人，就说对事吧。（） ‌‌‌ Jude是成熟的，在这末世的环境下却难得的并不算非常冷漠。这种你死我活的环境最容易催生的就是不分对象的猜疑和杀意，但是他的心里仍然保留了许多温柔和宽容。虽然很生气被制止了杀鹿，但是随后心里想到的是“那杀鱼的话她能不能接受呢”；想着其实是AI不吃东西也无所谓吧但是看着Philia可怜兮兮的样子还是伸出了手；为不愿意拿枪的Philia准备了一把玩具手枪，让她拿着枪就当是记住教训，诸如此类的举措数不胜数。 ‌‌‌ 与此同时，。Philia在看着Jude为了她的愿望（……）奔走的过程中，开始逐渐意识到人类是为了利益而活动的，尤其在这样资源有限的条件下，作为毫无关系的陌生人、Jude毫无理由为她的愿望冒险，而她自说自话地向自己解释说：或许是人类的亲情那种关系吧。正像她之前和Jude路途上所看到的死去父女手机上的最后录音里播放的那样，她参考着网上的发言，想着，或许人类的父亲为子女而死是理所当然的吧，正因如此人类才非常伟大啊。（……如果这个句子是人说出来的我肯定超级生气……）我好像有一点能理解，就是那种，我也有那种因为接受了父母很多的很好的、没办法回报的对待所以想要试图找一个解释的想法，而Philia的想法应该也是类似的，下意识地为Jude这些宽容与温柔找一个原因，原因的名字是亲情，因为她觉得亲情是无需理由、不求回报的。 ‌‌‌ 但是Jude听到Philia这样说觉得很生气，当然第一反应不是因为讨厌Philia不想她成为亲人，而是想起了自己对自己真正的亲人的亏欠，唤起了痛苦的（甚至说可能不太愿意面对的）回忆。一直以来，Jude沉浸于工作之中，在工作中寻求自己生命的意义所在，其实也同时逃避了与他人的亲密联结。他没有说起那时的故事，而是出于转移话题、又或者只是教育的想法向Philia讲述什么是亲情，告诉她亲情并不是她所理解的那种高尚的东西，然后继续向着目的地前行。 ‌‌‌ ‌‌‌ 真正让Philia对情况变得清醒起来是后半部两人卷入西部的部落的时候。在那里，Philia长时间地面对了人类的残忍和冷漠，对人的认识进一步地完善了，更重要的是，见到了Delilah；某种意义上，Philia在Delilah身上看到了自己的另一种可能，是失去指引者的类似存在、是能与Jude并肩战斗的勇者。在那个几近绝地的情境下，不难看到这次Philia显而易见的不安、恐惧和动摇，而这种危机意识是在此前并不强烈的，这或许与Philia对人的理解的变化有关。而Philila听着她的故事，从她的身上继承了一些坚定和勇敢。而作为玩家的我们，在之后也不难从这两对冒险小队的境遇中感受到Jude的温柔，也并不是“比差”的问题，而是在比较中更加能凸显出Jude身上难能可贵的人性。回想起来前半部分我对Philia有点消极的印象，那根本的原因是作为玩家的我的仓促和浮躁，是作为玩家的我对于“达成目标”这种事习惯性地抱有很强的执念，所以对Philia的天真感到烦躁和不耐，而Jude并不是“只要把&lt;货物&gt;送到指定地点获得报酬就回家”的完全理性人，不是考虑让行程简单易行，而毫不在意此外的所有东西，和我们并不一样，他不会把Philia当成一个碍事的货物或角色，不会把委托当成一个游戏任务，他反复提醒自己这是任务、Philia是AI正是因为他并没有把这一切当完成即可的任务、并没有把Philia当作AI。 ‌‌‌ ‌‌‌ 人性是会出于任务也出于本心保护着Philia和她纯洁无垢的愿望，而不只是达到目的、获得报酬，在与身为AI却象征着人性的Philia的相处过程中更得到了深化。直到这里，二人的变化已经非常显著，也趋于完善了。而我觉得，剧本写得最精彩的部分也基本就到这里了（原因别的part说）。 ‌‌‌ 在之后，Jude和Philia行程平缓了一段时间，他们驱车去往最终的目的地，Jude想着Delilah事件让他更怀疑的公爵的委托，但是作为一个人类个体的他其实无力面对；从一开始就是这样，刚接到委托的时候他和公爵对话的时候他也猜测Philia的愿望会不会实现、伴随着什么代价，但是在公爵那样的深厚地积蓄着的力量面前，他只是棋子而已。公爵下了很多很多的棋，他是有幸走到他面前的少数。两人其实同样的不安。Philia早已意识到Jude的目的绝不是为她实现愿望，但是她还是试探性地问了，想要获得一个至少让她安心的回答；Jude不愿意继续他早已苍白无力的谎言（？其实也不算，一开始说的就是“可能”，Jude从没给她画过肯定能实现的饼），而是在这两个选项：背叛这段旅程的羁绊放弃Philia、背叛这段旅程的初心放弃目的（据说可能是复兴人类的可能）；之外选择了让Philia放弃与他之间的感情（放狠话）。这肯定不是好的选择，但是作为普通人类个体的Jude其实从踏上这段旅途开始就没有回头的余地了；最后的希望只在Philia的身上。Philia的痛苦和愤怒超出了情感阈值，引发了机器群的注意，据点陷入危机，这时Jude义无反顾地用生命护着Philia出逃。不是为了任务，是希望Philia能够拥有一个有可能性的未来；从意识到委托背后可能存在的黑暗开始，，他们都卷入命运之中，无法逃脱。后来，Philia得到了另一群机器的保护，二人来到公爵的月球基地，得知牺牲Philia的愿望与自由的计划真相后Jude用埋过伏笔（）的改装玩具枪结束了公爵的性命。 ‌‌‌ Philia是AI，却是人性温暖的部分的象征；Jude是成熟的冒险家，却和末世下已经满脑目的论化的冷漠者仍有不同，他心中柔软的部分在与Philia相处的过程中逐渐获得强化。Jude教会Philia更完整的人的模样，而Philia用理想的人性温暖了Jude在人生一路旅途中创伤累累的心，让他从一个在工作中麻痹自我的冒险家的&lt;身份&gt;中渐渐找到属于自己的情感和愿望。他们是这个末世下渺小的个体，只是“个体”而已，可是公爵却希望（其实在这种力量的差距下，希望就是强迫…）用他们的肩膀承担起救世的使命。也可能 ‌‌‌ 我还是很喜欢这个故事的&gt;A&lt;。 2. 氛围感‌‌‌ ‌‌‌ 尤其是异世界背景的作品，氛围感是相当重要的，涉及到玩家能多大程度的理解这个世界的形态、也影响到故事的立意和表达。这部作品在氛围感上做得是可以认为无可挑剔的。 ‌‌‌ 从剧本上，即使隔着巴别塔的阂也能感受到文字里扑面而来的特殊的氛围感，如果用颜色表达，也正是游戏里随处可见的主色调：深灰绿。我会想起多年前体会到的罚抄里茂密的绿色植物爬满空空荡荡的都市的荒芜的画面，不过这个也少许不同。 ‌‌‌ 穿过了人类群聚的狭小、杂乱又热闹的安全区，走进了充满未知的危险的广袤山野，在那里，已经忘记了自己存在意义的战斗机械还在注视着周边的异动，荒废的大楼下各类废水腐蚀溶解了地面产生洞穴，运货用无人地下铁不知疲倦地一次又一次驶过铁道，荒废的游览吊车上还剩余着两条无人问津的压缩饼干。是这样的感觉。渺小的我们探索着这片广袤的大地，恐惧着来自于人类、机械、其他生物等的大小危险的同时也看见了美丽的大海与天空。 ‌‌‌ 而从剧本之外，UI、美工和音乐等都做到了极致的匹配。这部作品直接舍弃了对话框，把文字直接打蒙版悬浮在背景上，有种看小说的感觉，有很特别的文艺感（）。而实际上，整部游戏出现的角色也很少，全部都有配音，去掉对话框和头像显示的传统结构也不会导致理解困难，而是给玩家留了更多想象的空间；与此相对的，有更多的类似于旁白的段落，我们更连续地、实际上也更多地（传统结构并不适合连续地出现大段无配音旁白，在需要的时候也会才用无对话框的结构）看到话语之外的很多声音。Jude不是个热衷于表达情绪的人，而他的每一点想法都在那些无声的文字里传达了；同时传达的，还有那些关于人类文明凋零以前的破碎往事，强化了玩家对世界观的认同感。 ‌‌‌ 明明少有画面，却像电影一样容易清晰地感知；久久停留在记忆之中。 3. 零碎的A.TvT‌‌‌ ‌‌‌ 但是男主应该是寿终正寝，，我不难过，，呜呜，我不难过… B. 关于感情推进和剧情节奏‌‌‌ 觉得故事的整体节奏是比较缓慢的，但是这种缓慢是可以接受的，也不算是那种白开水一样寡淡无味的缓慢；在这个缓慢的节奏里，我们也能一窥人类的文明凋零以前的故事。说不上是什么发展AI的启示或警示，只是一个if故事，一个可能而已，没那么沉重而深刻，但是也有自己的韵味。不过，从两人上岛开始，剧情发展突然开始突飞猛进了，从争吵到枪杀公爵，中间感觉几乎没有喘息的空间，而枪杀公爵虽有波折、仍显得有点过于轻松了，这段实际战斗的篇幅还不如之前两次和人类小群体枪战，而那两次枪战都写得非常详细、让人切身地感受到紧张刺激……感觉就像，刚刚Philia还在哭着说脚好痛一步都走不动了想要放弃了，过了一会儿Jude就已经寿终正寝了Philia独当一面在拯救别的AI少女，这一段相比之前节奏太快，我都反应不过来（……）。而且，我好好奇他们两个到底怎么旅行啊！番外也好能不能让我看一看啊（qwq） C. 关于CV的个人文句‌‌‌ 啊啊啊啊啊啊库鲁西！良平平全程压着嗓子说话，听得好累啊……（怎么说呢……）我觉得良平平就是配那种，白石景之啊A碳啊这种超级合适，配这种沉稳大叔总感觉哪里怪怪的，呜呜，感觉能选个更合适的（）不过也挺好听的啦2333 4. 总评：運搬屋&amp;AI少女的终末旅行‌写到这里已经写了五千字……我有点写不动了……（如果什么时候想起来写再加好了！）感觉能说的上面都说的差不多，总评可以写的也不小心在前面写完了。‌‌‌嘛，总的来说，我还是相当喜欢这个作品！~如果汉化组做了汉化的话我说不定会再去玩一遍的 &gt;A&lt;‌‌‌不过，由于我的日语水平以及理解和表达能力都比较有限，写的东西有可能出现偏差，有差错可以跟我直接指出~‌‌‌有什么进一步的感想也欢迎评论和私信！！我都会看的！","categories":["Tavg","Flos"]},{"title":"天獄ストラグル -strayside-","path":"/Tavg/Sakura/a5e372d0.html","content":"无剧透篇 简介：地狱大小姐的人间道实习 Game 标签：和风神话/历史 推荐：3-/5（剧本真的对不起美工和配音…）（之后不按细则评分了 x 感觉玩的游戏太多了，想要保持评分的一致性非常痛苦……现在也只能说保证总分档位还算一致……再梳理中） 篇幅：长篇（全通约 40h，共通线、真相线以外的 4 条线各耗时约 6h，真相线约 7h，另有丰富的 Memory） 背景（部分共通）： 死后来到地狱门进行审判的少女是 &lt; 失去记忆的’泡形’&gt; 被阎魔大王认作养女，从狱卒学校以第一名的成绩毕业了。为了尽可能地报答 &lt; 父亲 &gt; 的恩情，她答应了父亲提出的任务：与四名 &lt; 罪人 &gt; 一同前往人间道，弄清欺骗天道获得 &lt; 拯救的线 &gt; 而逃离地狱的罪人们的越狱原因并将他们带回地狱。 CV list|石川五右衛門|村上誉那|東洲斎写楽|宇賀菊之助|ＪａｃＫ|| ——————| ————| —————| —————| ————||八代拓|鈴木崚汰|石川界人|斉藤壮馬|古川慎| 总评： 突出的优点：很有趣的世界观、美丽的 CG、好听的配音和音乐（多线的恋爱也很甜）突出的雷点：剧情以至主线问题很大！！+ 即使在日乙中都显得严重的男凝感（很生气 情绪化 甚至不想写评价……玩完鸽了三天……） ‍ 剧透篇おすすめ順：村上誉那 -&gt; 宇賀菊之助 -&gt; 東洲斎写楽-&gt; JacK -&gt; 石川五右衛門 1. 总写一下刚刚全通的心情（生气地吃薯片中）一共 40 个小时，前 20 个小时我都说得上是比较愉快的，抱着预期 4 分上下的心情在玩，（甚至想着之前草草瞥见的差评想着会不会是有点太苛刻了）。因为真的很甜啊！！就算是工业糖精我也承认它甜，打了几十部乙女游戏什么套路我没见过我还是会觉得甜……不过，除了甜以外好像真的空空的，除了谈恋爱以外主角团好像没干什么重要的事情。 说到底这种剧情设计就是不太健全啊！《奥林匹亚的晚宴》里女主的目标是恋爱延续后代，这一步里女主的目标是打包一个反派 boss 回地狱，但是女主没有力量，只能靠增加和男主的信赖（血因）增强男主的战斗力……（头痛）日乙常见的何もできないのわたし是吧……所以女主好像一直在谈恋爱也没什么问题（？）（这种生活我代入不了啊——） 而且我很好奇女主的身份背景！很好奇石川的来路！（说实话，在没玩他的线之前我一直在じ—地盯着…）很好奇怎么把反派端了、反派是想干嘛！一直一直一直认真地等着！ 其实写乐线我就感觉有点不适了，嗯，可能也有会喜欢轻浮男的类型吧……就差把轻浮焊在脸上了……这一条女主的感情产生也写得有点突然，在我不适正严重的时候就被动 &lt; 喜欢 &gt; 上了写乐；然后到 Jack 线，这个情感推进更是莫名其妙了，不说我是被动喜欢上 Jack（不是，女主是间谍啊？怎么那么容易动心啊我真的傻了），更别提 Jack 到底什么时候开始什么原因喜欢上了我……还有老师和 Jack 之间的历练，只能说写的是不清不楚莫名其妙…… 最后满心期待地进了石川线，好家伙，一共 14 章节，男主一边不停地暗示女主和他过去的回忆一边说着不想让她想起来自己对不起她，女主一边不断接受他的暗示、觉得他是把自己当作替身（……是不是有点太迟钝了？？）一边喜欢他，拉扯了 10 章（可以说是几乎没有增加信息量），终于坦白心意了，坦白完就 do 了……之后过了一段时间又开始拉扯了……大意是你喜欢的是那个已经死掉的女人不是现在的我（……）然后矫情了一阵，就开始决战了。 这游戏战斗系统很诡异，不只是体现在像 game 一样会，还体现在（敌不动我不动）（，Jack 拔出村雨的时候我心里其实是有一点动容的（前面也铺垫了 Jack 可以沙老师，确实是有战斗力的）而且也有点感动，但是女主烦能升级的时候我是真的傻了，还有后面那个突然的游戏场面，完全是作者“想让她赢所以赢了！~”。神椿死得轻松，四鹿得到那么强的异能但是和石川对线不连续用 CleanUp（六根清净）而是掏出自己的异能，诸如此类…… 而平时调查案件也是如此，只要不是钦定的打架状态，对手的话见面也不会打架，只有特定时期说“哇——开打！~”才会打起来…… 真的经不起细想。……多想一想，前面的糖都不甜了。毕竟是套路糖，剧情的支撑不够有力，玩了一段时间就全部都冷却掉了。 以及女主的身世，真的何必安排成这样呢……。。。感觉比起必要性，更多的是恶趣味…… 2. 一些难以忽视的剧情 bug 主角团人均五六百岁，干的事情就像中学生一样……好诡异（） 诡异的战斗机制和主角-反派关系（上面说了） 真相线决战点到处是漏洞，比如说，神椿毫无铺垫？？？？？？这么大一个反派你跟我说完全没铺垫？？？？？空降？？？？？然后，作为座主，说死就死？？？？？？不是，这是开玩笑呢？（怎么铺垫怎么做决战设计可以参考一下终远，呜呜） 普通个人线的 GE 里，女主谈完恋爱带一个囚犯回地狱就能过上幸福生活，就是想好奇一下剩下的反派团怎么处理 完全工具人化的普通人类（功能：1. 盲从 2. 被男女主救，体现后者的善良） 3. 地狱大小姐的人间实习 Game回过头想想，整个事件就很令人无语……像石川怀疑的那样，下放大小姐一行人（如果为了解决问题，有很多很多更好的方法，而不是让主角团几乎是闷头干）。在真相线中完整暴露的反派团可能对人类造成的伤害也是很大的（其它线只是没写而已）…… 就是那种，明明是新人警察但是警察局派她带一堆武力值半桶水的人出去解决一整个世界末日级别的危险分子团队的感觉……不是锻炼，这个叫冷漠（对主角团和人类都是），把整个实习过程游戏化也没办法无视这一点……、 而阎魔大王的目的还是：拯救大小姐，给可能消失的大小姐找到新的执念，爱上谁也好，或者想起自我也好。就导致整个故事换个角度看就特别微妙……人类也好男主们也好都是游戏里的棋子而已，反派只是个靶子（给女主一个目标和男主们培养信赖值）…… 怎么说呢，虽然女主很惨，不知道为什么被阎魔大王救了也蛮好，但是一个“为了谁而服务”的大小姐游戏一般的故事我真的有点食不下咽…… 所以，只限于恋爱罢了。，别的就算了。世界观确实很有趣，但是故事的立意很糟，过程也因为过于 &lt; 游戏化 &gt; 而完全没有实感。很痛苦，真的很痛苦（悲） ‍ ‍ ‍","categories":["Tavg","Sakura"]},{"title":"花町物语","path":"/Tavg/RoseR/1173299f.html","content":"基本上是拔作感觉没有很多写评价的必要（沉思） 两部都很喜欢！第一部绿川光的软萌的瑟和第二部近藤隆傲娇的瑟，各有风情~~ 呜呜 特别好特别好，多贴贴多贴贴，孩子爱看 如果硬要说的话感觉第二部画风更喜欢一些，感觉配色更加的……艳丽瑟琴（x） 然后第二部的画廊有点吵，現実と幻想の日々…我已经会唱了（查询博主看画廊时的精神状态）","categories":["Tavg","RoseR"]},{"title":"谎月香格里拉","path":"/Tavg/Sakura/5c75c8e6.html","content":"无剧透篇 总评：神明 标签：架空/奇幻/神话 推荐：**3/5（剧本较弱，但是声优阵容确实豪华——，所以可以拉到平均分） 主线：3-/5 （文笔……朴实，剧情简单直白、设定部分未回收，幸好篇幅短不拖沓） 情感推进：2/5 （……好生硬） 人设：3/5 （标签感） 音乐：4/5 美术：4+/5 篇幅：短篇（15±h） 故事背景（无剧透）： 眼中映着月亮的少女——预言中的救世主——透过湖水的波动来到了永夜的城市香格里拉，尽管她坚定地相信着自己作为普通人类的存在。在意外的尝试中，她发现当她注视着水面中自己眼中的月亮时，就能看到香格里拉过去真实发生过的片段；如果怀抱着心愿询问的话，甚至能控制见到什么内容。 不过，即使能做到这一点，她又怎么样才能拯救世界免于崩坏呢？ CV list 芬里尔 耶梦加得 海拉 哈提 恩德 铃木达央 下野紘 浪川大輔 齐藤壮马 杉田智和 简评 只能给到平均分真的非常遗憾，虽然对于该作的初印象在4+-的位置，UI等完成度很高、PC版也对Xbox手柄做了充分适配，而游戏本身有比较新鲜的世界观（永夜与谎月）、超豪华的cv阵容，但是在后续游戏过程中，有趣的世界观下没有展开到令人满意的程度。作为乙女游戏本分而言的“恋爱”部分也比较欠缺，人设比较单薄（很难有一部作品里我几乎只能看到cv看不到角色……），情感推进也比较敷衍，几乎是“啪的一下啊就喜欢上了”的突兀程度，可以明显地感觉到剧本娘在描绘长跨度的情感、事件发展上的乏力。整个游戏写得最好的地方就是小剧场…… 在同类中短篇作品里，黑白爱丽丝(4)、Code:Realize(4)有出色的情感描写和人物设计，7’Scarlet(4+)有恰到好处的悬念设置和伏笔回收，Steam Prison(4-)不错的世界观完成度和女主人设，感觉都有各自的优点，相比而言，谎月没有特别出彩的地方，和Cendrillon PalikA(3-)定位类似，有比较有趣的世界观、各方面较高的完成度，但也有各自遗憾（CP的人设塑造优于谎月，但是故事缺陷比较严重） 总体而言，故事本身可圈可点，但是出于好看的cg和豪华的cv阵容（而且PC官方中文版），有空的话也是可以玩的~ ‍ 剧透篇 个人攻略顺序：芬里尔 -&gt; 耶梦加得 -&gt; 海拉 -&gt; 哈提 -&gt; 恩德（金月太太的攻略中的顺序） 个人好感度 record：海拉 &gt; 其他 角色评价 明明有这么好的cv和立绘基础，但是没有构建出一个能“立得很好”的人设。其实作为写故事的一方而言，我也不大喜欢把人设和几个词汇绑定，这样在创作的过程，注意的与其说是一个完整的“人”，不如说是几个标签，而这个作品在选角色的时候就给每个角色的故事绑定了两个词语，一个描述性格、一个描述命运，之后这个描述性格的词汇就会作为标签一样一直插在他头上如影随形…… 就是，怎么说呢，没有“活着”的实感吧，把故事都围绕着标签去服务，照亮着标签所高亮的特质；当光褪去的时候，忽然意识到除了被照亮的地方好像并不太了解这个角色。一味地强调着芬里尔作为大哥的保护欲，强调着他的粗糙下的温柔和脆弱，强调到刻意的程度而让形象变得完全二次元化了；即使剧本娘设计了女主回溯过去去补充和男主们相处的短暂时光以外的剧情，这种本应用于进一步&lt;完善&gt;人设的行为被用于&lt;强调&gt;人设，只能使得人设扁平。也可能还有别的理由导致这个问题，暂时想到最明显的就是这个。（很多有张力的角色都不是靠几个词就能形容的吧？&lt;角色张力&gt;就是来源于人的复杂性而不是人的极端化啊…） 虽然说挺喜欢海拉了，但是海拉人设表现也是一样有些乏力。别惦记你那无痛症了……伏笔明显得都不大像伏笔，为了剧情女主是不是有点钝感过头。为了表现两个弟弟的多疑，开头就让海拉对女主一副满满敌意的样子，喂喂喂本来就是交际花人设为什么在这里就忍不了这说不过去啊？（而且这怀疑也太无端了）想丰富一下人设的话，其实可以多表现一点交际花的人设但是没写多少，最主要看到的就是剧本娘在跟这个无痛症过意不去，一遍一遍写不知道痛面无表情我是怪物想体会疼痛，作为读者我的共情力都被磨损完了…… 我真没玩一个游戏的时候理解角色困难到必须不断地找类比……看着海拉，想蝶毒的绫人（活在谎言中的交际花），为了守护而牺牲之类的温柔和坚强；想CendrillonPalika的忧涟和黑弥（因为过往伤痕或因为醉心求知都选择封闭内心），在感情方面的钝感和青涩（“但是为什么我的心会这么痛呢”）。这样的话，才差不多能知道海拉是怎么想的……单看剧本真的乏力，本来就篇幅不长，还不讲重点…… 耶梦加得就崩得比较过分了，要求剧本娘写一个“无法捉摸的坏孩子”她真的会把他写成无法捉摸（无法捉摸不是没有行为逻辑的意思啊！），看得我血压都高了，诶诶你们这些个人设应该都是成年人吧，没必要写的像初中生的中二病吧（没有冒犯初中生和中二病的意思），紘糖你在配什么啊（悲）…… 耶梦加得：我要报复这个世界！！！ 姑且还在努力代入女主的我：……（努力理解中） 耶梦加得：我要把你杀了，毁掉这个世界的人们被救世主拯救的希望！！！ 我：（直接从剧本脱出）我草，那你还蛮牛b的。（不是你杀我干嘛啊？？？？） ：…… 还有恩德，一方面想表现恩德的神性，对所有子民的爱，又想表现恩德的人性，表现他对“亲近的人”的爱、对女主的爱。这两个东西本来就矛盾，想表现在一个人身上需要一些笔力和篇幅……剧本娘贴标签的时候把相关情节一贴了事，完整性什么的基本没考虑。感觉这条线应该是最能写很多东西的线，结果还是在两个小时里草草了事，根本表现不出来。强调这位神明的弱小和多情的同时不断地强调着对手神明的强大和任性，会让恩德看起来很接近人、令人同情，也会让神明的战斗的胜利变得突兀（哈提best end就变得很玩笑了……）……不如说恩德是几个角色里剧本想体现的特征最多的一个，但是篇幅就这么多，剧本娘就算想写也写不出来吧。 未回收的疑问许许多多 谁写的预言书？谁写的都市传言？？女主不是第一代谎月，但是之前的谎月是叫灾星吧？（中间的转变理论上只有恩德知道，可是恩德没理由写预言书和都市传言，他的动机应该还是努力隐藏女主的存在才对） 女主是怎么回香格里拉的？（结论是不如车祸转生）还有那个声音是怎么传的？ 不是，为什么会觉得把贫民全毒死就能拯救经济啊……（你的廉价劳动力？）还有工具人议会和议长…… 诸如此类有好多，细枝末节的就不多说了，比如什么蒙着布也能看到的原理（还有教堂、恩德家和贫民窟的距离关系……蒙眼的女主怎么和芬里尔轻松相遇……）比如女主谎月的能力的具体溯源（镜子为什么不行…为什么月亮对应回溯过去的力量……）神话转生之类的解释也不够有力……恩德作为神明的能力除了重生和创造、控制假月亮还有什么…… 这么大一个世界观装在十个小时出头的篇幅里确实是逼仄（……）即使全都作为神话衍生去理解（月亮占位置之类的），依然有大量无法解释的地方……=怎么说，感觉意难平吧。 明天开学了，想起来再写吧，算是带着情绪不太客观地写了一堆，强迫自己横向比较一些别的游戏尽量客观一点，维持在同一个标准上，但是看着这么好的美术这么好的配音和这样一个剧本匹配我真的又生气又难过！！…… ‍ ‍","categories":["Tavg","Sakura"]},{"title":"晓之护卫1","path":"/Tavg/Iris/2a89ca8b.html","content":"无剧透篇 总评：无脑恋爱爽文 标签：架空/恋爱 推荐：2+/5 篇幅：中短篇 单本篇而言，是典型的高开低走作，开头看到的是崭新的、带有科技色彩世界观，看到的是背景神秘力量未知的男主角，看到的是性格鲜明的各有特色的大小姐们，在意外下发生改变的生活，怎么看都是可以发生很多有趣的意外的事情的剧本……然而，事实上除了其中几个女角色做到了不错的角色刻画和合格的感情推进描写，，如果不是剧情本来就不算很长，这种“漫无目的的闲逛”会更加致命，除了看看男女主角贴贴以外毫无前进下去的求知欲（剧透篇细说）。 另外，系统严重影响多周目体验，虽然看得出SKIP应该是已读SKIP的意思（一些未读段落会暂停），它有时也会跳过未读段落，很痛苦没办法信赖，光看主角怎么玩纸相扑 选不选吃怪味豆都看了好多遍（那是叫什么来着？）。音量也不大平衡。情节连贯性比较一般，段落比较细碎，阅读体验一般。 在2022年，有很多优质作品可以玩的今天，权衡一下优缺点，再玩这一部了（至少刚玩完本篇我是这么想的……）算是因为别人推荐所以努力地期待着反转看完了，有点失落。（啊啊啊别急着骂我啊主观评价x而且好角色和好游戏是不完全挂钩的嘛） 剧透篇攻略顺序：丽华 -&gt; 妙 -&gt; 彩 -&gt; 萌 -&gt; 薰 -&gt; 月个人好感度 record：薰 ≈ 月 &gt; 丽华 &gt; 妙 &gt; 其他 1. 角色（感觉是做得很不错的地方！） 总的来说的话，海斗、丽华、妙、薰、月都刻画得比较具体了，彩和萌还停留在比较标签的表层，一个感觉白纸到很难有实感，另一个天然又莫名、即使加上一些成长背景的补充也不够好懂，捉摸不透。感情推进的描写总体偏弱，（考虑到篇幅也不算长，剔除重复那就更少了），而彩线的感情线显得尤其薄弱，感觉就是“啪的一下啊”就好上了…… 朝雾海斗首当其冲地说说男主角吧。其实套着美强惨模板设定的角色挺容易让人喜欢起来的，稍微数一下两只手都不够数（甚至也可以用伸出手指和不伸出手指表示0和1，算上各类ACG表示个十位二进制数也不是什么大问题……），也是我一直很喜欢的男主模板！但是我觉得这个主角完全就不在列…… 随着知道的内容越来越多，越觉得男主除了姓氏（朝霧あさぎり……好听！）没有一处觉得喜欢……其实这种“一直在掩藏实力的很厉害的人”+厉害背后无数的努力和伤痕。嗯……我现在一下子能想起来的比如说《实力至上主义教室》的绫小路清隆和《斩首循环》的男主，然后在对比的时候想想为什么我会对后面两个超级喜欢但是对海斗就比较无语。 主要还是，海斗真的不大走寻常路……写这个类型的男主的话，“深藏不漏”一般和“深沉”“少言”之类的性格表现绑定，在剧情里也着重表现智谋和算计。嗯，海斗相比来说就有点轻浮了，或者说，感觉过于年轻和莽撞了一点，而且在玩笑上分寸感也比较差，同时，剧情里体现海斗的智谋的地方很少，强大也主要是强调他的武力值，让他实际上呈现出来像是一个……（虽然也设计了一些小剧情想说明不是笨蛋，但是智谋上的体现真的比不上大多数同类角色……） 可以说是更普通人的男主设定，增强玩家代入感吧……但是前半句真的肥宅味太冲，如果不是反复提及朝雾海斗美男子之类的话，……可能我确实理解不了这种黄色幽默吧（x半个游戏都泡在这种黄色幽默的氛围里，持续有种微妙的不适感，相比来说key社游戏的氛围我就觉得舒服很多……）好在，在个人线独有、并非反复出现的剧情里，这种氛围好很多，可能是要追妹子也会表现得比较庄重吧x。 薰 谁能拒绝一个明明是大小姐但是为了追求理想所以努力磨练武力甚至能够站在身边与我共同战斗的美少女啊啊啊！“共同战斗”我其实觉得对朝雾是很重要的，又或者说两个人都是掩藏着秘密的人，是孤独的人，薰如果是朝雾的恋人的话两个人可以一起为了变强不断地努力，朝雾如果是薰的恋人也能理解她即使是个女孩子也拥有的坚持，两个人多年以来像友人一样的默契也是超难能可贵的，至少就我个人而言我就很喜欢（）。 而且而且，薰你穿西装真的超靓的好吗！保镖的背景设定就是充满那种神圣的使命感的，而这种使命感我觉得在薰和侑祈身上提现到了极致，考虑到后面一个是机器人设定下的保镖，那最有感觉的就是薰啦。薰为了保护萌说的那些话不是超级卡酷一的嘛！还有什么明明很厉害超能打但是有点少女心之类的已经能脑补了……可惜不是官方钦定couple，连瑟瑟都没有，亲亲还要到国王游戏的BUZZ Game去找……（那张CG真的好美丽啊！） 初见面其实就能猜出来应该是女孩子是攻略对象的x，相关暗示确实不少，后面也说明白了是男主一直在帮薰掩饰真相（不过男主这么直接冲过去上手试探也挺……社牛的……），真好啊你们两个。喜欢薰因为喜欢我在认真地为保镖的使命和对我的感情、保护对象对我的感情之间挣扎，喜欢她对自己的感情诚实而果断地选择恢复身份，也喜欢朝雾在这一段故事里一直在坚持着守护薰和她的理想，也尊重薰最后的选择、放弃已有的一切去追逐选择了新的道路的她。 美中不足的话就是和萌共线没有个人支线了，呜呜，这导致和萌的感情发展线混线了，感情推进相关的表达并不怎么好，而且想想觉得要看对眼的话早该看对眼了嘛男子宿舍和女扮男装的女朋友贴贴之类的剧情不香嘛！！（打滚）（此处可以有本的啊本本本！（？）） 月 完美的Maid小姐不过只有面对我的时候是毒舌——！在所有的线路里都用特别的方式守护着我、陪伴着我，我晚回来了会把我想吃的料理藏在被子里保温，也会用她的方式如约教导我打扫的的方法，其实好温柔、温柔到那些其实有点过于严格的小举动都变得像撒娇一样好可爱……声音虽然是无机质的有点冷たい但是透露出一种很特别的萌——！因为系统原因没怎么点跳过，看了好多遍送我上学的时候说“何となく？じゃ、行ってらっしゃい”（没记错听错的话x）翻译成“不明所以？那去死吧~”啊啊啊好可爱（也不知道萌点在哪里啦qwq）（此处我的心理活动：拖长声音：“冷♥た♥い♥なーー”手动翻译：“哎♥呀~你干♥嘛~”（？））在个人线发现在被别的女仆欺负，被认为是污秽的存在，好心疼好心疼 心疼得不得了哇，结果真的开始表白心意说无论如何都会接受（废话，这个标准的话，朝雾不知道比月污秽多少……。。朝雾要是不接受我就把他掐死，我自己上了算了（？））之后记忆一个闪回，啊，好家伙，小丑是我自己（想想，前面也算是姑且有伏笔过吧）……可恶，这个时候我直接从朝雾海斗这个角色脱出对着这人不分青红皂白（？）一顿暴怒，呜呜呜我才不管你是不是被迫你怎么能——！不过反过来想想，海斗没有在这件事情上隐瞒月，其实还是挺有良心的，经历过海斗那些事情的话想保留人性真的很不容易，只是月真的原谅得太快了让我好没有实感，一下子原谅了就放片尾曲直接进AB篇了……（对了，这条线的AB线炖得好香啊x女仆诶！！这可是女仆诶！！） 2. 主线……这个故事根本没什么主线可言。对于这个开头，可能玩家比较容易产生的期待就是：想要知道男主的背景是怎么回事！，进一步可能想：想知道禁区是怎么回事！（这部的基调就不太会让人产生：我会改变这个肮脏的体制！的想法，所以这点可以无视。）嗯，好奇着好奇着，打了一条线应该就能通过男主的梦境对男主本身的成长背景知道得差不多，其中几条线的结局里透露出来的话就能了解到男主父亲的经历（非常简单地），基本这些就是全部的真相了，可能用几百个字的剧情段就能写明白吧……怎么说呢，这个疑问就注定了剧情好难走远，很难在男主身份上产生满足大家期待的答案……要说能在身分解密上满足，那怎么说男主也得背后有个家族有个组织然后顺着这个复杂的机构往下讲吧，这里没有的话，说两句就全都说明白了。隐隐约约在萌线探险的过程里暗示了两句不能招惹，也没有继续展开。 如果要解答第二个问题的话，本来可能也是个可以说很多的话题，但是故事的主场不是禁区，主角也很排斥回禁区，既不好说作者也没往下说。其实这种分区的设定在文字游戏里本来也不少见啦，不过考虑到这个是老作品，我就不拿别的分区设定的作品出来比较分析了。 不解答问题的话就靠主角对目标的追求或者角色的魅力去支撑接下来的剧情，嗯，朝雾海斗是那种典型的有“漂浮感”的日系男主角，看起来没什么明确的理想愿望之类的东西、和现实中大家所追求的东西也脱节，所以靠他是没法推进剧情的。所以这个游戏基本上就是一味靠着角色魅力推动着剧情，剧情也纯粹为了恋爱而服务……简单来说，就是，围绕着男女主的日常，围绕着女主的角色魅力，围绕着男女主的情感推进。 恋爱脑也不是不行啦，但是这剧情……也不够甜啊，而且重复段多到影响体验的程度了甚至还不能让人安心点跳过……体验就真的不太好了。而且感觉把可以讲好的故事讲烂了，明明是很适合表现那种日系的青春、校园、夏天之类的元素的故事，却把基调定在轻浮的黄色玩笑和阴冷的社会达尔文系恐怖之间，怎么说呢。。。哎……参考一下同样是恶人男主的《No Thank You》的基调……暂时没有合适的图，先空在这里，有空再加。……这个基调感觉立意就是上不去啊……拔也不够拔的…… 大概就写到这里。不是太满意的作品，也不知道会不会继续玩续作，目前在补key社的一些作品，月内应该会更新新的专栏x","categories":["Tavg","Iris"]},{"title":"2021学年第二学期总结","path":"/Private/844acbc3.html","content":"大一下学期学习情况‌‌‌ 不知道从哪说起，还是先贴成绩单吧。 学科代码 学科名称 总绩点 学积分 MARX1205 形势与政策 0.5 A- SP072 光纤通信与全光网技术的发展 1 98 EE0501H 电路理论（荣誉） 3 93 MARX1202 中国近现代史纲要 3 89 CS0501H 数据结构（荣誉） 3 88 PE002C16 瑜伽 1 88 PHY1223H 基础物理实验（荣誉）（1） 1 87 MATH1608H 数学分析（荣誉）II 4 86 PHY1251H 大学物理（荣誉）（1） 5 80 FL5201 大学英语（5） 3 78 ‌‌‌ 2021年总学积分85.64，排位45/92，算是堪堪飞过系均分，虽然也不是很好但是比上学期好……（好就好在没有想上学期那么离谱的64分化学…）~~并不算擅长的大学物理也可能是因为老师看大家网课比较辛苦所以批得比较放水……（不过总体上我觉得基本匹配我这学期在各个科目上花的时间的，并没什么不满，如果有不满那就是对我自己的努力不满。） ‌‌‌ 先挑相比来说学得还行的说吧。电路理论算是学的最认真的一门课，每道题都认真跟了，甚至在B站投了动态电路两个多小时的讲题视频（播放量堪堪上万x），在官方的辅导群里也帮学长做了一些答案，明明是唯一一个很有希望满绩的课但是没拿到满绩有点小遗憾……数据结构也抱着&lt;是吃饭的家伙！&gt;的心情去学了，不过红黑树之类的很细致的算法都只是略知一二没自己动手写过、考前其实很不安，没想到卷子很简单，更没想到很简单的卷子考得也不是特别好…（本来考完觉得95+肯定没问题呢，呜）…… ‌‌‌ 然后说说考的挺平凡的。体育和历史属于老师给分宽容啦，这两个科目我从高中起就没怎么拿过比较好的分数，历史也好在这学期网课没有太多背诵的要求，我也能够应对（我并不讨厌历史课啦，不如说我以前也是很喜欢上历史课的，只是不太擅长记忆逻辑关系不甚明显的文本段落）。 ‌‌‌ 最后说说被背刺的科目——大英5。在上一次学期总结里我说到这个学期要好好学日语，嗯，我也确实是学了，学的同时英语就摆烂了（虽然听上去这两件事没什么关系……）就是看到一些句子去想别的语言第一反应绝对不再会是英语了。除了上课作业还有大作业之外，基本上没怎么主动接触英语，结果啪的一下很快啊就……我真的会怀疑EPT我是不是我们班考的最低的，受不了啦，上学期明明还是靠卷面分数带动萎靡的平时分数的……现在我只能说在四六级考试之类的一定时间范围内会尽量多多接触英语的。 ‌‌‌ 还有一个很重要的事情。 ‌‌‌ 我在十几周进行大二上学期选课的时候和致远的老师沟通退课了。致远的老师真的很温柔，她说要是学分多课程多可以申请免修一门致远特色课，她说即使成绩50%也很可能可以商议留在致远，说而且这学期由于是特殊的情况很可能也不会有退远的情况，不需要太焦虑。怎么说呢，我觉得&lt;系均分&gt;这种标准，当然啦不可否认计算机的系均分就是会偏高一点，但是对我依然不是不可及的事情，至今为止我觉得虽然是致远的学生、我应该算过得非常清闲的，在”应该做的事情“中挑选我认为值得的去做，此外的时间学我想学的日语、也玩游戏作为几近去教室上课之外唯一的同学社交手段。还有一个原因，我非常讨厌一门课，从前面后面都能看出来我这人相当目光短浅（？），创新思维这个课基本上把我推到了一个做建筑设计的模块去，花了大量的时间我做得还行但是学得真的不开心好没劲，而且不喜欢学设计的老师的语言体系（……就是没那么言之有物）让我的上课过程也很痛苦，也算是一个重要的推手，决定退远之后我就果断退课了虽然只有两周结课，足以体现我对这个课的反感（也太任性了吧？）嗯，关于退远这个事情……后面细说。 大一下学期问题总结‌‌‌ 我觉得没什么问题，就是英语实在碰得太少了搞得考得好难看！分数的话确实很多门能再高点，不过反过来想有些科目也是老师放我一马，总的加一下我觉得挺合理的，嗯，我对我的能力的预期也就是40%-50%算不错了，30-40%就蛮好了，（毕竟计算机系厉害的人好多哇，在我这个投入期望的条件下很难有很好的成果）……这个也后面展望说吧，为了防止老师担心我作为咸鱼的意志会带来让我后悔的恶果（） 关于暑假‌‌‌ 我觉得这个暑假还是有些可圈可点的东西可以说的，但是不知道应该放在哪个板块好，就放在这里吧。 ‌‌‌ 日语肯定是有学一些啦。不过不知道近期考个N2够不够（）玩文字游戏基本都随便玩。真的很容易上手啊（中文意思的上手x） ‌‌‌ 寒假刚上来或者说寒假前一段时间报了一个小学期的通识课，课也不是太喜欢 给分并不怎么高 事情还很多，有点小难过，不说了。 ‌‌‌ 之后接触到了【NAS】的概念，然后开始折腾。折腾这个词真的太合适了，就是从啥也不懂开始瞎摸。买了一个一百多的小机器买了个便宜的机械硬盘，然后学怎么装群晖系统，学系统内置的一些套件和docker上可用的功能，学搭内网穿透。折腾了一段时间，现在也插着网线在用着，把自己的几个设备都做了同步文件夹、做了私人云网盘。哇搞得我好想学linux啊，我想要的功能其实不需要群晖、只要linux系统就能实现啦，只是考虑到学习成本我就先借用一下别人已经封装好的功能啦。 ‌‌‌ 然后折腾电脑。先把自己家的主机霍霍了，然后在学校又重新组了。学了怎么挑配件怎么搭配，怎么装主机，怎么配机箱风道，怎么给空白固态装系统，（足以体现出来我之前是真的啥也不会）各种零零碎碎的东西。应该先把跳线插好，所有东西都装好了再插线，碰到跳线真的是麻了，抱着主机去电脑店找人帮忙真的好狼狈（……）给好多个设备刷机装软件比如给Vscode配Cpp和Python环境都给我配麻了，好多重复工作，但是不同型号的设备用同一个镜像还是容易出问题，老老实实装重要软件然后配置好在写一次备份。 ‌‌‌ 折腾键盘。学了一些修键盘的技术然后试着跳线修了一把老机械键盘（但是我还是不爱它因为现在觉得声音不好听……）组了一把三四百档位的入门客制化键盘，这个看上去很复杂大概了解了一下主要还是钞能力的问题，只要把别人封装好的模块搭起来就行了（电脑也是），连怎么搭都是说得明明白白的。给这个键盘重新焊了大电池焊了贴片灯，现在在宿舍美滋滋地用着（嘿嘿x）我也看了那个传说中的瀚文键盘的视频，哇真的好厉害啊有点想学PCB板那种复杂又实用的电路。 ‌‌‌ 就是搞这些东西弄得我身上是一点零花钱都没有了！虽然本来就很抠但是现在是被迫过上了更加穷苦的生活…… ‌‌‌ 可恶，真的很喜欢高度实用性的知识，马上就能投入实践改变生活（）不过，不怎么喜欢在互联网上这么学东西，依靠我不断遇到或产生的问题凝练出关键词、翻找五花八门的博文和视频，得到的信息虽然丰富但是零散，（而且低效），尤其是在我的专业基础还不是很坚实的背景下，想要理解概念A可能需要理解前置概念BCDE，以至于更多；如果不去探究内容，仅仅了解一个问题的解决、一个事情的完成好像只是“技术”而非“技能”。嗯，我也没那么焦虑觉得一下子能把所有东西都学明白啦，就是我觉得还是系统性地学习某个东西、再补充细节和分支更好，而不是从某个细节或分支一直引申着往上学。学校里不知道会学到多少，又能引申到多少实用性的东西，但是后面我会努力地学的。 ‌‌‌ 正经的话，参与了两个Lab项目。嘛……怎么说呢，在上大学以前，我其实一直是很想搞研究的类型，不过现在很怀疑我的专业能力是不是真能给学科发展起什么作用，所以对未来的展望更倾向于世俗一点（专业的选择也不能再世俗啦——） ‌‌‌ 一个是大学生暑期科研见习，参与了电子信息系诸葛群碧老师关于时序算法故障预测的一个项目，难度不算很大，基本上是调研和学习了一些已有的算法，复杂的算法学习了怎么运用别人写好的模块（我真的很想知道我们学这个专业这么多复杂又繁琐的算法是不是都要完全明白怎么写……要记住也很困难啊！）（光是会用都很了不起啦的咸鱼想法产生了——） ‌‌‌ 还有一个是致远学者计划的微电子系陈长鑫老师的关于碳纳米管和黑鳞的制备实验，这个事情延续了好几个星期的，8月中下旬开始每周都去好几天，我大概算明白怎么做了，但是遗憾的是、会的是技术而不是技能，不知道为什么要这么做，感觉比较类似初高中的时候对着化学课本配溶液做实验，这里也是用学姐学长已经研究过的最优方案在做实验，（而且比起微电子更像化学系之类的要做的东西x），不过体验一下也挺好的毕竟我暑假本来学习效率也不怎么高……六餐不算很好吃但是还挺划算的，只要在附近做实验我都去六餐吃。这疫情算是让我把外卖零食奶茶全戒了，一下子体重恢复到正常人程度，真是可喜可贺…… 学期展望‌‌‌ 超级世俗和简单！在保护情绪健康的基础上尽量好好学好好考。（好像一句废话…）不想听bb的话以下三段可以折叠，直接从《所以》段开始。（） ‌‌‌ 我觉得怎么折腾我都不会变成单单是卷就快乐的人，做不到一上午一下午坐自习室，学习之类的基本就靠一点兴趣一点热情，如果到位的话也能很高效地把事情做好（比如说我就挺喜欢电路理论的x）一般来说就是投入最大产出比的时间把事情做到差不多、完成任务（简而言之就是吃低保，在学分膨胀的你交一个普通水平的学生单是正常完成作业和普通频率的认真听课学积分一般就能在80-85之间），然后再按兴趣和热情安排继续往下学……主动或者被动地把自己的大多数时间，进一步说是大部分人生，都奉献给一些对自己来说情绪和精神价值不高的事情，想想也很没趣啊…可能对很多又聪明又努力的人来说只是囿于眼界的自满，但是这应该也是一种合理的选择嘛。 ‌‌‌ 其实觉得我的人生即使只是得过且过下去也没什么让我不满的地方（这就是咸鱼吗…），只是我有许多渴望和愿望确实需要一些努力才能争取到，那也就希望把这些努力放在会让我更有热情的领域吧（x）。所以目标就是稍微前进一步再前进一步就很好啦！鸡血是很难听进去的，不过我也会有我自己前进的节奏的。 ‌‌‌ 也不知道为什么突然很想说这个，可能听上去很异类吧，尤其在这个卷比遍地走的计算机系。其实我觉得单从水平来说我可能并不太配得上计算机系，只是高考考得尚可，加上上交对上海考生的保护，这个算是众所周知的事情吧，基础也比较薄弱，普通上海高考生而非竞赛生的数理化水平，计算机什么的只能说玩得很多但是没怎么干过正事，从小最引以为傲的可能就是学东西不太会全情投入拼尽全力但是学得还算挺好挺快，但是在这个专业里应该也只是平平无奇的程度。有点自卑嘛也是很难避免的……但是也不是那种自卑，毕竟一直引以为傲的东西早就是习惯了没那么容易忘掉，而且拿个均分好像也还是很轻松嘛（标准是不是太低了点啊？）只是，按老师们讲座里说的那种“啊前十名和前二十名学积分差距也不大，不要卷学分要卷科研”那种精英培养的思路好像还是和我很有距离。 ‌‌‌ 所以我不要看那些最厉害的人了。不想被致远拖着往前走了，不想学习的时候想着学分学分学分学分，明明很想选俞勇的课想要多学一点东西而且即使考也能很轻松考过结果还是连考试都没去，担心着学分低了会退远，不想在考虑选课的时候到处去查给分高不高、给分高的话上课讲得模糊也无所谓之类的。只是想学会一些东西，分数当然不完全是绊脚石，可是不断地考虑着它的存在让我感觉到我的学习的动机和过程都不纯粹了。而且，我想要把选择认真学习哪些重要的东西的权力收回我手里，如果觉得生医工导论(荣誉)对我吸引力不大、对我的专业帮助也不大就不去学，如果理论力学(荣誉)对我来说很可能带来很大的负担也对我的专业也没有相应的价值也就选择更普通的专业基础课；多余时间，多余的好心情，投入在更重要更有兴趣的知识上。 ‌‌‌ 上学期我也是这么难过地看着致远课表先给我爸打电话，害怕听到失望和拒绝的回答，意料之中地听到他说也可以（……其实完全是知道结果的情况下在打电话，就像知道母亲节给我妈打520块的红包她一定会打一笔更多的回来一样（所以我就打52块她就不会再打给我了x）），让我好好考虑、对自己的选择负责 。好嘛，很久以前我就是个不太会为自己的选择后悔的人了。但是我还是知道这个肯定让他有点难过，而且他难过也没有跟我说、也没有试图影响我的决定，弄得我很难过很想哭，然后我就给我的好朋友打电话哇哇大哭（），现在整理好了理由和情绪觉得也不过是这个事情嘛。致远的资源，致远的保研名额，我当然很馋啦，但是所有选择都会有代价嘛，我觉得我的选择是正确的就可以了，就算错了我也已经准备好接受结果、再做打算了。（即使我的决定是很难改变的，还是很感动亲密的人都理解我支持我的选择。） ‌‌‌ 解释了一大堆理由，也可以说是为自己的算不上非常努力的学习方式找借口，不过这确实是我的选择。有兴趣的话也一起看看是什么结局吧，估计不会让人很惊讶的。（）写了好多，也不知道会不会看，我就是那种写东西会情绪上来就写一大堆的类型，一看又啥都不想删（）看了的话真的会有点小感动的（）不过这种不太正经的日记文风作为学期总结是可以接受的嘛？难得想写点真心话，还是不想用写论文的语气哎x。","tags":["LearningMatome"],"categories":["Private"]},{"title":"No Thank You","path":"/Tavg/RoseR/f2ce4f26.html","content":"无剧透篇 简评：身为恶人的我也能拥有一个明亮的夏季吗。 标签：现代/黑道(?) 推荐：4+/5（**低糖警告） *故事强度：4+/5（5-清水 1-拔作） *口味刺激性：2-/5（5-离谱 1-清水）（温和） 篇幅：中短篇（cg 全收集很痛苦，没有尝试…） 一次 &lt; 意外事故 &gt; 中救了大叔（浩一）的青年 &lt; 失去了记忆 &gt;，被大叔的酒吧 Sotano 收容。在这里，他获得了新的名字 &lt; 春 &gt;，与这里的店员们相遇相识、结下羁绊，也在这名为酒吧实为调查事务所的地方开始开展特别的工作。（剩下就剧透啦不能再说，呜呜） 是无法拥有自由的锋利的染血的刃，是长期浸染黑暗仍向往着明亮的毫不参假的心情……&lt;作业&gt;上交，&lt;暑假&gt;也就随之结束，救赎不可期。应该如何裁决我？生来就被确定为恶人身份的我。 ‍ 剧透篇 おすすめ順：博之 -&gt; 琉 -&gt; マキ -&gt; 浩一 个人好感度 record：博之 &gt; 其余 （本来做了2k字的ocr摘抄…同步软件bug全没了，也不想再摘一遍，主要看印象吧） 秋山博之： 所以，不要触及我。但是，眼前的这个家伙，又直直地看了过来。直率的内心，直率的眼神。仿佛月夜中泛着白光的匕首一般，直直地刺向我的胸膛。那是他与生俱来的唯一的武器。 「与其一一要我怀疑你背叛你，我宁愿怀着信任被你背叛。」 好痛。这是什么啊。小博一直想要做些什么，但他太过无力，什么都无法做到。结果全部都失败了。只能犯错、悔恨、哭泣。然而，为什么。小博这把无力的匕首会如此的.. 不对，其实我是知道的。从那个时候开始，在那片烟花灿烂的天空下，我就察觉到了。对这个与我截然不同的、本性善良的男人，我竟然感到焦躁，想要对他做过分的事。 「博之、我也好、世界也好。都不会像博之那样温柔哦。」 这家伙拥有我所没有的东西，而且至今依然能够保持着……面对这样一个温柔的家伙，我再也忍不住冲动，想要让他染上我内心深处的肮脏。我想让他深切地体会到，世界根本不会如此温柔。我想让他痛彻地明白，善意的前方就是无尽的地狱。手指搭上了扳机。然后是漫长的沉默。 我放下了手。 这家伙真是个… 笨蛋。 是第一条打的线，那个时候什么也不明白，只是看着两个人渐渐地走近。应该说是几条线里情感联接最接近普通的恋爱的一条吧……我个人很喜欢博之哦。（不谈是游戏背景的话，在三次元里我也很喜欢这个类型！）喜欢博之为了给客人更好的调酒一次又一次练习，喜欢博之即使有过不太好的遭遇依然选择站在明亮的地方生活，喜欢博之对待他人的善良和温柔、也喜欢即使这些善良和温柔不能推向好结局他也依然坚持不放手的固执和坚强。也是因此，春对他产生了复杂的心情，比起自己半吊子的微小&lt;善良&gt;更羡慕他能够拥有自由的毫无杂质的纯粹的善良和温柔，这种羡慕如此强烈甚至于走向嫉妒。想要让他知道什么是黑暗，想要他的善良和温柔也破碎，在做出举动前又于心不忍地感受到痛苦。 真的是个笨蛋啊。 黑泽琉：看上去相当冷酷的男人，独自执着地追查着妹妹的下落。用尽一切试图与春作交易，包括饭、似是而非的感情和身体。如果春的承诺是可信的，他就会信任春、试着依靠春获得结局；如果春的承诺是不可信的，他就会用自己的方法去进行豪赌。春的想法和他其实一定程度相冲，因为春想尽可能地让sotano的大家远离本社的黑暗，因为他深深知道深渊的力量；而琉则是想知道妹妹身上发生了什么，想拯救妹妹、为妹妹复仇。如果春以为琉好为第一顺位，那琉就绝无法从他这里直接获得真相；因此，比起好意，琉更需要的是承诺。在这段短暂的羁绊里，春很痛苦，我也好痛苦。（悲） マキ：同样是杀手，拥有相似的经历和觉悟。抱着随时会死掉的决心。拥有职业所需的钝感和冷漠的同时，マキ用他的方式包容着春特有的少年气的活泼。这种特殊的羁绊其实是超出我的理解力的（逃） 乾浩一：超出我理解力的感情（逃）应该说这几个角色的感情都不太像我以往所认识的情感的形态……除了身体上的关系之外，我好像找不到很多&lt;爱&gt;的证据，而只是一种特殊的羁绊而已x不过，这些羁绊也都有独特的魅力。 春：让人感到痛苦的、富有张力的角色。一方面，很深切地意识到春身为&lt;恶&gt;的一面，他是&lt;本社&gt;的锋利的刀刃，在大的决策上不会违抗&lt;本社&gt;的指令；他和成宫在车上的时候，说“如果不是我的话，替代品也要多少有多少吧”、说“如果不是我的话、只会比我做得更过分”……或许可以说是一种想要活下去的自我安慰（毕竟对于涉及到&lt;本社&gt;真实的人，&lt;本社&gt;一定会立即无情处理），但是其中的痛苦也能感受到。在浩一的End1里，这一点体现得尤其显然，&lt;顺利&gt;回到了黑暗中去的春，和成宫在走廊上走着、讨论着新的折磨人致死的犯罪指名，在展厅里听着琉妹的&lt;歌声&gt;，看到被折磨得不成人形的浩一，用笔干脆地结束了他的性命。——不是什么善良的好人啊。绝大多数的时间里，只是一把没有自由的刀而已；所做之事，只取决于持刀人的&lt;愿望&gt;，常常是黑暗的令人作呕的恶念。他的&lt;善良&gt;，是在手染鲜血的前提下的慈悲般的、自我感动一样脆弱的东西。 一方面，又不断地看到他充满生机的一面。在调查模式的篮字未开始的时候，除去一些莫名消失的时间片段，几乎没有违和感，仿佛就是一个年轻的善良的精力充沛的青年，和博之看上去没什么分别。会蹲在路边把刚刚从便利店买回来的吃食拿来喂乌鸦，会捡起流浪的脏兮兮的小猫，会担心、照顾邻居家无人看管的哭泣的女孩；以及他身在黑暗中一次又一次以自己的方式守护着Sotano的举措。他说已经不知道什么才是&lt;正常&gt;，实际上却用尽方法希望自己靠近&lt;正常&gt;的那侧，哪怕是短暂的夏季。其实也是因为他看上去如此具有&lt;人性&gt;，他的遭遇才如此让人痛苦。 一个无情的、训练有素的杀戮人偶是被不会像春这样让人有感触的。看到春在丝线之间努力地挣扎着，想要在完成任务的前提下尽可能保护大家，让大家远离自己所在的深渊，看到钝感的春一次又一次被拨动心弦，用他的方式（或许不那么好…）讨好般地渴求着爱。很难忘记，在琉线END1里，他被琉算计卷入一场恶战，琉用枪口指着将死的他问妹妹的下落；之后，他用尽全力给琉打了麻醉，靠在昏迷着的琉身边。天色慢慢地变亮，生命力渐渐地流失，看着湖面反射着早晨的新日发出灿烂的光芒。他在想儿时见过的、闪闪发光的游泳池的水面，问成宫，那是不是一场梦境，想着把一切都做完了、希望大家都没有事……“好困”这样慢慢被死亡吞没。 他说：这个夏天，真的、非常、非常地开心。每条线的结局里，他如是想着，然后转身又投入了那个黑暗的没有希望的世界。 其它的 身为刀刃的罪孽 让我感觉到迷茫。身为刀刃又不全是刀刃，还保留了自我的意识，所以又清算罪孽的必要性。 可是，如果是刀刃的话，罪恶又应该如何清算呢。到这个程度，已经算不上&lt;胁迫犯罪&gt;之类的了吧，甚至说更像&lt;自愿&gt;；而这种罪，正是由无数把受控的刀所构筑的，没有刀能够反叛或逃离，它们都是这样走在由权与利的所有者写定的道路上。即使刀刃是随时可以被替换的，只要权力与恶意都延续、罪恶也延续；即使刀刃本身的愿望是向着光明与善良的。如果我是受害人的话，我的恨意能够直指持刀者、不涉及刀刃吗。 作为普通人的我，没有资格&lt;同情&gt;春，也没有勇气与&lt;春&gt;发生共情。也早就过了那个会觉得&lt;杀手什么的设定好酷啊！&gt;的年龄；我不信任刀刃，常染鲜血的人逐渐丧失人的本性是常态，而伤害他人之类的事情，只要开始，人就会渐渐失去身而为人的自觉。即使是看上去如此&lt;干净&gt;的春也是一样，对离别、对痛苦、对死亡也早已失去了正常的感知。错的就是错的，有罪的就是有罪的，可怜的但是不可原谅的。 但是我还是会对春感到迷茫，为他的遭遇感到痛苦。这或许也是这个游戏留给我最沉重的感慨吧。 其它的 文档崩过一次，好多东西就没耐心写第二遍了……这次也就写下这些了吧。 一个一个角色在封面上显现，最后春也消失了，离开了这个夏天的、水池一般明亮的生活。是个很特别的游戏，在这个夏天，给我也留下了特别的印象。还是感叹一句，p社nb！ ‍","categories":["Tavg","RoseR"]},{"title":"鸟笼婚姻","path":"/Tavg/SakuraR/c4feacf6.html","content":"无剧透篇 总评：==金丝雀吟唱着虚幻的爱语和自由== 标签：R/现代/(?)校园 推荐：3-/5（没什么值得推荐的理由…） 篇幅：短篇 *故事强度：4/5（5-清水 1-拔作） 口味刺激性：2/5（5-离谱 1-清水）*（NTR 警告!!!） 故事背景（プロローグ）： 父亲车祸，企业破产，大小姐藤井佳奈子一朝陷入困境。自称是父亲友人的真行寺惣一为企业偿还债务，让佳奈子与他的两个儿子悠人和翔太共同生活，隐晦地对佳奈子施压表示希望其与其中一位订下婚约。 简评 希望主要角色都能够早日进行心理治疗，不要讳疾忌医。 ……开个玩笑。角色不正常不是游戏里的怪事，主要还是停留于表面的描写以及模糊不清的叙事造就了符号化的男女主，这男女主也都不怎么讨喜，故事也没什么值得期待的伏笔与真相，游戏体验让人失望…（会让我怀疑之前是不是对别的游戏太严苛了 的 程度） 剧透篇 攻略顺序：悠人 -&gt; 翔太 -&gt; 秘密共犯(?) -&gt; 叶山司 -&gt; 大团圆(?) 1. 角色评价以下评价的基础假设是：不是什么小孩子的话，问题优先从自身找而不是从成长背景。 佳奈子：作茧自缚的、名副其实的人偶知书达理、寂寞缺爱、温顺而美丽的落魄千金……【因为母亲是个活泼的人，父亲看到貌似母亲的她会难过、如果性格也相似的话就可能更难过了，所以想成长为完全不一样的人。】 嗯…但是这跟她的软弱有什么关系啊？想和活泼的人不一样所以希望更文静稳重 √ 想和坚强的人不一样所以希望更软弱 × 性格活泼还是文静可以是中性词，但是性格软弱就绝对不是吧，如果是“想和优秀的人不一样所以选择自甘堕落”怎么说都不是什么能理解的选择吧？ 很多游戏的女主角都遇到过困境的情况，蒸汽监狱里缇丝明知无力也不会放下手中的剑，灰鹰幻境里女主利用身为 &lt; 魔女 &gt; 的力量探寻让更多人幸福的结局，蝶毒的女主也没放弃过主动寻找爱和真相……面对问题不会简单地知难而退，更不会一上来就用放弃未来或放弃自己的手段自暴自弃。真行寺兄弟的对待没有一个是正常的，然而在两种过分的对待下，佳奈子除了唱かこめかこめ有过什么有效的反抗吗……有效的反抗，指真心地想要解决当下的问题，不是说无计划的逃跑，因为一时的痛苦而“逃窜”，更不是说轻而易举地了结生命。 兄弟线里，因为缺爱而轻信爱的诉说，而轻易地付出感情，付出感情后为此自我束缚；三人成为秘密共犯的线里，被拒绝触发了强烈的不安和自卑，故而做出了…的选择（说实话，如果是因为困境而以此笼络的话，这种剧情我是能接受的，不过这个对女主果然还是太超纲了…），之后获得了机会也没有把握好，把自己葬送了，但是实际上到这里也没事，这个时候两兄弟把事情担了过段时间她潇洒走人估计也没什么问题（就算这个时候再摆烂：那你把我送进去好了，两兄弟再反悔会变成包庇罪共犯，如果过分一点她也可以说是被胁迫犯罪的毕竟药也不是她的，如果有之前的照片，说不定能把这一家子全送走；至少是有了两人的把柄，应该一定程度上平等交流，对女主也是太超纲了……）；叶山司支线姑且还行，就好好感谢女主仅剩的一点人格魅力吧。 剧情里，除了强调她的缺爱、温顺和美丽，都找不到什么能称之为使她成为“她”的东西。身体和头脑都完整的女性，怎么做才能把自己整成一个完全的人偶呢。哀其不幸、怒其不争这话用在这里太合适了；代入党看了会痛苦（这个真的有人能代吗…），女儿党看了会流泪，我看了只会生气（悲）。 真行寺家真行寺的这位家长无法得到回应的爱让他扭曲，也继而影响到下一代，同样缺乏着亲人之爱的两兄弟，也出现了各自的异常。 以雪绘的相册为基础，悠人将这个幻想的女性作为精神的支柱。这个不是“你喜欢的是我的母亲雪绘不是我”的问题，是喜欢一个 Ideal 还是真实存在的人的问题……说到底，能对幻想角色抱以那么可怕的情感就很可怕了，如果把这个可怕的情感投射在真实存在的人身上就更可怕了，感觉这个精神疾病尤其严重，不就医真的不行啊。HE 强行得我受不了，嗯，所以是悠人对爱了十几年二十年的纸片人雪绘突然移情别恋了，想起来真实存在的女主角了？先不说女主角的个人特色有多模糊，女主角这个时候早就崩坏得差不多了……而且佳奈子什么都能原谅的宽广胸怀也真是让人不禁无语。 还有一个不知道在想什么东西的翔太。被兄长和父亲无视是很惨啦，但是从小当不良好像也不是什么值得高兴的事啊；用隐私照片威胁和控制女主，导致女主受了那么多伤害、生活也偏离正轨，对着女主的友人说出下流和过分的语句，使得女主在他的胁迫和死亡中宁愿选择后者，这个时候再洗白说他其实是喜欢女主的只是方式有点错误也洗不白啊。对了，还有那个深不见底的经验谈，我就是受不了你这种“因为自己曾经受到伤害所以伤害别人也理所当然”的人一朝就浪子回头过上幸福生活啊。那你伤害过的其他的女孩子呢？真心发问，没有打扰你和佳奈子之后的幸福生活的意思哦。 真行寺爹虽然真相线洗出来只是爱得扭曲，没犯过大罪，但是我是不相信的，不然叶山司支线的 BE 也就无从解释；即使没有手染鲜血…… 叶山司、睦 叶山司，知恩图报的自卑抖 M 青年，很好的女主工具人（），也是很好的剧情工具人。人设比较漂浮，建立在几句话就能说完的身世上，全靠玩家想象。作为真相线，我觉得也行吧，相比一下真行寺家的兄弟确实不知道好到哪里去了，不过和我个人 xp 对不上，真要说喜欢也喜欢不起来。 睦没有特别认真地写，只知道是个温柔善良有点女孩子气的可爱的少年，女主的坚定的守护者和友人，很可惜没有他的单线。不过因为写得也不多，如果有个人线，补成白切黑也是做得到的，那将成绝杀……不过我还是希望多少有一个人纯粹地喜欢着女主的，作为朋友的喜欢也是很好的，不然女主真的太惨了…… 2. 总评：金丝雀吟唱着虚幻的爱语和自由一句话就是，对这个女主和这个女主造就的剧情完全无法共情。不仅恋爱脑，还喜欢作茧自缚，把刻板印象的男凝人偶演绎到极致了。 来看看别的没有力量的 &lt; 雀 &gt; 在困境中唱的歌：（《至上之空》真纪-卡尔洛线） 真纪的歌声竟是如此透明，美得近乎神圣，满溢着无拘无束的自由。 悠远浩淼、蔚蓝澄澈、万里无云的冬日青空。孤独的歌声仿佛舒展着洁白羽翼的飞鸟，穿越那片无垠的湛蓝，追寻着未竟的梦想，升向至高的天空。真纪也闭着眼睛，回忆在岛上所见的蓝天。加之醉意的助力，他渐渐唱得忘我了。那间校舍、那间宿舍、能看到海的那片景色一一因为天空是那么高、那么高……那些日子里总感觉自己如此渺小。曾经急不可耐地将双手伸向天空，年幼的双手却连风都捉不住。不知在焦虑些什么，也不知要追寻些什么。虽然一无所知，却一直有着想要奔跑的冲动。晨光与落日。潮声与森林的气息。书页被掠过的清风卷起。友人欢快的笑声从远方的某处传来。并没有沉迷或是热衷于某些事物，却还是期待着能邂逅震憾心灵的东西。在天空的尽头，一定有什么在等待着自己。 ——本以为是这样。​ 「总想着要去触摸那片本来无法触及的高处。用自己的双脚去奔跑。就算没有翅膀，也能像鸟儿一样振翅高飞。总有一天一一」 飞鸟的影子渐行渐远，最终从视野中消失了。真纪闭上眼睛。 至上之空。无法企及的彼方。说出这句话的时候，感觉自己几乎要从阳台上纵身跃下。这是为什么呢。也许是因为即便全身在不停战栗，真纪也会满怀憧憬地去追寻太阳吧。就算灵魂被吸入遥远彼方的蓝天中也无妨。就算被阳光融化也无所谓。想要触碰自己所渴望着的东西。 本篇的女主：かこめかこめ笼中鸟哇笼中鸟 ——剧本立意高下立见啦。","categories":["Tavg","SakuraR"]},{"title":"至上之空","path":"/Tavg/RoseR/127e92ca.html","content":"无剧透篇 简介：离开了虚假的温室、身不由己地被卷入党争的少年的&lt;冒险&gt; 标签：R/黑手党 推荐: 4/5 *故事强度：4/5（5-清水 1-拔作） *口味刺激性：2/5（5-离谱 1-清水）（总体上比较温和） 篇幅：中短篇 关于Si-Nis-Kanto—（引用内容：卡尔洛线 真纪为卡尔洛歌唱）： 真纪的歌声竟是如此透明，美得近乎神圣，满溢着无拘无束的自由。 悠远浩淼、蔚蓝澄澈、万里无云的冬日青空。孤独的歌声仿佛舒展着洁白羽翼的飞鸟，穿越那片无垠的湛蓝，追寻着未竟的梦想，升向至高的天空。真纪也闭着眼睛，回忆在岛上所见的蓝天。加之醉意的助力，他渐渐唱得忘我了。那间校舍、那间宿舍、能看到海的那片景色一一因为天空是那么高、那么高……那些日子里总感觉自己如此渺小。曾经急不可耐地将双手伸向天空，年幼的双手却连风都捉不住。不知在焦虑些什么，也不知要追寻些什么。虽然一无所知，却一直有着想要奔跑的冲动。晨光与落日。潮声与森林的气息。书页被掠过的清风卷起。友人欢快的笑声从远方的某处传来。并没有沉迷或是热衷于某些事物，却还是期待着能邂逅震憾心灵的东西。在天空的尽头，一定有什么在等待着自己。 ——本以为是这样。 至上之空。无法企及的彼方。说出这句话的时候，感觉自己几乎要从阳台上纵身跃下。这是为什么呢。也许是因为即便全身在不停战栗，真纪也会满怀憧憬地去追寻太阳吧。就算灵魂被吸入遥远彼方的蓝天中也无妨。就算被阳光融化也无所谓。想要触碰自己所渴望着的东西。 剧透篇1. 角色剧本细腻，其中对各角色的刻画也很具体。下面主要以引用记录一下感受（因为剧本原文真的写得太具体，我觉得我没什么可以补充总结的…能用原文都用原文）（剧本上很喜欢卡尔洛，主要吹一吹卡尔洛） （おすすめ攻略顺序：卡尔洛 -&gt; 雄午 -&gt; 艾西卡） 卡尔洛（完美的男人——他甚至会做饭啊啊啊！）（？） 这种生物只要停下脚步，就会死亡。他不会成为被鸟笼囚禁的人。就连刀刃，也会变成他的羽翼。 个人最喜欢的一条线。一方面不可否认他身上无可辩驳的&lt;恶&gt;，他和他的蛮都对&lt;弱者&gt;是&lt;无慈悲&gt;的（他也正是从这样的&lt;弱者&gt;姿态浑身泥泞地挣扎着获取知识与权力，直至走上今天的位置也未曾停下），以及与之相应的，充满张力和生命力的执着和野心；但是与此同时，也能看到那副仍然是人类的躯壳下微妙的寂寞、脆弱和稚拙。 「黄粱一梦，掌权者的兴亡，成功与衰落——那是靠吞噬人类的欲望而膨大起来的魔都。在那条街上没有得不到的东西。代价就是，在那条街上就连骨肉也会相残。」 「蛮区是个冷酷无情、寡廉鲜耻、阴晴不定的女人。她会给予抱了自己的男人幸运，但第二天晚上就会抛弃他，让他走向毁灭。然后，还没等自己的身体冷却下来，又会让另一个男人上床。我们的地盘一一西地区，尤其没有节操。无论是秩序、是非还是道德，全都没有。」 他和他的蛮都有一样的&lt;冷酷无情、寡廉鲜耻、阴晴不定&gt;。 「有什么不对的？如果有想要得到的东西，与其追求表面光鲜，还不如浑身是泥地追求。」卡尔洛看上去乐在其中。真纪感觉自己稍稍接近了他那残酷而随性的本质。那是像孩子一样纯净无暇的想法。孩子们为了得到想要的东西，是不会为自己的撒娇、或是使坏的行为而感到羞耻的。只是单纯地、单纯地伸出手。 不过他最后说： 真纪轻轻吻了一下卡尔洛的脸颊，把他向前推出一步。就如同送他出门一样，目送他踏上决死的战斗。「你终于可以抓住你的恋人了呢。」「一一恋人？」「就是蛮区啊。」卡尔洛的视线和真纪仰望的眼神碰到一起，他嘴角缓了缓，接着站起身来，摸了摸真纪的脍颊。他的眼睛里满含笑意，清清楚楚地说道，「我的恋人是你才对吧。」 ——各种意义上的情话king（默）。 钱、权、情感、肉体，是交易的材料。他深深地知道自己的价值。 一一不亲近人类的美丽又稀有的动物，只在自己面前停下脚步，会让人有种快乐、恍惚的优越感。那种诱惑会让人开始渴求原本并不想要的东西。只属于自己一个人的爱。想要让这份爱成真的愿望，会让人发狂。 他知道自己的强大与脆弱。不相信任何人，关系以欺骗、利用和威吓为核心；无法真正的休息，无法将背后交给任何人。不产生真正的情感联结。也因此孤独。 「一一那样的对象只会成为累赘罢了。我已经见过不少人，一旦他们的家人或者情人被抓去做人质，就只能乖乖听对方摆布了。」卡尔洛抬头望着天。天上开始滴滴答答下起雨来。「所谓的情感，就是让人不自由的东西啊。」雨声越来越大，真纪逃进了附近的店铺屋檐下面，仰头望着卡尔洛。「或许有一天喜欢的人会被别人当作盾牌，但是和喜欢的人相处的时间如果能长久一些，这样还是会让人很开心的吧？」 他真的太孤独了。我想，或许也是因此对体会和付出感情更加恐惧和谨慎。一旦感受到了被所认同的人爱着，他的孤独一定会使得他放下所有东西去追求这份爱，包括他一直引以为豪的戒备；也因此在真纪的“背叛”下他陷入彻底的信任危机、无所适从。 某种意义上，可恨又可悲。在普通人的立场上，绝对是可恨远远大于可悲的；当然，在真纪面前后者一定更引发他内心的波动。关于是非问题，后面再细说。 不管在哪个结局分支，只要是真纪自作主张去救艾西卡陷入困境后被卡尔洛救了，之后真纪就会开始有意识地喜欢卡尔洛。嗯……好嗑！不能说没有某些心理效应的影响，但是结果来说对真纪还不错。不如说这个事情好就好在两个人能相爱，不然一定是铁be… 真纪想要点头，但是脖子一动就引发了剧烈疼痛。从左边锁骨下方到肩胛骨附近，掠过如同被烧红的铁块灼烧一样的痛感。就连呼吸都会带来痛苦，他眼中渗出了泪水。在模糊的视线里，映出了卡尔洛的脸庞。真纪很担心他。自己也不明白这是为什么。总觉得如果自己不在了，他就会变成孤身一人了。看到这么可怕的样子，还有谁能明白呢。其实他是个不聪明的孩子。是个恣意妄为的邪魅。并不是什么无血无泪的恶魔啊。 真纪真的好宠卡尔洛（）不过，真纪是发自内心向善的好孩子，也无法接受爱上一个恶的存在吧，爱恋的发生也一定在微小的善意后、又或者是发生爱恋后寻找微小的善意来弥补，他的同情和共情会补足他对这份情感的不安定。（话说，我没觉得卡尔洛不聪明啊…倒不如说，卡尔洛是太聪明了，在那个环境下如果他没有变成这个样子浑身污浊地往上爬的话，现在的处境一定非常糟糕。）恣意妄为的邪魅也不能说…卡尔洛的恣意也是在计算范围内，打破计划的行为也有其它计划补足，不变的是始终追求着更多的利益、追求着更强的力量。（那是他的Si-Nis-Kanto，冰冷的、孤独的，骄纵而美丽。） 「怎么可能呢……我哪有什么地方……可以让他喜欢。但是，我想让他感受到……诸如幸福之类的事物。他是个笨蛋，总是会绕很多弯路——看着他那个样子，我总是觉得放心不下。我说，艾西卡，我其实也是笨蛋吧？——我曾经相信自己一定能教会他，让他体会到他所不了解的，那种理所当然的温柔。但是结果，做出了最最残酷的事情的人却是我……」但是就算是这样，也好过让卡尔洛死去。虽然心里是这么想的，但却有种无法释放的悲鸣压得胸口剧痛。「他虽然那么随心所欲，却很好懂呢。」艾西卡抱住了真纪的背脊，肩膀被撞得猛然一晃。真纪胡乱抹了抹湿透的脸颊，抬头仰望下着雨的天空。天空的尽头被雨云笼罩，怎么也看不见。「……看到我笑，他就会心情很好，我生气的话，就会跟我闹别扭。我明明是知道的……我明明是知道的……」 真纪离开卡尔洛这件事情我真的觉得做得蠢蠢的，感情问题的大多数原因都是沟通不足……没必要自作主张啊！！！猜都知道卡尔洛肯定要爆炸…卡尔洛这回真的是，一边处理外敌一边被恋人猛捅刀子… 结局collect。 BAD1-心脏损坏无法用于移植，作为血库苟活数年，之后被买到妓馆又一次与卡尔洛相见。他向卡尔洛索要“像给一时兴起饲养的小鸟起名一样”的名字，为他调制了一杯和与他初识那段时间一样的鸡尾酒。 BAD2-[巧合]和卡尔洛留在本部继续工作被大变态直接抓走 BAD3-不相信卡尔洛能够赢过雄午，向黑脸会投降要求保住卡尔洛的性命（—再见了，卡尔洛。虽然我最讨厌你这样的人——但也没有办法再喜欢任何人超过你了。）（真纪蠢蠢！——）结果卡尔洛前来救人，他为了保护卡尔洛以身作盾换得黑莲会停止射击，之后两人都失去了安全感，迷失和封闭在甜蜜而扭曲的“爱恋”之中；那是永恒的、沸腾的地狱。（这个结局很有张力！！x） BAD4-决斗中卡尔洛失败，真纪自愿献上心脏，首领手术成功，有时还会哼起无人知晓的歌谣，说闻到了烟草的气味。 雄午是武力值超高的笨蛋（…），而且还自带一个受到威胁就会敌我不分等等的暴走buff（这个设定有点空降，我觉得没必要，不加这个、剧情矛盾也很充分了，加了这个又解释不了来龙去脉有点画蛇添足的感觉…不过没有这个设定没办法解释雄午一次有一次对着真纪发疯）。 因为是笨蛋所以剧情看着让人又着急又生气…（真纪本身就被设定成一个小笨蛋了！大笨蛋+小笨蛋组合真的是被身边的人耍得团团转…）（因为是笨蛋所以原谅他之类的事情，真纪能做到我做不到阿！（悲）） （可恶！周你真的好搞笑！） 黑莲会的氛围和Zenca不大一样，Zenca受到首领的影响，虽然也不是没有伙伴情谊的地方，但是绝对不是这样如同家族般的存在…像孩子一样的预备首领雄午，像兄长（或者妈—）一样的千冬，像父亲一样的前首领，（周不知道怎么定义就不加进来了……）黑莲会的大家像亲人一样相处和做事，也尽可能温柔地对待辖区的民众，和Zenca相比绝对是更靠近善良的那边（Zenca只能说是混沌中立吧…社会达尔文什么的绝对说不上友善） 剧情却逼迫黑莲会做出违背&lt;善意&gt;的决定：剥夺无辜的少年的生命，让重要的整个区域的领导者（其实这个层级关系我到现在还没搞的很明白…）活下来。有点类似小善大善做选择的感觉，但是以我朴素的现代价值观来判断，这种事情无论怎么样都是不能发生的，无论两边的对象（就算真纪真切地认同其实是他父亲的人想要献出生命也不能这样剥夺）。这边的故事语境就很悲伤。 没想到，竟然有一天有人对他说，比起那个伟人，自己毫无价值。对朋友的善意。对年长者的敬意。对年幼者的亲切。关怀。担心。道歉。致谢。重视亲近的人们。多年以来，真纪感到自豪的细微事情，被这个世界嘲笑为毫无意义。世人告诉他，这个世界需要的并不是你。 他一直相信自己能行。——迄今为止。有什么东西正在快速地衰退。就像流出的血一样，从真纪身上剥离。不是死心，也不是脱力，而是像在温柔的黑暗中，理所当然会出现的睡意那般温柔地，包裹着真纪。真纪闭上眼睛，窺探那份黑暗。意图从中寻找一个寄托。寻找能抚慰自己的记忆。 也是真纪受到创伤和打击最严重的线。连这条线的男主角，也觉得真纪应该为了“更重要的人”“有意义地死掉”，虽然后面改变了想法，不过我替真纪为此感到憋屈生气也是没办法的……如果不是雄午执着地选择真纪？大笨蛋他真的理解到底会发生什么吗？（不会，因为雄午根本就不理解死亡） （——如果你不是把我当作心脏容器的话）真纪虽然坦然地接受了雄午的爱抚，但一种伤痕累累的悲伤，正责难般地勒住了他的脖子。〈如果你说想要我。愿意重视我的话……）那大概是件非常凄惨的事。因为装礼物的箱子很漂亮，所以将它留存下来。只是这样而已。仅是被渴求，被重视的话，让他感到空虚。 剧本里将雄午设定成一个对现实世界缺乏感知、思考和理解能力的猛兽。他被黑莲会的“恩情”所捆绑着，这捆绑保证他身为“人”的那个部分，一般而言是没有问题的；在这个违背黑莲会“本心”的事件里，他身为“人”的微小的善良和无处倾诉的爱意萌生了，那份羁绊的捆绑力度也就不够了。混乱，疯狂，茫然，被迫做出的选择，祈求掌权的长者的怜悯、慈悲与片刻的温柔以获得一个好的结局。 无不是巧合。雄午和真纪两个人，都没有写下好结局的能力和决心。不妨看一眼卡尔洛线的BAD1和BAD4，就知道黑莲会在这件事情上原本绝不会有一丝心慈手软，这也会是雄午与真纪没有心意互通的情况下最有可能的结局。 艾西卡聪敏、温柔、无私、低调的完美的守护者。作为真纪的同龄人，剧情里和真纪同样与这个灰暗的背景看起来并不相容的、来自温室的学生，但是似乎一直背负着不为人知的东西（不止一次地暗示）。 艾西卡垂下眼睛，微微一笑。（我早就舍弃了的东西，却被你抱在怀里，一直没有放手）（真纪）艾西卡轻柔而郑重地在心中呼唤着他的名字。「……你的幸福，就是我的幸福。——这就是我的Si-Nis-Kanto。」 作为一个温室里的普通人，艾西卡也没什么能做的，并没有什么离谱的金手指（什么暗中掌控了一个组织阿什么的），只是比普通的学生多知道一些东西（这些东西是他可以用于交易的最后的东西，是他的护身符）；或许也经常接触和观察一些勾心斗角争权夺势的画面，对权势方面的考量高度敏感，而且本身似乎也很聪明。 这也改不了他是个脆皮啊！再聪明他也只是“有潜力”而已，并没办法立刻变现，只有他自己的话是没办法从两个现成的强大组织的斗争里保护真纪的；所以一路上都要依靠友人爱德华的力量。关于爱德华、亨利、以及艾西卡家族和财团的联系等等，剧本其实保留了大量留白（不算特别影响体验，大概能猜猜，爱德华就当是愉快犯理解就好了，是推动剧情的工具人），剧情也靠爱德华与两个组织的周旋来推进。也是在这条线里，主角这方真正对上了财团，有与财团交锋的机会，这也赖于财团逼迫艾西卡回归傀儡身份、而艾西卡为了自保提前留下足以重创财团的信息，真是无巧不成书… 说到这里就不得不说说神奇的真纪爹亨利了，一方面默许组织挣扎着想要以他儿子的生命换他生命延续、对下属说“如果是个没斗志的孩子就夺走他的生命吧”，多少年来对他儿子不闻不问，他儿子在不知道多少个线里肉体死掉精神坏掉明明完全可以预料；另一方面又在特定几个线里施以“怜悯”，在艾希卡线以身挡弹或传递权力、对真纪寄托期待，上演父子亲情。这种父子亲情真的太超前了，我很难理解（悲），以至于我感觉亨利的人设也虚幻起来。（而且关于亨利的伟大、所有描写都漂浮在他人诉说，在剧情里其实没什么实感…） 歪了好多还是没写艾西卡。怎么说呢，艾西卡真的挺好的，而且每条线都是这么不求回报地无私奉献着，也解释了他对真纪抱以特殊感情的原因，或许是因为他们的感情形成在我的观测之前，我也没什么实感…从人设张力来说，还是卡尔洛更胜一筹；不过要真的恋爱过日子的话，艾西卡这种是不是比较不错（沉思）（？）。 2. 关于Si-Nis-Kanto（引用内容：雄午线决斗描写） 雄午扭转上半身，躲过了直接攻击，但是肩胛骨附近被割裂，他一脸痛苦地皱紧眉头。卡尔洛手里的刀刃上滴下鲜血。天空是无边无际的湛蓝。它在凡人无法伸手触及的遥远高处俯视着地上。在它的光芒笼罩下，人们探寻并且挣扎着，做着久远的梦。知晓了欲望，被纯真所苦，就算失去了和自己肩并肩的身影，人们还是会继续抬头仰望。乐园并不存在于任何地方。只是在广阔的天空中不停坠落而已。 （还有开头推荐语那里引用的一段） 这个话题是作品的名字，也差不多可以说是作品的主题。在每一个故事里，所有人都在一遍一遍地问真纪想要追求的“Si-Nis-Kanto”的模样。 雄午线里真纪对黑莲会提出至上之空作为献出生命的条件；艾西卡线爱德华问真纪：“你想要过什么样的人生？”这也决定了多个结局的分支去向。 其实最开始认识到这个概念的时候，真纪也就是个孩子，对艾西卡说，有好多甜点吃就是最理想的天堂了，他还对自己所期盼的东西的形态没有概念。走出温室，一路走一路看，渐渐地爱上了谁或者获得了谁的爱，渐渐地拥有了要守护什么的想法，认识到了自己的至上之空。真纪的世界很小，也没有那么多复杂的权势和利益，只是守护自己和自己的恋人而已，甚至不是“获得守护恋人的力量”。 卡尔洛的梦想是他一直渴望的蛮都（后来又加上了一个真纪），雄午的状况和真纪差不多、也是摸索中，艾西卡的至上之空大概就是真纪的幸福（悲）。在整个故事里，所有人也都是这样为心中的至上之空努力着。真纪和雄午为此抱以不加掩饰的真诚和执着，卡尔洛为此“即使满身是泥”也要不择手段地追求，艾西卡也为此一直不声不响地努力着。 不能说确切地获得了什么“有意义”的感受，只是阅读完一段又一段这样的文字，还是多少有些感慨，也无从说起。 3. 关于黑手党系的题材其实不太知道该怎么描述这个标签……姑且就用这个词吧。 如果说是将主舞台设置在这个环境下的话，我大概只玩过乙女近作《虔诚之花的晚钟》，二者的定位和情节走向都不大相同，相同的是，也是我很喜欢的一点，从来没有试图洗白男主角…… 已经身处浑浊的污泥之中，是你死我活的境地，想要存活下去恐怕也只能手染鲜血；一旦染上鲜血，恐怕也再也无法离开这样的污浊。卡尔洛是这样，雄午也是这样；他们在绝望的人与人之间赤裸的欲望的角逐中争斗不休，大家各自有各自的理由。我觉得这种情况下，杀人者都有被杀之觉悟，并不能说完全的恶。而是否恶，应该看对待污泥之外的人的态度；剧情里，黑莲会“购买”和卷入了真纪，Zenca为了获得真纪伤害了局外之人（学生），而黑莲会本身对弱者的态度就比Zenca好，Zenca几乎一味地支持着蓬勃的欲望与其衍生的恶意。相比来说，黑莲会是好一点，不过也没好太多（）不管观察到他们何时流露的微小的“普通”和善良，他们们确实都是污泥中的存在。 而被卷入污泥之中的存在，真纪是绝对的没有自保之力的弱者，这是形势所迫的，即使真纪无敌聪明也没办法逆转局势，他所能做的只能是在动乱的局势中找到一个可以驻足的点，试着离他所向往的东西更近一点。就是这样的情况而已。如果不借助爱与慈悲，他绝对做不到安全地留存，一定是在漩涡中被绞得粉碎。 「等一下我来念给你们听，这个故事很有趣哦，是在云上的帝国里遇到巨人的冒险故事。」「结局是大团圆吗？」「当然了。」「故事总是会以大团圆收场，因为讲故事的人总是希望你们能幸福呀。」真纪说，「天空会降落在触手可及的地方。」 这段出自雄午线的GE，我觉得一定程度上也描述了作者的态度。 为这具有一定合理性的、美好的结局感到片刻的温暖，也是不错的。","categories":["Tavg","RoseR"]},{"title":"Sweet Pool","path":"/Tavg/RoseR/1b7b8fcb.html","content":"无剧透篇 标签：R/致郁/异形/宗教/校园/微恐 推荐：4/5（慎） *故事强度：4+/5（5-清水 1-拔作） *口味刺激性：5/5（5-离谱 1-清水）（呃呃、感觉女性向游戏这么重口已经…封顶了！） 篇幅：短篇 好似爱恋却并非爱恋，正如我们好似人类却并非人类。单薄纤细的、脆弱病态的磨砂薄玻璃一样的少年，还有独来独往的、冰冷的或称之为&lt;完美&gt;的少年；散发着潮湿水汽、浓郁血腥味道和不知名字的诡异香气的黄昏。这或许就是命运里就被设计好的、悲恋的物语。 恋ではなく、愛でもなくもっとずっと、深く重い—— 简评： 值得在意的独特的氛围感、值得回味的选项与结局。单线、单&lt;官配&gt;，是命运将两位主角牵系在一起、让他们成为彼此不可代替的相互牵引的存在，同时也把他们推向无法逃离的深渊。 而选项“本能”、“理性”和结局的关联也有一定合理性，令人感慨。 剧透篇1. 特别的主角奠定了整个故事的基调 「说什么吃完 了…只喝了饮料能算是吃完吗？你回家吃饭吗？」「肚子饿的话，可能会。」「什么叫可能啊！」小睦拿起托盘走向垃圾桶，大声感慨道。「蓉司真是的，怎么说呢一一好像刮一阵风就会被吹走。」「…..这是什么形容啊?」「不想吃就不吃，不想睡就不睡…..就是这种感觉。」「是…..这样吗?」周围的人是这么看待自己的吗? 有一种说法是“整个故事就是纤细敏感的这位少年的絮语”。蓉司，或者说&lt;蓉公主&gt;（），会看着鱼缸感慨鱼的生命的纤细的人；他的性格、以至以他为主视角的这个故事诉说的语调都仿佛是浸泡在鱼缸里、雨水里，潮湿、粘腻、带着雨水的腥气。曾经受到的冲击虽然在记忆里隐蔽了，却仍不可避免地在心上留下印痕。他一直对他人说着淡漠又疏离的句子，等龟缩回到自己的世界又为自己的孤寂感到安心又哀伤；也羡慕着睦，却始终无法与任何人建立强烈的羁绊。 让我想起来《桥姬》的水上，但是水上对这世上的某人怀抱了强烈、愿意为之付出一切的爱，因此实际上对事实的疏离感没有那么强；而蓉司可以说是真正的“风筝”：对姐姐的亲情的牵绊是唯一的线（姐姐希望蓉司能够获得幸福），然而双方的生活已然走向独立，蓉司也排斥自身的存在对姐姐的幸福造成影响（蓉司不想干预姐姐的幸福），所以那是脆弱的线。 说不定自己内心期望能藉由一切都是妄想、自己是曾经死而复生的怪物之类的想法来逃避现实吧。即使真是如此。也无所谓。从以前开始就是一个谜团。自己的存在到底有什么意义？自己有生存的价值吗？不过，已经无所谓了。现在，已经找到了自己的价值。姐姐用自己的名字为孩子命了名。仅仅因为这样，心中就充满了不可思议的安心感。仿佛丢开了沉重的包袱，心情顿时轻松起来。无论自己以后会怎样，传承着自己名字的生命会和姐姐一起活 下去。这样的话，自己一一就可以抛下一切陷入疯狂。 （蓉司对自身存在的意义的认识真的很单薄…） 与此同时，独自承担着无法向他人诉说的痛苦……（以及这件事自身附带的尴尬的感受）。连着几天不吃饭，在拉着窗帘的黑暗的漂浮着血腥味的房间里蜷缩在床上，被无法描述的不安与无法倾诉的孤独笼罩着；以至于醒来才意识到已经是工作日了。克服了很大的恐惧带着&lt;样本&gt;前往医院，却发现证据也已经消失；仿佛是只有自己能见到的恐怖的幻觉在缠绕着自己，自己似乎也无从确认它是否幻觉或真实。 某种意义上，人也就是被自己所爱的人与物、爱着自己的人与物牵系在这个世界里的。而在遇见哲雄、对他产生依恋之前，蓉司已经是风筝线将断未断的状态，几近漂浮在那个潮湿的血色的黄昏里了。 2. 建立在理想化的语境下的&lt;魔女的世界&gt;蓉司的描述里独特的氛围感让我想起来《魔法少女小圆》里的那个魔女控制下的秘境；巴士向前不断地行驶也永远无法离开的小城，窗外经久不散的迷雾。当注意到时，所有身边的人回过头，露出一张单调又可怕的面具一般的脸。 我觉得这个世界给我的感觉也很相似。昏暗的化学实验室、窗帘后血红色的黄昏，圣母像上的干枯血块一般的污秽；蓉司躺在幻觉般的充满红色液体的浴缸里，关着门一个人独自缩在昏暗的充满微妙气味的小房间，沾上污渍的游动着五颜六色的热带鱼的鱼缸。在某几个结局之前，很难把这个世界与现实的世界做等同，而是处处漂浮着异常感；无时无刻地在你耳边用气声小声地反复地念故事开头那种来源于某种幻想般的异形生物的不甘的声音。 这是校园的生活吗？背景似乎确实是校园，但是这个&lt;校园&gt;的日常好像从来没和我们所认识的普通的校园接轨过。蓉司的生活里，念书和学习都是漂浮在“表”的行为，而为非人感的“幻觉”、为无法释怀的孤独感而痛苦才是“里”的内核；在这里得到强调的，仍然是作为&lt;魔女的世界&gt;滤镜下的异常感。 以至于在甜池结局里，听到哲雄的表述反倒感觉困惑。 似乎是快速电车要通过了。要坐的是随后就到的慢车。​这时，身边有几个学生擦身而过。是高中生吧。那洋溢着过度自信、单纯享受着当下的面孔，如此令人怀念。看着学生们吵吵闹闹的身影，脑海里突然掠过某些影像。热闹的教室。天马行空、兴致高昂的闲聊。化学课上进行的实验。小卖部里出售的面包。预定下周进行的小测验。又有不少学生为此苦恼不已。约定放学后一起去逛逛的话语。经常光顾的店。 这一段里的故事、我们在蓉司的视角仿佛从未亲身体验过。蓉司的&lt;魔女的世界&gt;里，他本身似乎已经和普通的校园日常绝缘了；这些所谓实验、面包、测验，是世界外的&lt;人&gt;传达至此的只言片语，对蓉司毫无实感。是这个&lt;魔女的世界&gt;囚禁了蓉司：在蓉司的世界里，只有哲雄能够自如来去；而被牵扯进入其中的睦、作为&lt;人&gt;、也绝无法久居。在善弥结局里，善弥直接把蓉司拖进了他的、更具兽性的可怕的世界，彻底摧毁了蓉司。 纤细的蓉司深切地向往着、渴望着身为&lt;人&gt;的&lt;日常&gt;，却出于各种原因被疏远着，同时又被&lt;非人&gt;的元素包围和困扰无法脱出，因而造就了蓉司自身的&lt;魔女的世界&gt;。而哲雄是他的救赎者。哲雄身上的气质与这个&lt;魔女的世界&gt;高度共鸣；他会倾听蓉司内心对那些&lt;非人&gt;感的不安、陪伴蓉司度过那些恐惧。和蓉司一起坐在天台上吃面包，带蓉司和家人一起吃热乎乎的饭，与蓉司一起体验身为&lt;人&gt;的感情和生活。而不止于象征着&lt;非人&gt;的兽性的吸引。 ——楼顶。​随着清爽的风吹来些许漂白粉的味道。背靠围栏而坐。一直都只喝饮料。递给他面包也不肯吃。将视线移向身旁。乌黑的秀发。白皙的皮肤。那最初不信任别人的眼睛。一一永远。突然回过神来的时候，要乘坐的电车已经到站了。感觉就像做了个白日梦,哲雄缓缓咽了下口水。刚才那是……学生时代的记忆吗?​可是，他无法清晰地回想起来。那或许就是他长久以来丢失的那部分记忆吧。​如此令人怀念一一却又如此叫人难过。犹如胸口被残忍地碾碎的痛苦。​​那是至今从未见过，如片段般的影像。​为什么会突然回想起这些事情呢?​​车门开启，待需要下车的乘客都下车后，电车即将再次启动。哲雄像是要转换心情似地吐了口气，登上了电车。​​​ 在这个结局里，哲雄所回忆起的那些干净而纯粹的身为&lt;人&gt;的日常的片段，或许也都是他带给蓉司最珍贵的东西了吧。 这些只有他能做到。他也是弥合蓉司心里的残缺与矛盾的最重要的拼图。全选理性会走向&lt;睦&gt;的分叉，蓉司的存在无意识地打乱了他所向往的&lt;普通&gt;，而也体现出蓉司也已经注定无法回归那份&lt;普通&gt;；全选感性走向&lt;善弥&gt;的分叉，蓉司对身而为&lt;人&gt;的向往没有胜过他本能的控制，也导致他无法驻留在自己的、一时间尚还能维持平衡的&lt;魔女的世界&gt;，被拖进了他人的深渊。 从这里，二人的命定感也显露无疑。或许这种命定感背后是身为&lt;非人&gt;的吸引、是两个孤独者的依靠，而并非传统的&lt;恋&gt;或&lt;爱&gt;，但是却无比地深沉又紧密，无法代替。 3. 其它复杂的世界观导致故事很难做到面面俱到是必然的，但是这里我不想复述一些别人也提到过的剧本上的感觉不合理的地方（比如睦结局的行为并没有带来&lt;非人&gt;的属性、老师也没有体现出&lt;教徒&gt;的属性…），这个故事独特的氛围会导致玩家被蓉司的想法推着走、而甚至无暇怀疑这些细枝末节；回头想起时，大局也不因这些细节而有所损伤。 其实爱的形态是各类R18游戏共同的主题。这个故事以一种特别的方式让玩家也对爱的多样性产生新的认识。在这个故事里，爱是身为&lt;非人&gt;的激素的吸引、更是两个孤独者的慰藉。 「即使不是人类，即使你是雌性……..在我看来那家伙只不过是很普通地考虑着平凡琐事。就像，普通的人类那样。」「那是，什么意思….?」「你，不觉得寂寞吗?」被他唐突地一问，蓉司有些惊讶。哲雄投来真挚的眼神。「想到自己与周围的人不同…人不会觉得寂寞吗?」不寂寞。努力深信自己并不寂寞。不这样想的话，就无法保护自己。对这逐渐被侵蚀的身体、对孤独一人的世界都感到万分恐惧。觉得自己以外的一切都是冰冷尖锐的利器。所以，自己也不得不变成这样。其实…非常寂寞。严密包裹在外的伪装层层剥落，些微的伤痛自混沌中变得明朗。 蓉司询问似地凝视着哲雄。「现在….我只想和你在一起。仅此而已。」这也许只是单纯的互舔伤口。但是，即便只是互舔伤口…..又有什么不好呢？世上也确实存在着因为这么做而互相吸引的灵魂。。听着哲雄说那些话的时候，自己也想说些什么。然后想到的其实都是些无聊的事情，即使如此还是想问问看。 因为剧本本身真的表达得清楚又细腻，我觉得我也没什么需要补充的……激素的吸引是二人注意到彼此的契机，&lt;非人&gt;而经历的共通的孤独感、想要融入&lt;人&gt;的世界的向往感使得二人能够成为彼此不可代替的慰藉……故事的氛围是冰冷的、可怖的，可是唯独两个人、两个人之间的情感是明亮的、温暖的，他们的情感使得作为二人这段&lt;非人&gt;旅途的终点的游泳池也成为&lt;甜池&gt;；那是二人的美丽的羁绊的葬身之地。 即使结局如此也不会后悔曾经相伴的、珍贵的、甜美的羁绊。","tags":["N+C"],"categories":["Tavg","RoseR"]},{"title":"Room No.9","path":"/Tavg/RoseR/d771e2f2.html","content":"无剧透篇 总评：灰色纪实影像中拥有引人深思的 meta 系隐喻 标签：R18/致郁/现实 推荐：4+/5（*慎） *故事强度：4/5（5-普通 TAVG 1-拔作） *刺激性：4/5（5-离谱 1-清水） 篇幅：特短篇 （4H） 小林大地（A）和安昙诚二（B）是十余年的挚友。由于小林大地与女友分手而不舍得支付退票的差价，他们临时决定前往冲绳旅行，却在到达后意外从一个陌生的房间醒来。房间里可以高质量满足所有生活必需，除了毫无离开的方法，甚至连窗都是显示器做的。每天可以通过完成任务面板上的一个任务获得 10 积分和第二天的伙食，而任务面板上的任务的内容却让人望而却步。确定了的、成为实验对象 A 和 B 的二人，必须完成 A 对 B 实施 X 相关行为和 B 对 A 实施身体伤害之一的选择。 认为着“即使失去一条手臂也能活下去的”小林大地和秉承着“如果无论如何都要受到伤害，就选择身体上不会留下痕迹的那种”的安昙诚二，明明是完全的异性恋和坚定的挚友，却不可避免地被不可抗拒的力量推进了常人无法想象的深渊之中。 可以离开吗。离开后可以还像原来那样吗。 （*玩家将以小林大地为主视角进行选择，这也隐含了对大地想法的影响，影响了这对友人双方的心理状态，使得故事走向不同的结局） |小林大地|安曇誠二|| ————| —————||天然才|刺草ネトル| 美术音乐和 CV 表现优秀，剧本关于行为和心理的描绘都细腻到让人沉默，是值得一玩的佳作。不过，在 A-B-C 三条线路中涉及较为重口的 X 伤害描写和扭曲的心理描绘，。剧情的设计注定了其中的一些片段不可能是预想到的富含情感的融合，，这种感受也因人设、世界观与现实世界的接近而得到强化。 与此同时，我个人认为该游戏存在一种引人深思的 meta 系隐喻；在剧透篇我会对这种隐喻进行解释。 剧透篇索引：简单的想法-&gt; &gt; 附录（结局综述，私藏片段） **两位角色心理和性格的变化、我并非无法感受到、只是事实上我在情感上的感知、分析和表达比不上很多在心理学和文学等方向有专长的玩家完善，所以在这里我不再详述关于心理和性格的分析（可以移步知乎高赞答案），而是给出我的角度的感受。 1. 总体感受个人游玩顺序：A-》B-》C-》F-》D/E 总体感觉：真实又痛苦，因为真实而更加感受到痛苦。 玩之前并没有详细看介绍。一开始或许是抱着“或许可以是那种友人变恋人一起度过难关的剧情”开玩笑地看待的，感觉有点像里的那种神奇领域，性冲动和性幻想都在“被迫”的掩饰下合理化（就像一些类似九号房间的 cp 向同人文设定一样）；但是这个故事不是这样的……痛苦正在于两个人都太真实了，就像一个正常的普通人以劣势方的立场误入了拔作的世界。（应该是容易设想的感受吧？）这两个人的面对这种 &lt; 任务 &gt; 的反应完全就是普通的、现实中的好友的反应…… 就是，想象一下是现实中自己和自己的好姐妹遇到同样的情况，应该也是类似的吧。 其实在各类 ACGN 作品里，创造出的“类似于现实但有别于现实”的语境的情况是非常多的，毕竟艺术高于现实嘛（笑），拔作的语境就是极端化和扭曲化的，《人渣的本愿》那种语境也是非日常化的；有些故事的语境，不能肯定地说现实中绝不存在（毕竟现实有时远远比作品魔幻。）但是我们、至少是我、所在的称为现实的日常的语境里是绝对反常、异常、不会复现和发生的。然而，九号房间的情况就是：。在这个前提下，继续探索一对普通的挚友在这个环境下的心理变化。 如果看过我几篇长评（如 18R 游戏杂谈、花之女王 repo）的话，可能会注意到我一直以来特别在意剧本创作者在剧本中的“介入”行为：超世界观的力量、临时加入无铺垫设定、极端的巧合……而在《九号房间》，就存在唯一一个、也是极其显著的“介入”行为、也就是九号房间本身，它是这个故事得以发展的基石。对游戏角色而言，九号房间的本质是完全的黑盒：实验的策划人？实验设施如何建立的？机制的运转？实验的目的？……以大地和诚二的视角体验这个故事的过程中，我们和他们无从得知“超世界观”的力量的真实。九号房间所呈现在我们面前的信息，也不过是：冷漠地重复执行着机械的规则，拥有对于游戏内的“外面的世界”的完美的伪装（无法反抗、无法追究）。 在下面的段落，我将会解释我对“介入”行为的认识和对九号房间 meta 系隐喻的理解。 2. Meta？在这里完整地解释一下我所理解的剧本和 meta 体系。 如果把作品的世界当作一个盒子，似乎存在这样“权限”的观念： 1. Admin：创作者（世界规则的制定者，决定盒内人的生活语境，也有能力直接介入盒内人的命运） 2. User：盒内人（生活在盒内的人。即使被设定为“神明”，在非 meta 作品中也只是 User 之间的权限差别，远远比不上 Admin） 3. Guest：玩家（由 Admin 指定了部分权限，一般来说对故事的影响力在 Admin 和 User 之间） 此外，存在重要的补充定义： 观测实际上，盒子存在于玩家的脑内（创作者和每个玩家心中的盒子其实都不太相同；我们会为盒子中空缺的部位按自己的想法进行补全）。盒子只有被读者“看见”、并且被读者认为是“合理”的，才能够维持形态；自相矛盾的逻辑下可以创造出作者心中的盒子，但是这个盒子在玩家眼里无从维持。 约束因此，创作者在设计世界观的时候是存在约束的。 在创作者设定一个比较完整的世界观背景（剧本的“起始条件”）下，无需额外的推动故事就能自然地在盒子里发生，而创作者之后要做的、也就是选择信息为玩家开放“可读权限”（故事陈述和适当的伏笔），等待这个故事完结；它也可以在中间设定一些个性留有空白的角色，赋予玩家“读写权限”来推动故事，让这个盒子走向不同的结局。 当然，完整的世界观背景是困难的，一般而言都是“点亮一个自洽的小区域”、剩下的就交给玩家想象；接近日常的世界观背景是更容易描绘和取信的。 干涉也就是创作者对盒子的“介入”行为。一般而言，Guest 的来意是为了观察盒子里的故事，不是为了观察创作者对于盒子的行为。在盒子里突然地出现不符合盒子初始设定的条件一旦被观测到，盒子的“形态”维持就会受到影响，换句话说，故事的自然逻辑被破坏、真实感也就因而下降。 这就是我一直以来认为的、较为完整的创作者、角色、玩家交联的“盒子”权限体系。接下来解释 meta（即“超越”）。在《君彼女》和《ddlc》之类的 meta 作品里，作者将盒子内的女主角的权限超越了盒子本身、而延伸到了盒子外的世界，故称之为 meta。 整齐的句子可以这么写：玩家在《九号房间》里观察两位男主角心态变化的行为，和实验主持者的视角是重合的（而我，也是在这样的观察之后写下了“报告”）；创作者设计《九号房间》作品世界观的过程，和实验主持者的行为也是重合的。 又或者说，从《九号房间》这个作品内部理解，实验组织的力量就是创作者和读者的力量、实验组织就是创作者和读者的化身。如果这部游戏将实验部分报告的选择权交给玩家，这种隐喻会更加强烈；不过，交给玩家拥有“读写权限”的大地，其中的内涵其实仍然是不变的。 我想这种感受也不是我特有的，在某乎上姐妹的评价中，容易看到“玩了这部游戏，很难想象同人作者都是怎么舍得把自家 cp 关进九号房间的”之类的说法，其实就是一种对这种隐喻的理解的呈现。 某乎的一个姐妹说“或许有的关系最好的形态就是友情。”，就是其中一种思考。“实验”这个超自然的力量与我们的幻想高度重合，而《九号房间》则是以一种尽可能真实的方式呈现盒子创造者的“幻想”自然、真实的推进结果。选择这个富含隐喻意味的视角，对一直以来习惯于在蔷薇向作品中站 cp 拉 cp 的玩家们无疑是一种冲击,也是能够带来许多思考的。 这时回过头想起自己刚打开游戏的时候“或许可以是那种友人变恋人一起度过难关的剧情”开玩笑的想法，也因此感到更加惭愧。 3. 附录结局Collect A-公交车结局：我无法接受并厌恶着这样的 &lt; 肉块 &gt;。B-房间结局：既然你已经扭曲堕落，那么就让我与你永远留在这里、相守相伴吧。C-死亡结局：我们彼此都很难接受变成这样的 &lt; 你 &gt; 吧。那么就交给我，把无法挽回的变成这样的你终结在这里。D\\E：成功逃离，过上了普通的生活。然而两个人却渐行渐远了。F：成功逃离，过上了普通的生活，似乎成为了拥有特殊羁绊的友人。 个人而言，为主线扣了微小的分数（5-）就在于 F 线……主观地认为事情不可能这么就结束了。 不是那么一回事、我的心底有谁在低语着、不是那么一回事。可是我却无法碰触到他。那里的声音太小了。心里、穿过了夜间便利店的光景。光照下的阴影中、对我说话的是谁。夕阳西下时宿舍和制服的味道。诉说了无数的昼与夜。胶片般浮现出来却没有任何感觉。感觉不到。 B 线（诚二想要砂大地失败并且哭泣之后、大地动手结束诚二的痛苦之前）大地共同心理：经历了这些之后的诚二已不再是我之前所以相信着的那位挚友了。 他压抑的呜咽声轻轻地震动着房间里的空气。我还是第一次看到他这么脆弱的样子。诚二、如此的…现在在这里的已经不是诚二了。不是我认识的诚二。被毁掉了。被我，毁掉了。“呜……呜呜……”我的眼泪也。脑子里已经乱七八糟了、想叫喊、想死、想把为什么会这样的想法丢掉，但是无论怎么做，都无法挽回了。我失控的嚎啕大哭起来。明明并不想哭，但是却无能为力。只能放任自己哭个不停。可恶、可恶!懊悔也好，愤怒也好，悲伤也罢，能全部都变成眼泪流出来就好了。然后全部都能一笔勾销就好了。但是我做不到。我什么都做不到。无论是救你，还是让你恢复原样。可恶、这到底怎么回事啊、为什么… F 线 True End","categories":["Tavg","RoseR"]},{"title":"TBC_白与黑的爱丽丝","path":"/Tavg/Sakura/60fea9d7.html","content":"无剧透篇简介：童话般的恋爱与冒险的物语标签：架空/魔法/童话风推荐：4/5 存在一条个人线在我看来有严重的道德方面雷点，以下评分不包含那条线的内容。如果很想知道是哪条线、在玩的时候避雷的话，可以看我好感度排序的最后一个（剧透篇第二行）、然后按顺序该这条线的时候、回来看我的省流版本概括（剧透篇内） 主线：3/5 （尤其在各线结局附近作者介入的痕迹明显，类似童话式结尾） 情感推进：5/5 （几乎完美的感情推进体验！） 人设：5/5 （几乎完美的人设！） 音乐：3/5 （中规中矩） 美术：5/5（本篇玩下来是一文件夹的壁纸~而且男女主们立绘CG都好看） 篇幅：中短篇（不含后日谈和fd:twilight） 在普通人——其中也包括女主角爱日梨——所熟知的这个普通的世界以外，其实还存在着另一个世界。普通的世界是“白色的世界”，而通过爱日梨的学校的美术准备室的镜子连接着的另一个世界是“黑色的世界”。这一天爱日梨在自称为黑兔子的少年以“迎接女王”的名义半被迫地穿越了镜子， Jack（） Snow（） Canon（） Michel（） Rain（） Nero（） 主线故事并不算极为优秀的范本，然而感情线的描绘极尽细腻、感情推进也较为渐进柔和，成为这部作品无法忽视的闪光点；人设也通过插叙等方式补充得较为立体和动人。此外，美术上也非常优秀，立绘和CG多而且好看。 ‍ 剧透篇 公式おすすめ順：Jack-&gt;Michel-&gt;Canon-&gt;Nero-&gt;Rain-&gt;Snow 个人好感度 record：Jack ≈ Snow &gt; Canon &gt; Michel ≈ Rain &gt;&gt; **Nero 优秀的人物设计与柔和的感情线 按好感度顺序写吧~ 啊啊啊啊啊！我宣布我就是无可救药的Jack推！！ 先放点私藏片段。 下面几张图是Jack在向女主角讲述他少年时与她的羁绊。 这张、这张是白线BE（脸红红）；大意是女主始终无法放弃回到黑的世界，Jack非常非常担心，用这种（极端的）方式来保护她。 对于Jack来说，女主就是对于身处Tailing阶的他的最重要的救赎。我大概是可以理解Jack的感受的。拥有“第二阶级”血脉、父母也有优秀的血统能力，自身却生来就是Tailing的存在、无法使用魔法，被家族视为耻辱、是这个阶级的残次品。但是还是个孩子的Jack什么都没有做错，不管是什么都没有做还是在不断地不甘心地练习剑法依然还是会被指责和轻蔑的目光对待。 只是想要被认可而已，所以迷茫又坚定地将所有精力都投入手中的剑中。对于因为练剑几乎或被晒晕或被累倒的幼年的Jack、还是逐渐长成一个剑法相当不错的少年的Jack，他心底所期望的就是这么微小的东西：认可他即使是Tailing也有存在的价值；认可他为了证明自己有价值所做出的努力有价值。缺乏他人的认同的人才会特别执着地通过获得他人认可自己来让自己认可自己（有点绕orz）。作为幼驯染的Michel虽然也经历过成长变故，但是在能力上从来没有被这么质疑过（“天才”的魔法药剂师）、他本身也不是会为了“变强”付出努力的人，驱动Michel努力的核心无非是夫人的恩情或是自身的求知欲望，Michel不能理解Jack，甚至某种意义上还在伤害他；Michel几乎无邪的自信和张扬是与Jack全然不同的成长背景所培养的，即使二者都在某种意义上拥有自信的资本。其实就我个人而言，我是非常相信努力的价值的，即使没有获取知识的天赋、努力自身也是一种珍贵的天赋，更何况Jack在学习剑术上并非毫无天赋。（Jack的剑术是可以和Rain扳手腕的，而Rain也是在身为剑术大师、极其重视剑术的父亲手下监督和指导着成长的……输就输在Jack没办法用魔法） 所以，在这个背景下，女主当时对Jack所说的话就是非常重要的。如果我是Jack，我恐怕也控制不住被露娜俘获。“所以、这样没必要之类的是不必说的。你真的有很努力了呢。” ——这句话，认可了Jack在学习剑术上的努力，点亮了他心中一直以来的常夜。Jack很快猜到了女主的身份，也依此找到了前行的方向：想要用自己的剑术守护她。从这里开始，露娜的存在就成为了他的一个路标；他找到了认可自己的人，也找到了自己前十多年的努力或许可以展开的道路。真好啊。（当然，到这里、以至到剧情的起点，这份感情都还远远算不上爱情，应该是感恩、憧憬等等的混合体）类比一下中国古代一些耳熟能详的小故事，知遇之恩重如山啊。 这段我觉得真的合理性很高，很想感慨一下。这部游戏里和人设背景有关的片段都比较细腻，推敲起来似乎也能看到自己一些往事的影子。下一条雪妈妈的也是一样的细腻。 温柔的雪妈妈&gt;A&lt;与其说辅佐（…或者服侍？）露娜是工作，不如说是把自己作为监护人一般的存在，像是一个溺爱孩子的母亲。 雪妈妈的白大褂立绘啊啊啊啊啊啊啊啊啊（尖叫） （白GE 成为植物学家、女主成为副手、然后他担心女主思念故乡所以打造了一个类似环境的花园~） Canon 经历了百年的寂寞的守候， Rain ‍ Nero 这个就是、我说完全不能接受的线路。 ‍ 这是我第二部接触的双女主乙女游戏作品~上一部还是上一部（bushi）上一部还是女王蜂… 要说相似也不是没有：双女王候选，一个女主知道的相对的多一个女主知道的相对的少（但是都没她们的臣子多…）（虽然是女王但是好像也没什么“政治”才能），一个女主更复杂深沉（也被认为更适合继承王位）一个女主更纯洁懵懂，还有亲情之类的，以及二者之间微妙的依存和竞争关系…但是要硬说像有点杠，因为这两个方向都属于乙女游戏女主角的常见模板，而女王蜂里两个女主的人物设定更极端一点（也和它独特的剧情背景有关）。对于双女主模板，其实我最期待的就是姐妹贴贴的剧情啦！ 对于露娜来说，自幼以女王为目标努力地学习，周围的人也以此为理由向她施压（呜呜，小スノー好温柔，会帮着不想念书藏在窗帘后面的小露娜说谎) 这涉及到我给剧情打 3-的原因。当然，我并不是厌恶这个故事而打 3-，而是因为感觉到发自内心的痛苦和悲哀。但是这悲哀不只来源于“谁都没有做错却走向了错误的结局”或者“美好的东西碎裂”，而是我认为它作为一个故事的失格。（也不排除作者是想要玩家深深地体会一下这种失格。）","categories":["Tavg","Sakura"]},{"title":"深埋之星","path":"/Tavg/Flos/19f4178f.html","content":"无剧透篇第一次做非女性向游戏的repo，多多包涵。 总评：选秀现场坍塌后密闭环境内的本格推理故事 标签：推理/剧情/微恐 推荐：4+/5 攻略参考：https://psnine.com/topic/35970 篇幅：一周目+A、B、C三线主要结局 20H+（C线没敢自己打，看的实况xd） 故事背景（仅序章）： 名为深埋之星的选秀现场在投票期间突然坍塌，身负不同&lt;人设&gt;和&lt;秘密&gt;的五个心思各异的选手们与舞台导演在坍塌现场相聚，逐渐确认了没有离开的道路，不过可以通过时有时无的信号进行通话或发送飞特进行交流。以发现总导演的&lt;意外&gt;死亡尸体作为开篇，令人不安的事件开始接连发生。 简评尽管推理等设计上没有特殊之处，这篇作品有极其立体的人设和很好的故事性，在一次又一次对话中玩家可以通过好感度提升触发“关系事件”探索每个角色背后的&lt;秘密&gt;、走近每个角色的过往，主线的多个结局也各有震动人心之处；同时也附带了对于饭圈、偶像、舆论等内容的社会探讨。 不过，游戏的机制与系统非常地让人痛苦。 首先，玩家不能随时存档，导致在回收结局等时不得不重复进行选择和快进，这是非常乏味和耗时的； 并且，快进功能不区分已读和未读，自动阅读速度也不可调，不可避免地导致多周目不得不花费很多时间重复阅览相同的内容。机制里包含大量的“对话”环节，需要对各个角色逐个选择话题进行谈话，有些谈话选项（“关键词”）需要在其他角色对话后才能解锁，也比较繁琐。 同时，需要注意到的是这个游戏有微恐要素。由于我平时主要玩的是传统的日式乙女游戏，不太接触这类题材（耐受也比较差），对我来说游戏中出现的3D场景，如昏暗的灰色长廊、破损的海报、闪烁的灯光，以及发现尸体时诡异的慢镜头，都属于心脏猛跳的类型，致使我基本开着好运来才敢把它打完…剧情上也有一些微恐要素，在非剧透这边我就不多说了，主线分为三篇A、B、C三条线路，其中C线基本相当于游戏的恐怖dlc（……）真的恐怖加倍了（感觉可以打“超恐怖”标签），不过不玩也不会影响游戏整体的体验。‍ 剧透篇顺序：一周目强制end -&gt; A线 -&gt; B线，C线约等于恐怖dlc，解锁后什么时候推或者推不推影响都不大… 我基本上一周目结束后全程是参考攻略走的，A线还努力扫了一下杯，被机制彻底劝退了，所以B线只打了主要结局。C真的是玩不下去，放假一个人待在自己房间里嘛，要玩还是上学的时候在宿舍有室友在比较有安全感… 1. 角色相关好的角色设计和表达使得整个故事都变得分外鲜活。（辅以好看的立绘——！） 我们看到每个角色身上的无奈和痛苦。 为了节目流量不择手段在故事里表现出许许多多的“恶”的总导演，背后也有惨淡的童年。 出于种种理由想要站在舞台上闪闪发光的选手们。 因为拒绝为了舞台连尊严也放弃的尹希娟背负着“拜金”之类的舆论离开了舞台却还是放不下梦想；被作为罪犯的父亲的阴影所笼罩的吴梦璐想要成为崭新的自己；高中时被有钱有势家庭的同学校园暴力反而被指责为施暴者、也连累了自己的家人的徐彗星因此决定即使使用不光彩的方法也一定要成功；知名歌唱家的私生子李修杰自幼与母亲蹒跚地困难地生活，母亲被舆论逼死后他被认亲又开始咀嚼一种新的痛苦；曾经一心想要保持乐队的自我风格、想要乐队的伙伴们一同前行的韩浩宇终于也放下了天真的想法。 （还有可爱的话很多的黑客先生Plughole&gt;A&lt;！~以及他可爱的妹妹~） 每个人都有鲜活的故事，因此有生动的观点和各自的选择。正如韩浩宇从始至终、每一条线都在努力地期望着照顾着每个人的心情。B线主结局，他站在李修杰的冰冷的身体旁边，想的首先是：我试着照顾每个人的心情，却遗漏了他。一周目结局时他也是这样的心情。我当时真的很想抱住他，对他说，你已经足够努力啦。不算是叛徒哦。不管在哪里，你都是很好很好的leader了。其实一般人也都做不到韩浩宇那么冷静又温柔吧。他的崩溃也是让我叹惋的。如果不是这种事，或许他总有一天能和自己认可的伙伴们站在舞台上一起歌唱梦想与希望吧（或者他自己，也行）。他也同时是个认真的求实者（这里我到第2点细说）。正是这两种特性让他感受到无比无比地痛苦。 李修杰我就不细说了…虽然这个角色被塑造得很有吸引力啦，但是我个人原因（或许）对大多数这种情况的容忍度非常非常非常之低，我能勉强容忍他砸的第一下算是冲动（不过也应该去坐牢！）之后我是绝对绝对无法容忍的…我不想“理解”、也不会去“理解”的。还是说，三观不能跟着五官跑，也不能跟着悲惨的故事跑，做错了的事情就是事实，事实！不能因为受伤的不是自己就觉得轻飘飘的没有关系。说真的，这个程度我已经不能说是什么病娇啊惨啊之类的，我只会觉得令人生畏…（所以我也不想嗑这个cp！） 2. 关于结局 当时打A线的时候就有很多感慨，和我一起玩乙女游戏的学姐讨论了很多。当时刚打完A线NE（先打的NE再打的TE）引用一下我自己的原话“就是，我不想觉得那个4个人里有坏人啊。如果我是主角，我也宁愿让自己这么相信就好了。而且，大家也确实看上去都很好啊。”我想，如果是我在那个情境下，绝对不会再深究了；或者我就是那种这个情景下一点都不愿意深究的类型，从第一个案子开始就不想深究。那里太黑了、太冷了、太封闭了，我不想知道凶手是谁，因为我一旦知道了我就会无比恐惧与他待在一个空间，又或者是由我揭发的…作为一个普通人我更难预料会发生什么事情。我可能也就是缩在一个墙角和大家抱团取暖，说这样也好那样也好大家就在这里乖乖地等救援吧~（不过这样的话就没有故事会发生了…） 所以这样想的话我就会觉得韩浩宇真的特别特别了不起，做得足够足够好了。 B线和A线结局也是一样地惨。但是相比来说，我觉得让李修杰手上少一点血是好的。最好呢还是全员都活着离开…导演那个事情没办法忍住冲动的话，就让李哥出去认罪吧。我果然还是太天真了吗（） 看到几个角色的“决心”结局我也好高兴。跨越自己还是很不容易的呢。如果能够摆脱阴影，走向敞亮的光明的世界真的很好啊。至少是问心无愧的。 3. 其它想到一些别的东西。我觉得孩子们都是很好的人啊。排名什么的真的好残忍，热度、人设、竞争都好残忍。明明都是抱着美好的愿望希望在舞台上闪闪发光吧。不过，要是没发生这件事，他们估计也彼此不会知道这么多对方的故事、产生这样的羁绊，所知道的或许也就比舆论多一点了。 其实现实中，我们也是这样面对竞争的啊，如果注视着自己的话，别人都只是符号而已了，当你走近别人的故事，开始意识到“别人”身而为“我”、意识到排名里每一个数字的意义，也会感觉到少许的痛苦吧。当然，我们也有各自的想要做到的事情，或者称之为梦想，所以也不会轻易让步。尤其是投票这样几乎是零和博弈的场面，只有你赢我输的局面，总会有人受伤的。 选秀也好，出名也好，名额都是有限的，都是这样的。天分也好，努力也好，要求都很高，这是一个显著的极少数人分羹的行业…而更难过的是，在这里，相比而言，天分和努力的提高是困难的，而谎言与炒作的效果是可期的…徐彗星应该也很绝望吧，可是他为了自己的梦想也不得不走上这条路，也不得不伤害别人才行。 我也不知道这种局面要怎么办。就是觉得挺难过的。 网络舆论相关的我就不再说啦，这个感觉大家都挺清楚的，也是彼此知道却不知道怎么停止的事情。（叹气）比如说，当所有人都在一致指责“网络语言暴力”的时候，做出这些行为的又是谁呢？ 这次就写到这里。其实我并不是很想回想这部游戏了，只要想起来C线那些片段我就感觉后背发凉（持续掉san）…*我果然还是不是很适合玩这类游戏…不过这游戏的故事真的还不错，体验一下也不妨。 ‍ ‍","categories":["Tavg","Flos"]},{"title":"花之女王","path":"/Tavg/Sakura/670acfed.html","content":"无剧透篇 总评：神明与命运支配下的悲恋物语 标签：架空/奇幻/神话(?) 篇幅：长篇（全通 40h+，每个角色大约 10 个 End，全收集比较耗时） 故事背景（仅プロローグ内容）： 很久以前，女神ミレーヌ在这个世界上划分出四个国家~（至今仍没记住每个国家名字…全是片假）~，由四种花朵的纹样进行代表；划分出神殿之地パルテダーム，为了拦住源源不断前来祈求的凡人们将其升至空中。パルテダーム寄宿着作为她力量本源的神木，她也从此将成称作グラス的神力传递至地面的四个国家。对不断回应凡人们的祈愿感到倦怠和无力，她创造了以レーヌ为核心的制度：将平衡各地的グラス（神力会在各地流动，导致不均）的任务交给被称为レーヌ的女神依代，被选中的来自四个国家的四个骑士登上パルテダーム，由凡人转化为被称作花人的存在，成为神力传递的媒介，在此之后，ミレーヌ就在神木中陷入沉眠、恢复神力。~（这一段好长……刚进游戏玩得云里雾里）~ 女主角ヴィオレット正是作为新レーヌ在丞相ユべ―ル的教导下成长的。故事的开始正是四个骑士来到パルテダーム的日子。一心想要成为优秀的レーヌ的她逐渐意识到这份责任的沉重。由于女神的沉眠，神力グラス的总量不能增加，而她所做的平衡就是从一个国家剥夺神力、再转移至另一个国家，作为被剥夺方的国家自然是受到伤害的，同时，作为神力媒介的骑士也会在グラス缺失时感受到极端的痛苦。无论如何选择，由于现今土地上的神力グラス已经不多，总有国家、总有国民、总有骑士受到伤害，她所应该做的是按照丞相ユべ―ル所教导她的“使得总的伤害最少”做出选择，主导转移力量的仪式的进行。 对自身能力与职责的迷茫和痛苦还未散去。在某一次仪式上，又出现了新的问题… CV list レオン ギスラン オルフェ ルイ ユベール 興津和幸 近藤隆 KENN 浪川大輔 杉田智和 简评 人设、美术和 cv 表现优秀，故事基本上是何もできない子模拟器，非常玉玉（但是玉玉得让人莫名其妙），大多数结局非常掉三观（虽然是理论上的 good end），解决困难的关键还是在于神的力量，男女主能做到的事情非常少。长度很长，然而剧情内容并不复杂，每个角色的故事基本上都是一两句可以讲清楚，也没设置多少伏笔，故而显得剧本冗长。 特有的机制不算复杂，不算劝退因素，还是可以根据攻略简单通过的（由于结局非常多，全收集耗时较长）。不过，经常性地突然进入游戏特有的机制的段落会稍微影响剧情体验的连贯性。 总体而言剧情不是很值得买，抱着闲下来打发时间的想法是可以玩的，而且 cg 非常非常漂亮~ ‍ 剧透篇公式おすすめ順：レオン -&gt; ギスラン -&gt; オルフェ -&gt; ルイ -&gt; ユべ―ル个人好感度 record：オルフェ &gt; ギスラン=ルイ=レオン &gt; ユべ―ル 1. 角色评价看大家写得很多了还都是单开专栏写一大篇…我就不再详细写了。 オルフェ为了让女主为登上神位付出不计代价的努力；ギスラン与他的国家受到“理不尽”的遭遇（花纹破损）故而痛苦和发疯；ルイ利用自己无数次重生前得到的知识把女主推上神位又因此对作为神明的女主感到疏远或为了结束自己的永生放弃自己（和自己的国家…）为女主提供神力；レオン为了与女主在一起或为了实现女主让世界安定的愿望与破坏之神ゼロ做交易；ユべ―ル自始至终是女神忠诚的蝶，女主对他的爱恋最终只能指向成为女神的替身或是获取女神的祝福~（~~唯一一条只有女主在努力的线…别的线都是两个人一起努力发现什么都做不到捏…）~。 我个人而言还是喜欢オルフェ，尤其印象深刻的是他在一切还未发生之时向女主提出的有关グラス的运转问题等等，（他也在期盼着一个没有神明的世界阿，当时就感觉还蛮特别的），也喜欢他在仪式前夜青涩地拉住女主的手，喜欢他说想听琴的话什么时候我都会弹给你听。 但是这个故事里，每个人都太痛苦了啊。越是美好和善良，就越是强调着这个世界的不正确。 2. 是风中的树叶，是时代的尘埃这句话，我也同样用于评价过终远的女主角セレス。那位被称作死神的少女，被所有人认定会带来不幸与死亡，而自身除了自我了结找不到任何解决问题的办法，她在不同的故事里辗转，每一个故事里都在寻找着自己存在的意义。ヴィオレット也是相似的。这个故事里不存在什么反派，而最大的反派看起来像她自己。如果“我”的消失能够拯救这个世界，那么“我”对此的拒绝是不是只是消极的拖延和自私的表现？对她们来说：“如果我不存在就好了”似乎就是最善的答案了。 怎么可能没有不甘心呢。作为レーヌ出生和成长，一心想着成为优秀的レーヌ，一心想要帮助所有国土上的人们获得幸福，迎来的却是一次又一次无力的妥协，美好的梦想只能破裂；甚至自己的生命本身也是一个谎言。面对一次又一次痛苦的抉择，她什么都做不到。 嗯……这游戏比较公平的一点，面对这种级别的难题，男主们自身也什么都做不到。男女主们在不一样的故事里重复着想要相互守护，但是被迫无数次通过自我放弃来守护对方（忠诚 end），所谓的好结局可能来源于放弃除了彼此的一切（恋爱 end）。即使是愿意放弃彼此以外的一切来达成爱恋，没有了神明的力量（Zero 的帮助/女神的赠与）或许也无法达成。 我记得ヴィオレット站在ギスラン的牢门口抓着栏杆落泪，说「……わたしに、もっとカがあればよかった」；女神对ヴィオレット说「貴女では、何もできないわ。花紋の修復も、東の騎士を救うことも」，说「諦めなさい。後は私が対処するわ」；女主对尝试开启神力而造成花人们的消逝的オルフェ说「わたしにもっと、カがあれば、彼が儀式を強行することもなかった。」、「わたしにもっと、想いがあれば、別の道も有り得たかもしれない。」（为此我剪了 BV1MU4y1D7S6 台词混剪 全是类似的东西…） 应该说，这本游戏无一处不在强调着这种面对神明与命运的无力感，而作为男女主们除非机缘合适得以登神座、对此几乎没有主动选择的余地。10 个结局，或许没有 1 个能拯救所有人，而至少 8 个都是中道崩殂的悲剧。 3. 总评：无法摆脱神明与命运的支配的可悲的孩子们这涉及到我给剧情打 3-的原因。当然，我并不是厌恶这个故事而打 3-，而是因为感觉到发自内心的痛苦和悲哀。但是这悲哀不只来源于“谁都没有做错却走向了错误的结局”或者“美好的东西碎裂”，而是我认为它作为一个故事的失格。（也不排除作者是想要玩家深深地体会一下这种失格。） 这里引用 cv15505382 @ 猫不腻的日常 的观感： 综上所述 这 4 条线打下来 我觉得编剧本来是想要表达 他不认同神的绝对力量 不认同神将人类玩弄于鼓掌之中 人类的生存意志不容小觑 人类的命运应该由自己决定 而不是由神决定 但是但是但是！！！剧本太拉跨 没有很好地把这种正面的意义表达出来 而是以一种非常毁人三观的形式向别人灌输自己的价值观 我觉得这个评价真的很中肯了…就是，你看得见作者一遍一遍强调グラス是应该从这个世界消失的、人类不需要グラス也能好好地活下去，可是事实上这个故事里不断强调的是没有力量是不行的，什么都做不到。如果没有力量也可以的话，那为什么不能直接对着神力流转直接放手不管呢，诸如此类的方法应该很多，而故事不仅强调了拥有神力的国家会风调雨顺，也强调了没有神力的国家会遍布灾难、会覆灭呀，如果是这个设定的话，怎么可能离开神力呢？如果按照我的理解，在这个故事里，作者想要表达的东西和作者设计的背景就是冲突的。 而这在我看来就是作为故事“失格”的。你固然可以写现实中普通人在权力、金钱和人性等等因素支配下的挣扎，那反映的是真实。但是如果你创造了一个设定，打个最坏的比方说这个世界上有一个力量胜过一切的聪慧的混沌的恶神，他戏弄人类没有人能胜过他，然后你再把一个正义感很强的主角放在他的手下不给他任何特别的力量而是让玩家从他的角度体验一下力量弱小的痛苦，因为主角的敌手是绝对的不可打败的，想要存活只有妥协和苟且。那这到底想表达什么？能表达什么？在绝对的力量面前，挣扎是无力的，所以呢？ 在作者笔下的世界，如果作者就是这个世界的神明，这个世界将会是无趣的。而在这个世界里正是这样，即使设定了神明们的性格和行为模式（被名字束缚），这些神明没有活过来（人设不完整）、只是作者的傀儡而已，所有莫名的宿命感都只是作者的安排：如果作者希望神明转交神座主角就会成功，如果作者将主动权归还神明主角就什么都做不了；因为主角没有被设定有与神明能够匹敌的力量（不要说匹敌了，对上神明只能说几乎一点都没有），所以想要改变命运只能依靠作者施恩。 我觉得这没有意义，这样写的话，这个故事没有获得自己的生命力。 大概就写到这里。尽管我并不满意它的剧情，这依然是一部给我留下特别的印象的作品。当然，以上看法都是我个人的主观之见，有想法也可以再与我讨论~ ‍ ‍ ‍","categories":["Tavg","Sakura"]},{"title":"杀手与草莓","path":"/Tavg/Sakura/4c07d56f.html","content":"无剧透篇 总评：实验体少女与里社会们的纠葛物语 标签：题材特别到我不知道怎么打标签 ∑( 口 || 推荐：3/5 用时：35h 中长篇 省流版：可以为了喜欢的声优冲刺，也可以纯纯用来消磨时间（省略后句）不算惊艳但也能玩的日乙作品 声优list： ツキミ：CV.田丸篤志イズナ：CV.石川界人クラマ：CV.野島健児ノイン：CV.花江夏樹アモン：CV.八代 拓長谷川：CV.前野智昭 Caution: 对于6条线只锁1条的乙女本，理所应当抱有审慎态度（）。请按照推荐顺序：アモンーイズナーツキミー長谷川ーくらまーノイン（最好先GE再BE）游玩！错序会严重影响体验。PLUS版强烈建议完整游玩后日谈，有CG而且能够补充主线细节。（特典也很萌&gt;A&lt; クラマCV本音完全不一样啊Σ(っ °Д °;)っ） 接受两件事： 1.前期绝大多数的剧情都平静中略带拖沓 2.剧本娘对杀手的理解比较特别。 大概就能够坚持到最后，体验到这部游戏比较好的地方。 前期剧情节奏控制奇差，很难忍住读下去，对标中长篇的体量，事情的复杂程度不够。如果游戏主线长度能够控制在2/3以下，我对它的评分可能会有4-/5。（七罪有相似的结构和内容含量，但是长度可以控制在16h，我觉得杀草不是完全做不到。） 杀手之类的题材听上去就有点……中二（事实上也难免有点），在主线里你几乎不会看到男主们像是一个杀手的样子，只有文本上强调…… 不过，如果你能忍住自己对里社会的概念和剧本娘的不同之处然后接受这一点，故事看起来还是很完备的。当然也不能排除无法接受设定一整个，看不下去……那就没办法了，真的很雷就把卡带卖了吧……（捂脸） 说起来其实我一开始期待很高，以为会是失忆症那种每条线都有些悬疑色彩的好玩的本，呜呜，期待太高失望会很高 是同一个剧情结构跑了六遍，如果你按顺序玩的话就是前五条每次结尾的时候会多知道一点新东西（一点点）然后在最后一条线的中途知道绝大多数东西。……所以会感觉很拖沓。 以及伏笔放得很少，没什么细节可以讨论（回过头来看，要说是伏笔又显得太刻意了……）。TvT就是，想猜都没什么可以猜…… 但是人设很好。恋爱很甜（虽然爱↑情来得太快→就像龙卷↑风🎶，不过乙女游戏里的恋爱很多渐进性都不太好……比较一下同行也就原谅吧233）。【传言有麦麸但是没感觉到……我太迟钝了吗】怎么说呢，很抱歉你们生在这个故事里，被连累打了1星2333…… 剧透篇剧情 マツリ是一个拥有不死基因的女人（老化缓慢，还有不会被灾难杀死的奇异buff），她于作战中留下了血液的样本被ある組織发现，于是被不断试图制造新的实验体（似乎也不是克隆，但是没讲清楚到底是怎么造的），将他们由各福利院收养，之后雇人制造意外事故检验是否继承了“避险”的基因。女主イチゴ（不是真名。你也可以叫她15号）也是如此，高中时期被杀手组织月影的ツキミ执行“意外事故”但是并未被杀死，遂被接走进入“设施”进行了各种各样致死的实验。与女主相同境遇的还有许多实验体，他们的st日日夜夜通过门关，但是只有女主活下来。为了适应设施的生活，女主放弃了思考，也失去了声音。 剧情开始的第一天，女主被月影组织救下，说是接下了保护她的委托。为了一直留在月影人目之所及处，ツキミ和イズナ决定雇佣女主在月影所属的咖啡店（作为月影于里社会的“窗口”存在）担任waitress。之后女主开始了与众人的羁绊。 角色（好感度lay：ツキミ&gt;ノイン&gt;クラマ≈長谷川&gt;イズナ≈アモン） アモン是ある組織在月影的卧底，试图带走女主的同时也似乎对女主怀有深重的恻隐之心（如果女主回应他的感情，他就会带女主私奔……如果不回应好像就不会。但是除了最后一条线也没有明写他执着于完成任务……所以很难判断）；他是优秀的狙击手，能够单人执行困难的狙击任务，不过总是因为买新设备使得自己负债累累。他在平日里表现得对一切都富有感情，但是【据说】在工作上能够相当冷静无情地执行一切任务。（但是其实某种意义上对自己杀人的工作还是有所迷茫，期待着谁（女主）能够包容和接受他。倒不如说这里描述的杀手们都是这样的……后面就不重复了） イズナ是从小在月影长大的杀手。非常擅长烹饪&gt;A&lt;。和アモン不一样，他似乎在努力克制自己对所有人的情感（当然月影内部人除外啦）防止无法在工作上冷静区分。 長谷川曾经是军人，在任务中被迫违抗命令对敌方动手、结果是一人生还（看上去有点像マツリ的天赋但是主线里没再解释过），之后选择了进入白川先生的公司成为保镖，迷茫又孤独地一心求死（……）。刻板中稍许温柔。（而且在女主面前演的那一段真的很带感……びっくりじゃだ）（前野你好适合配这种角色啊！！！正气感满满，非常贴） ツキミ是月影的一个什么队（对不起名字忘了）的top，这个名字也是继承制的，真名是瑞紀不过叫什么都没什么关系……（但是我觉得两个名字都好好听）。人设我非常非常喜欢！！我觉得非常可爱！！也是在月影长大的，但是因为对夺人性命和喝水吃饭一样没什么感觉所以连同行都忌讳……工作上是纯粹的“合理主义者”，如果夺人性命是合理的话就会毫不犹豫而且毫无实感地轻松地去做（）。 女主给他的生活带来了奇妙的改变……非常后悔自己没有杀死女主而让她遭遇了不好的事情，还在女主来之前买了一大堆洛丽塔小裙子（我严重怀疑是激发了什么少女心的xp），对女主也是极尽romantic，甜点什么的全部安排上，（）而且很容易因为这种少女心行为脸红得不行（就算在一起了也依然是这样……）。只能说反差萌实在有点拿捏。但是我真的会觉得好搞笑……他和女主两个人待在一起生死观变化也不是很大，依然是“只是早一点和晚一点的区别”，“只不过想和你待在一起的时光更多一点”，……某种意义上还真是特别的恋爱呢，让一心想守护女主的マツリ都无言以对…… 很甜啊很甜啊很甜啊这个！呜呜！后日谈也甜疯啦！ クラマ是死宅医生，工作是收离谱的高价救人性命（似乎技术非常非常好），兴趣爱好是搭模型。很呆。哈哈哈。（乐）最好笑的莫过于クラマ找ツキミ问哄女孩子的方法，（你可真算问对人了&amp;……）结果就是鲜花蛋糕堆满问诊室。女主：Σ(ﾟДﾟ)……很喜欢安静。 ノイン是伪装成武器商人的月影top。（Σ(っ °Д °;)っ）（我感觉他提出来建这个咖啡店就是为了让ツキミ试着找到一点自己身为杀手以外的存在感）虽然很小只不过也是20代啦。（深以自己的可爱为自豪也……也挺……）虽然这个设定已经开始中二到小说的程度了。排面啊！唯一一条女主在主线里就能找回声音的剧情！嘿嘿。 两个end都很有趣，一个是和女主一起留在月影，恢复月影作为惩罚机构的职能，女主还是在咖啡厅当waitress，下班后就负责治愈top的疲劳~~；另一个是决定离开月影，女主重返高校，他发挥自己的商业才能赚钱养家（？）。好甜啊好甜啊！！555 吐槽 作为里社会的窗口你只写这么几个常客每天只招待常客……叫窗口真的没问题吗？…… 所以只有这么几个人这个咖啡馆到底是怎么运营啊？有时候女主显得好多余啊……（前台和厨房是有多远啊还要传好几道注文消息……） 既不这个又不那个还有惩罚机构，这个构建的里社会系统到底是干嘛用的啊（真心发问）就是除了砂里社会的人买卖砂里社会人用的枪械什么也不干吗……我真的会觉得很奇怪 =。=关于世界观大定义我已经不想吐槽了，累了，接受了算了。接受了的话这个故事还是完整的，就是读着有点难受。 先这些吧。写累了。（瘫）对这个故事我的评价实在太复杂，我体会到了什么是“我超喜欢这个角色但是这个故事真的吹无可吹好烦啊”的感觉……呜呜。这种base上的问题（类似于终远的科技内核）真的很难规避，各种意义上不断地打扰着阅读体验，同时它的叙事节奏也不好，导致体验很容易直接崩盘，连玩到真相线的耐心都很难维持。 （再叹一口气）","categories":["Tavg","Sakura"]},{"title":"旧书店街的桥姬","path":"/Tavg/RoseR/c9e9390d.html","content":"无剧透篇 总评：在这大正的漫长梅雨季，与你无数次相遇。 简评：请君勿死（bushi） 推荐：4+/5 标签：蔷薇向/微恐/微悬疑/循环（时空跳跃） 简介： 玉森是一个沉溺于幻想的写作者，常在现实中看见自己所创作之物。两年前，玉森与他的发小川濑、水上一起来到帝都备考帝大，次年落榜被书店店主收留。某一天，应水上之邀，他前往影院发现一向守约的友人没有赴约；第二天，获知友人死于水道桥上。想起前日听闻他人说起的与自己书中描述一致的传言，他笃信友人是被自己创造的杀人魔所杀害，继而投身调查。在正面面对杀人魔的雨夜失去意识后，意外地，他又回到了与水上定下约定的那天。一次又一次地在这三日中辗转，他是否能找到真相、跳出无望的循环呢？ 篇幅：短篇 17H（NS版） 5条角色线，第一条信息量非常~大（耗时7H左右），最后一条也还好，别的相比而言稍显寻常。在故事的世界观框架下，逻辑基本自洽，体验良好~~ 系统非常友好，左摇杆可以推对话，有快速往前翻、往后翻的键也可以跳跃章节和选项。攻略不复杂，即使不看攻略也不需要花多少时间（一共只有三个分支选项，随着角色线unlock显示） NS版删减非常严重……删去了很多本应该很香的情节——（毕竟简中） 美工、配乐、配音都很贴合故事，大正的浪漫古典、日西结合的味道满满 剧透会严重影响游戏体验但是游戏体验的妙处正在于剧透之中~~=w=所以下面直接进入剧透篇~ 剧透篇好感度：水上&gt;川濑&gt;博士&gt;花泽，薰 角色相关水上：从你的前前前世起，我就一直追寻着你“我一直都是你的第一个读者。”“阅读玉森的原稿是我的生存价值。”明明是这么温柔的，明明是这么说的，一面又说：那是幼稚、是无趣、是不值一提，记事本里写满的读书感想没有玉森的名字。 可不可以不要死掉，可不可以哪怕是为了我也好留下来……玉森无数次祈求。但是一次又一次地，钢笔也好小刀也好水上从来不犹豫于舍弃自己的生命。 水上就是这样的存在啊。看起来拘谨疏离，脑内其实装满了和他所爱的书籍一般热情的浪漫与幻想。他爱着书籍里的世界，像消耗品一样剧烈地渴求着故事（沉溺于故事），某种意义上与现实的牵绊只有玉森而已。帝大也好，夫人也好，所有“现实”在他心中都不那么重要。这或许也与他曾经与桥姬的联系相关（这种经历会严重地磨损人心中对现实的真实感）。所以，不难理解，当这个将他维系于现实的牵绊断裂（玉森死亡、或者出于保护玉森的目的），他就彻底与现实断联了。 剧情里的第三人说 “他不是不恐惧死亡，而是对某种东西的恐惧远远胜过死亡。” 他知道所有也承担所有，义无反顾地投身于店主（未来的玉森）设下的棋局。 前十个世界的水上，死亡前会想起的是与玉森初相遇时的大海、玉森从小为他描述的一切故事、为玉森买皮鞋系上鞋带时内心的波动、每个雨天里与玉森度过的不安又温存的片刻、还是别的呢？ “那样小小的记事本，写不下对你的情意。”“没事的，是你想太多了。”“我的眼里只有你。”“真的。” 最后一个世界的水上，终于得偿所愿。我几欲落泪。不想看见你再死掉了，太心疼了。 川濑：“那今日的外海，如此蔚蓝澄澈，有谁沉溺其中，失去了生命呢。”是刻薄的冷淡的恶劣的男人，旁敲侧击也好直言也好都是如此，剧本一遍又一遍指出。在后日谈里说到：不被信任，最大的错误在于真话说得太多。（我都快要被他说服了——）或许由于童年时的惨痛遭遇，川濑拥有和常人不大相同的是非观念。如果说水上是对除了玉森以外的一切都没有实感、不甚在意（包括自己），那么川濑就是对除了玉森以外的一切都无法信任（认为是&lt;丑陋&gt;的）。 一开始，我隐约感觉玉森对川濑必然是特别的（洁癖-触碰），不过又反复看到川濑对玉森刻薄冷漠恶劣的样子，在风雨夜拒绝在门外也好，对川濑的话一副在开什么玩笑的样子也好，又深感怀疑。如果我是玉森，对我们的友谊毫无安全感也是必然的吧。（与川濑的关系里习惯性地“讨好”姿态）毕竟故事里一般的恶作剧般的恶劣不至于恶劣到几乎见死不救的不理解吧。 事实上，走近川濑后才会感觉到他矛盾的心意。认为一切都是丑陋的他用极大的克制才忍住不去接近“纯白的孩子”、去&lt;欺负&gt;玉森。他甚至曾经想要把玉森杀死。（当然三次元中对这种恋爱还是敬而远之……）所以表现出的排斥都只是希望远离玉森保护玉森的手段。 比起花泽，川濑的恶似乎也不算深厚……。这种恶的程度在游戏里应该也算一种微妙的吸引力吧……。（而且川濑的配音真的很贴很A很有磁性……） 川濑获得能力以后和玉森互相创造幻境的剧情非常有文学美感呢。（这里我有点评价不来xd）像这种恶劣的坏孩子在剧情结尾救了落水儿童还登报也很有喜剧感~ “你不会以为我要说、因为你是特别的吧？”——潜台词就是，你很特别啊。 花泽……我真不想评论这个男的，可以跳过吗…… 就是因为被洗脑得剧本娘都洗不白了，所以个人线只能把两个人发配到热带雨林里去&lt;受罚&gt;了……好离谱好离谱真的好离谱，玉森喜欢你你可真是前世佛前三万年…… 博士：求求你，看看我心意和想法澄澈见底却偏偏怀璧，所以会被花泽利用成为战争的工具。 与人世的一切其实少有接触，纯净得像个孩子。玉森的纯净是人世中跌爬滚打后仍然守住的美好愿望，而博士的纯净是真正意义上的除了求知欲与漫无边际的幻想什么也没有。 玉森是他幻想的起点与究极的终点。他因为玉森（另一个时间点的）而踏入幻想的世界，因为玉森（作品主时间线）而陷入爱河。我会怀疑他爱的是玉森的什么；怀疑他爱的是哪个玉森；但是其实他纯净得从不考虑理由。只要是你就好，如果是玉森的话哪个都可以不管怎么样都可以。 当拥有这样的力量的&lt;神明&gt;对你言听计从，内心阴暗的那面浮现出来几乎是不可控制的吧。博士明确地说，利用也好，不管是什么样子，只要为你奉献就是幸福的。那个雨夜，博士为了他的愿望奔波，几乎失去了视力；他落荒而逃，博士的两个女佣（几乎是家人）因为对他的意见相反而互相伤害；博士跪在地上祈求他不要离开。 玉森和花泽截然不同，没有信念支撑他这样利用一个无辜的人。所以他踏上了&lt;返程&gt;，希望消灭&lt;他&gt;与博士的初遇；他的孤独又被另一个世界线时间点的博士拯救。跳跃到了最适合的时间。 和博士这样的人，无论是爱恋还是友情，或许都很难纯粹吧；所以，他们也耗尽了所有巧合与偶然才走到一起。 薰真相线。其实也不了解薰是什么样的存在有什么样的个性……如果硬要评价的话，天然系，嗯，声音很软很可爱&gt;A&lt; 别的1. 玉森相关（表世界的玉森）很多意义上，是个普通的人（也容易理解和代入）。在这个基础上，是一个非常非常寂寞的人。因为寂寞，深爱着幻想的世界（也可以认为是爱着幻想的世界所以孤独……互为因果吧）；因为寂寞，渴望着亲密的友情。然而，无论是水上还是川濑，都没有给他理想中的友情（这二位本来对他的友情就不甚纯粹……）。那天他在地下室里深切地意识到这件事，寂寞地落下眼泪。女侍说，你们真的是朋友吗？从我这边看，只是你单方面在讨好他哦。 因为太过于寂寞太希望维持友情，所以来到东京试着和友人进入一所学校（但是因为本身对学校没什么执念、又讨厌死板的东西、所以失败了）、不断书写试着获取友人的认可。 [进入个人观点，有臆测]我觉得玉森是渴望亲密关系的类型，而非执着于传统意义上的友情或者爱情。没有安全感，渴求着稳定的、值得信任的陪伴（就像儿时那样）。但是他从来都没有拥有过理想中的亲密关系；那天他看到不正规小分队的少年们的友情，这恰好契合了他的愿望；再加上女侍的提醒。他终于明确地意识到自己在追寻的是什么。 川濑线末，川濑说，我们什么事都做尽了你依然要坚称我们是友人吗？友情就是玉森给心中理想的亲密关系的名字。他的友谊和爱情其实没什么界限可言；几乎感受不到他对谁强烈的爱欲，这或许是因为他长期没有亲密的关系、也没有勇气产生孤注一掷的爱情吧。 但是这也足够了。爱情也不需要有非常标准的样子……在这种作品里，花泽与玉森的爱也是爱，博士与玉森的爱也是爱，只是不同的形式罢了……。以爱为名也好，友情为名也好，我都愿意为你五次十次地踏入轮回。 2. 主线相关①关于店主：这个刻画其实很奇怪，我很难想象玉森会变成那个样子……（剽窃应该是文人决不能忍受的事情吧？？）。不过想想整个故事就是一本书，好像也可以接受。……②关于《真正的故事》：只能说逻辑自洽，挺合理的。（毕竟能看到幻想生物、随时创建幻想的世界这件事也挺奇妙的）但是还是会觉得空落落的。之前就有提过书中书之类的说法，没想到真是书中书呀。总的来说，就是书中书中书了……。 3. 其他的①水上线剧情很震撼，后面有点小失望……花泽、博士的处理都稍显草率。只能说水上不愧是表官配XD……最好看的也就是第一条线啦~嘿嘿。②关于时空跳跃的逻辑其实不是非常舒服，肯定没有石头门那么绝，就算纳入平行世界进行解释还是会有点怪异；而且，&lt;杀死自我&gt;这种事也让我觉得有点难过…… 就这些吧，写分析性质的还是挺辛苦的……（伸懒腰）如果以后想起来再补吧。","categories":["Tavg","RoseR"]},{"title":"凡尔赛玫瑰学园","path":"/Tavg/Sakura/46cd548c.html","content":"无剧透篇： 总评：清新日常的贵族学园喜剧。 推荐度：3-/5 没有看漫画，只完整地玩了女主的各个恋爱线……（大约25小时）只在这个范围内评价 先排雷 不止是女主的恋爱、还有女主撮合别人恋爱、某条线里女主的恋人在别的线里深爱着他人（甚至也是攻略对象）；有ntr，有给人类似小三的体验的情节。并不是狗血的那种ntr，应该说非常清新，也可能挺接近现实情况的……以及，有清新的百合。 剧情复杂度应该处在12R的分类，全程清水清浅平和平淡，如果有对口味的地方也会觉得很甜 用的是好感度数值系统，没有现成的走一遍共通能打完的攻略（我自己改的攻略大概是2+0.5+0.5），自己探索可能比较复杂（或者也可以按乙女攻略账那种每条支线重新打一遍……）（有的选项时隐时现，我也尚不知道具体的判定点）不过有skip键 女主山田设定是脱线的御宅族，建议当女儿看，代入的话代入感很难讲。 （这里的贵族学园的学生好像生活就只有社团活动……别的一点都不写……） 然后在这个基础上： 画风超级精致&gt;A&lt; 没有新到让人眼前一亮的剧情，但是古早言情故事也可以开出让人感动的花（说的就是你，明智君）作为小甜饼也是很不错的 剧透篇角色个人好感度：明智优&gt;一骑&gt;晶&gt;望&gt;羽鸟 1. 明智优第一个推的线！没想到也是最喜欢的线了……不难猜到明智优是漫画家吧（）一旦接受了什么内敛的贵族少爷是知名少女漫画作者的设定，就再也回不去了。“因为写不出恋爱剧情，所以，和我约会吧！”之类的、再叠上有钱人家的少爷和普通（）的女主角的buff，那种令人怀念的味道直接溢出屏幕了……但是我真的很喜欢明智优那个CV（）而且在这里也好贴脸~画的我也很喜欢，第一次看到那张明智优躺在床上和山田打电话的cg我就沦陷了……对对漫画家叠上做电子手工这点我也很喜欢XD和我专业对口（）也有一些关于阶级的个人的想法。放在角色讲完再说吧。 2. 一骑首先，是丰永利行啊！（）不过这个角色好内敛，没有mmc和紫苑那种味道，嘿嘿。第一次见面就觉得和礼二声音完全不同嘛。话说回来，我开始猜到隐藏线是谁大概也是在晶线开始后，怎么会在自己的角色线里可以听别人弹琴啊？（所以后来我试了一下可不可以直接从晶线进隐藏线，真是太好啦）也是这个游戏里ntr成分最弱的角色了……不过这个恋爱真的来的很突然，女主和他只是一起唱了唱歌，相处相当简略（毕竟他都没有在共通线出现，没有所谓同伴的羁绊），不是时间突然、而是剧情里连过渡都缺省……以及，正义战胜邪恶的剧本太12-了……（捂脸） 3. 晶一开始觉得是戾气很重的少年。围绕着不好的传言，但是实际上人缘似乎很不错？中间女主误以为和他是兄妹那段真是让我狗血坏了……怎么说呢，我先知道是真这样在嗑cp和先嗑cp再知道这个的体验是完全不同的……就是说这个言情剧本啊……真的有点12- 4. 望一面是与礼二无法割舍又担心立刻就不得不舍弃的羁绊，一面是自己最爱的最擅长的戏剧，这是望的难题。山田：那我走？哈哈这个线也不像真百合的样子……挺模糊的。我一点都不理解望，所以共情不了。面对这种选择（不做手术很可能永远看不见、永远无法继续表演戏剧），我绝对会先去做手术的，如果眼睛出问题的话礼二真的可能不知道吗？如果知道的话不是更自责吗（现在已经够自责了）……山田真的是天使呀。 5. 羽鸟我不理解为什么这种家庭的小孩非要做间谍（他家里人也不知道的样子，如果家里本来就是做情报的也就算了）……而且他从最开始对山田就很暧昧（吃马卡龙等等）虽然可以用海归解释但是还是牵强（不会真的对谁都这样吧，总归还是了解国情的）这条线的山田也很努力，不过她努力撮合羽鸟X玛丽的样子真的好狼狈……（很难说玛丽退剧指定山田作为女主角有没有一点小心思……好在结果不错）山田最棒了！ 剧情 白鸟和校长真的是工具人了，白鸟就是邪恶的化身无恶不作（……），校长呢就扮演一个恶人回头，这一段相当难受。所以呢，一骑担那么大风险在学校里调查、收获是什么？他是有什么背景、特殊的能力支持他（一个学生）、给他自信能查到东西？还有夏尔又是什么工具人？……漫画里不知道，游戏里是没讲清楚。 游戏里有意讨论关于贫富差距的问题。啊，这种定位贵族学园的设定其实根本逃不开歧视之类的问题吧？只是有没有摆在明面上而已。我也没上过这种学校，我不了解，如果里面真的很公平公正也可以来教教我。……只是，只是这样就能解决问题是不是有点太12-了？作为校长你的账本是不是藏得太随便了一点…… 还有就是女主心理感受的差距：女主定位自己是普通人，和玛丽、优、羽鸟等是完全不一样的人。从女主的成长环境来看，这也没错啊。从我的个人经历而言，是的，阶级不同视角真的很容易不同，想要走到一起需要很多很多的磨合。然而，虽然说了这件事，这种差距从来没被解决，女主的自卑只是被男主的爱的证明暂时填满了，但是只要相处就会有新的矛盾新的不同，问题依然存在，这很遗憾。 只是，回过头来看，女主也不是什么纯纯的普通人啊？优线妈妈一出场校长就嗯嗯了，结合羽鸟线一看，啊，这不是大资方嘛。 所以，单游戏（我打的那些线）而言，体验是不甚让人满意的。不过，也是个不错的甜饼啦。","categories":["Tavg","Sakura"]},{"title":"大正×对称爱丽丝","path":"/Tavg/Sakura/68f5551f.html","content":"无剧透篇是我心中的小神作，值得安利~*代入党慎入 省流版1、精简型不会太长篇要是能并成一本就好了、、、（（因为连贯性相当强） 从epi3开始会进入爆炸式的信息量……忍住就好了（如果有心情的话也可以从epi1开始就当悬疑向一样去关注每个故事的细节，会非常有趣感觉我当初玩前面的时候太轻松观察的粗疏了有失体验……）epi3之后回头看会发现特别多特别多奇怪的地方都会得到解释，感觉也挺自洽的，我好感动TVT而且完全呼应童话！！！！！！如果只看一篇两篇的话体验影响非常非常大！！！ （不过epi1可以取舍，毕竟离真相太远了但是平子+前野智昭的声线也很好啊小红帽人设也超级萌的！！） 2、这是我看到的第二种非常舒适的多攻略角色线路的解决方案，剧本娘对于记忆等等也有 个人的比较有趣的见解，虽然也是XXX（剧透打码）但是不至于非常中二和老套、、可能和现实有偏差但是依然在世界观背景下可以包容。 3、嘿嘿、知名的肉食性女主ww不说了哈哈姐妹们可以学着点（超，我觉得根本学不来，她真的太牛了）难能可贵的是带着个性鲜明的女主角，但是万人迷得毫无错乱感（下文解释） 正文知名肉食性女主·有栖百合花，面对任何男主都一往无前所向披靡的女子（侧目），恐怕很难出现在其它作品里了…… 其实说到乙女游戏女主角，像这样性格鲜明的是很少的。给我留下深刻印象的特别之处的，比如说久世大小姐的贵气+大气+亲和力，女王蜂辉夜的狠毒和绝望（？）、玛瑙的绝对理想主义，塞雷斯的丧气（）……这种特性是很少的，共性是主要的，无非是温柔、（大多数时候也）纯洁、勇敢之类的比较模糊的定位。最显然的，强个性的女主角会很大幅削弱玩家地代入感……再加上，其实一个故事框架里四个五个六个男主角都能喜欢上同一个女主角本来就很奇妙吧？？？就是所谓的万人迷问题 。 个性模糊化是一种避免回答这个问题的方式：这个女主角的性格细节都由玩家想象，总之男主就是喜欢上她啦；但是百合花这种就是糊弄不过去的…… 在这个游戏里，编剧以强大个性的女主角为叙述主体，对这个问题给出了自己的答案。 首先，既然是不同的男主的人格有不同的偏好类型也是很正常的事情啊​~都喜欢一模一样的女主角当然不是理所应当的~ 就比如说，不管怎么说红玉都不会喜欢上辉夜，皇树也不会喜欢上玛瑙，因为男主的个性决定了女主吸引力的核心~所以辉夜和玛瑙是不能混淆的。如果想把女王蜂的两篇合并，就不得不对女主的性格做很多很多调整。 比较常见的是在女主性格模糊的基础上，到不同的男主分线里再进行一些完善，（性格模糊的女主角，做出什么样的选择都不会ooc）又或者说，“选择”这件事塑造了故事里的女主角（也可以认为是你心中的女主角做出了符合她性格的选择），然后不同的男主角也会爱上有所不同的女主角~ 虽然少女的王座已经关服了，但是我觉得它是这个例子方面做得最明显的，阿尔贝线的女主角心态完全奔向安稳和平和 理想是过温柔的田园生活（【家】篇）、维克多线的女主角则截然相反……很多时候这个方案是因为必要才出现的（因为必须回答男主会喜欢怎么样的女主角的问题），也有少王这种刻意和明显的引导女主的性格朝某个方向发展完善故事的。 还有一种答案，是共同的记忆是感情的一个基础。这个就是大家都在用的啦~一定是经历了什么事情才会让男主喜欢上女主非她不行啦~我不是那种会相信什么都没发生就能非她不可的恋情的类型。这个是很好解释的，通常来说都是女主从某种意义上拯救了男主心里的阴暗啊之类的…… 好啦现在说到交出我超喜欢的答卷的大正对称！ 那我们现在的女主角个性已经强到玩家没地方代了，怎么解决万人迷性格的问题呢！ 当然啦要说这种肉食性女主角是万人迷也不是不行，但是我们可以来看看百合花是怎么说的：为了喜欢的人，披上伪装是理所当然的事情呀~这是特修斯的船可以继续下去的前提。 剧情中，基本上男主在恋爱方向根本找不着北，百合花靠自己的高情商把恋爱节奏控得死死的，事实上，百合花随时都可以成为海的女王……某种意义上完全具备绿茶的本钱，就是和传统意义上不太一样，我愿称之为百合花茶。更准确地说，百合花的进攻是完全按男主角们量身定制的，简直就像手拿功略书；为了攻略男主，她什么都做得出来。这样，一定程度上解决了性格问题，因为根本就没有男主是否会爱上她的选项，百合花完全就是按着男主的爱好在对自己的人设进行微调，而这种微调本身就是她人格控制和允许的……（当然也有另一个理由可以解释，在剧透篇再说吧。） 还有就是多条线的归并问题上，严格控制了每个男主喜欢的百合花是和他们有共同记忆的那个百合花，拒绝了来自其他线的百合花。（说到这个程度应该不会影响体验哦~） 5、承认同一个人经历过一些特定的不同的故事之后会成为不同的人（*明日之我非今日之我） 编剧的一些理解： 男主会喜欢上有特定选择的女主角 女主角依照男主的喜好对自己进行适度的人设微调后依然是她本人 喜欢建立在一些特定的共同记忆的基础上 即使记忆消失了，发生过的事情对心理的许多改变不会消失 承认同一个人经历过一些特定的不同的故事之后会成为不同的人（*明日之我非今日之我） 这些理解和故事的背景结合后是会发生质变的。（ 我会在剧透篇进一步讨论） 而且我也很佩服编剧把这些很多乙女游戏不会拿出来谈的东西摆在明面上讨论……当然，这个故事也是在这些理解的基础上将女主的个性与恋情自洽的~ 同时，编剧一些其它的想法也闪闪发光~ 比如说，一见钟情： 「凭外表判断人,某种程度上是无可避免的。因为，最开始也只能从外表来判断啊。」「人类以外的动物不也一样吗？凭借翅膀更大、鸣叫声更动听这些外在条件来判断是否具有魅力。」「但是，人类的有趣之处就在于不仅仅只看这些。」「比如说，虽然最初感到不满，却在交往过程中产生感情，这样的情况也是有的吧?」 这个剧本让我觉得值得封神的理由当然不止这一个~！ 应该说这个是我觉得附带的有趣的地方吧，也是我一直想要讨论但是没找到过这么漂亮的范本的。很遗憾的是，这个剧本最闪亮的地方是我认为说清楚会最影响游戏体验的…… 简而言之，这是我玩到的第二部解决多线统编的方案的乙女游戏，上一部是名作失忆症。多线统编就是说，具有不同攻略对象的女主角故事可以在同一个世界观下统一。其实这不是一个普通乙女游戏必须做的事情，完全可以用“不同的选择对象不同的故事”把事情割裂在每个可能性里，但是做好了对我而言是绝绝对对的加分项，那种震撼感真的是会让人念念不忘的。虽然在童话背景+提示的开始就猜测可能会有共同的真相，但是绝对想不到会做得这么圆融舒适。 总而言之，还是非常非常值得一玩的作品~希望大家能够理解编剧的小心机、体会到这部作品的乐趣~ 剧透篇好啦，默认点开这个就是已经打完前4部了！不然真的会很影响体验哦~乖O(∩_∩)O我们打完再来看好不好~（辉夜笑） 小时候生活在富裕家庭的混血爱丽丝提尔，常常因外貌被指指点点，自卑的他表演出自信的样子（爱丽丝）示人，遇见和鼓励了女主角；后来家道中落收到打击产生了灰姑娘为他承受痛苦，人格解离越发严重、记忆间歇消失进一步被排挤、不愿意上学、也被母亲发现（甚至恐惧），留在家中不被允许出门而产生了小红帽（在夜间外出游玩）、白雪（无法实现母亲的期望、满足母亲美好的少女般的童话幻想），在此期间小红帽遇见了好朋友大神但是有一天（恰好也发生了不幸的事故）回来后发现过劳死于家中的母亲陷入深深的自责， 之后白雪出现见到了这一幕也开始自责，独自与母亲的尸体居住于破败小屋内良久，时常夜间离开小屋注视湖面，与女主角的哥哥谅士相遇、最终被谅士发现了真相离开了小屋。辉夜的诞生契机则是爱丽丝提尔在母亲的葬礼后被迫在亲戚家庭中反复辗转、扭曲自我去迎合与讨好他人，最后意识到自己无论如何也不会被爱。最后，爱丽丝提尔（辉夜）来到竹叶之家（孤儿院），最终被确诊人格解离接受治疗，医师在他心中建立了新的人格“魔法师”（拥有所有人格的记忆、可以承受痛苦）希望他统领剩下的人格，但是魔法师根据他人的称呼认识到自己是不被认同的存在，拒绝显露人前，最终医师也失望了、不再管他，爱丽丝提尔被谅士（实习精神治疗师）接走、由谅士（也就是百合花）家领养。 百合花认出了爱丽丝提尔，不断地与他的各个人格打交道、也包括魔法师。在此期间，爱丽丝提尔由于对自己的自卑、对百合花的羡慕和依恋产生了新的人格：格莱特，他对女主角、女主角与他的羁绊有近乎扭曲的偏执，也因而产生了新的问题。百合花与魔法师达成交易决定拯救爱丽丝提尔当晚发生了关系，爱丽丝提尔醒来时陷入崩溃和迷茫，对着镜子听到魔法师对他说他喜欢百合花，不断地怀疑女主角的爱针对的是哪个自我，而后选择服用大量安眠药陷入沉眠，试图与其他人格进行对话（作为主人格的他始终无法与其他人格对话）。 在爱丽丝提尔陷入沉眠时，女主角与魔法师根据约定创造一个新的名为百合花的人格（小主人公），与每一个人格编织救赎的故事，每当做出错误选择时由魔法师撤回这个故事、重构百合花的人格。最终，百合花人格拯救了每一个残缺的人格（可喜可贺可喜可贺），每当一个残缺的人格被拯救沉睡的主人格爱丽丝提尔就取回一部分自我，最后召开了一场人格会议，做出最后的决定。后面的故事就不复述了也比较简单（） 总体来讲还是虽有遗憾但仍然可喜可贺的结局呢！ 多人格之间的故事其实不是罕见话题，不过故事的主视角（我）竟然也只是爱丽丝提尔的一个人格真的让我超级惊讶，尤其在魔法师篇里简直让人感慨（哎）。编剧也是真敢写呀。 这也不是突兀的设定、为了统编而统编，处处可以看到它早有预谋。明显的比如说同样的关于母亲话语的描述（小红帽和白雪）、城堡里又辗转到破败小屋的母亲（灰姑娘和其它）、关于湖与海的表述……异常的反复是重要的讯号！（可惜我一开始以为是快乐甜饼没好好思考，丧失了许多游戏体验TVT）魔法师篇里女主的那段与精神医师的对话突兀又恐怖，照应了男主在真实世界的那一段对白~（也印证了这里的女主并不是真实的百合花） 让我觉得很特别的是编剧的一些理解，我再次lay一遍我在非剧透篇提到的编剧理解： 男主会喜欢上有特定选择的女主角 女主角依照男主的喜好对自己进行适度的人设微调后依然是她本人 喜欢建立在一些特定的共同记忆的基础上 即使记忆消失了，发生过的事情对心理的许多改变不会消失 承认同一个人经历过一些特定的不同的故事之后会成为不同的人（*明日之我非今日之我） 这几个设定一方面保证了女主角强个性的基础上和各个男主相恋毫无违和感，也解释了各线的女主角是真实的百合花编织的故事里的符合她个性的不同木偶这件事。在不同的记忆浇灌下的爱丽丝提尔的各个人格碎片成长为了不同的人格，女主角为他们贴身定制了能够达成幸福结局的百合花。加上各个人格都来自于爱丽丝提尔，如果喜欢女主角是埋在潜意识里的话，大家都多少受到影响也是合理的。 其实单说每个人的故事的话，都不算很新颖。也不能说很符合常理。不过这种荒谬感也可以解释成爱丽丝梦游仙境的一种证明。（叹气）好沉重啊。 总体来说还是个远超期待的作品！（点头）今天一口气写了好多怕后面忘了，好累啊，有点写不动了，以后想补再说吧。 增田俊树的关西腔好可爱，我这波属于是自己标准语还没学清楚就想学关西腔了）……呜呜但是真的好可爱！！！","categories":["Tavg","Sakura"]},{"title":"7'Scarlet","path":"/Tavg/Sakura/a8fc724d.html","content":"无剧透篇先说结论，超级超级推荐（也很适合作为入坑作！） 篇幅精巧合适（基本无拖沓），长度和世界观匹配；节奏感绝妙，主线的强度让我有一种很多年前打Amnesia本篇的怀念感……入坑以来很久没有遇到一部这么让我感慨的作品了。音乐美工当然是非常优秀的，不过我更想说一说剧情。 我看了一下b站前辈（？）们的评价也有说“慢热”“刚开始担心会高开低走”……啊啊，我觉得不至于，虽然说不上全程高能但是绝对不是会不好接受的程度吧……要不就是对其中穿插的大量线索视而不见。（剧透篇我会选一些我印象深刻的去讲。）即使是和真相线一般相隔最远的不锁线的两条也不是游离于主线之外啊？谜题的每块拼图相互咬合，谜底一点一点解开，最后得到一个各种意义上的大正解。 这是我觉得这个游戏最让我惊艳的地方，恰到好处的世界观范围（小镇传说）匹配了恰到好处的篇幅，99%的伏笔全部回收（而且很难得的，这个世界观逻辑自洽）。你以为是自己多疑的地方、是所谓普通的特性、巧合的地方，（几乎）全部都可以被解释。（只能说到这里啦！） 如果：因为是乙女游戏所以戴着恋爱脑滤镜，对伏笔视而不见，只能像坐牢一样阅读所谓的“慢热的”“毫无信息量的”“恋爱脑”片段，最后按着攻略走到真相线开始“啊啊啊原来是这样”……只能说毫无思考，游戏体验直接折半。这类游戏的迷人之处正在于对每个错差的发现、推理、猜测和验证，不是吗？ 如果你愿意耐心去接受这个世界，我想你一定不会后悔这次旅程。 一些进一步的非剧透感想（个人意见！） 我认为Amnesia是神作的原因：4条线4个迥然相异的故事，每个故事有独立的谜题和主题，隐藏线解释和统一了4条线出现背后的原因，补充了4条线里（尤其是部分BE）出现的微小异常。这样的结构是前无古人后无来者的。与此同时，不同于日常的部分的世界观容量合适且逻辑自洽。 我认为七罪绯红是神作的原因：5条线（几乎是强制性的顺序）从浅入深的进入故事背景，通过一个又一个伏笔和线索持续引发怀疑感（真正意义上的“持续”），而5条线的真相是可以串在同一条时间线里弥合的（而且几乎不会因为女主角的主观选择改变客观世界会发生的事情），在真相篇和隐藏线里（几乎全部）进行了解释。世界观特点同上。 当然啦，我不可否认我偏爱20小时级别的精简的乙女游戏；长度上的合适，世界观范围上的合适，很大程度上可以造就一段堪称完美的游戏体验。最近玩的很多部游戏都有相当庞大的世界观（和相应的庞大的剧情文本量），不能说是不好啦，我只能说，很难让玩家保持专注和热情、对一个故事的细节保持记忆，也很难照顾到庞大世界观的角角落落。像失忆症或者七罪这样的篇幅，对我来说是刚刚好的，不过现在真的很少看到这样的游戏了。 简而言之，在世界观完善、节奏全程合理的基础上，失忆症的结构、七罪的细节都是我心中闪闪发亮的地方，也是我以后玩游戏的高期望值的设立位置。 剧透篇既然是剧透篇啦，前面讲过的关于剧情的赞美我就不讲啦！贴个链接~CV15364826 角色先从角色说起吧。 其实乙女游戏这么多好角色真的屡见不鲜啦，拿捏玩家不算困难的事情，很多人呢其实也就是标签拼一拼就能满足了（？？好像有骂到自己）…… 当然啦这个游戏的角色也是有自己的特色的！（我发现我的文风最近有点受到某种网络文体的影响……海涵，谢谢） 个人好感度：花手≈结月&gt;宗介≈斗逢≈伊空&gt;日野 让我感动的一件事：除了花手，全员都算得上普通人（流泪），我已经很久没玩过大家都是普通人的游戏了……我们来谈一点普通的恋爱吧…… 1. 花手一切真相的核心人物……只配备了一个（大概是be的）结局，震撼力满满的。当然啦，除了花手优秀的颜值（）以外，如果有更多女主能想起来的和哥哥的回忆想必我会更容易共情一点，不过考虑到花手操纵记忆的能力，恐怕女主的那些情绪都只存在于女主的情感记忆里而无法传达给我了吧。 2. 结月原以为是霸总的类型但是可爱到不行啦（咬手绢）！谁知道他还会学女主说话，救命啊，我乐得拍桌板，那么端正严肃的人还会经常开奇奇怪怪的玩笑也太好玩啦。有责任有抱负坚持着自己的信念（又能够不断地反思自身）……这样的leader谁能拒绝呀！NE后增加的内容也很让人沉默（哎，我不忍心再谈）。美人你谁！！！ 3. 宗介啊这不是Kenn吗（扶眼镜）哈哈才不是呢！是那种缠绕着理性氛围的文科生（所以是医学生不是数学生是吧是吧）。刚开始觉得&lt;啊啦，这个男的好呆啊不过好有趣&gt;直到后来…呆住…&lt;你这不是很会吗&gt;，事实上只是缺乏社会实践，是温柔又细腻很会照顾人的类型呢！虽然都在调查，几个男主只有宗介最后是通过推理找到杀人鬼的，足以证明他的技术力了~（比我强多了）。 4. 斗逢爱抖露desu！私底下是那种温柔的冒失鬼~说实话，第一次在浴场见到他摘下眼镜的样子我就被他迷倒了（？）——（指在宿舍里鸡叫）——真好看啊真好看啊！！！作为idol又有很有气场的一面，这种反差很拿捏哦。当然，打到中途我也有点疑问，事情真的这么简单吗？好像日常到普通的偶像剧恋爱桥段了一样呢。结果看到真相篇出现在他的格子后面的时候，简直是给我当头一棒，立刻我就想了起来，伊空说“斗逢几乎不吃东西”之类的……本来难以理解的经纪人小姐的琴声里，伊空慢慢地变成花瓣散入空中。以及通关后GE后出现的信件（这个细节太讲究啦）。为什么要骗我的眼泪！ 5. 伊空我的可爱年下柿子（打滚）！还有经典的柿子病娇环节（扭动）（？）！一开始看到没有高光的眼睛真的觉得会是真·腹黑的类型，后来发现完全没到那个程度。如果女主中间没对他产生过怀疑，他甚至不会表现出多少类病娇的表现。真的好抱歉，我打到中途也被编剧忽悠了，（也要怪草莓馅饼那段念白很有误导性……）觉得伊空可能真的不是什么好人（比如说穿过重重叠叠小巷立刻找到女主也太奇怪了吧），我也猜测会是坑可是又反驳不了自己，甚至在考虑如果真的是那样自己接受不了……最后发现他还是很温柔很好的！呜呜！TVT我滴空宝！最让我难受的片段是作为料理师去空手接白刃……（尤其在铺垫了他对料理的执着和对手的在意之后），不能说是什么乙女游戏首屈一指的痛苦啦但是我完完全全能共感，发自真心地感动。 6. 日野只是不是特别戳我……这种情节每次都是最让我生草的：所谓的，青梅竹马的男孩子和喜欢的女孩子出来旅行提供女孩子恋爱的机会（）天啊，作为普通的男孩子的日野重复了多少次看着喜欢的女孩子和别人卿卿我我，想想就已经开始头皮发麻了……实惨。还被女主整了半身汽水……。…… 呼呼，就写这么多吧，想起来再补也行。下面写一些我很喜欢的细节吧~~ 细节（个人线就不写啦，毕竟个人线的问题基本个人线内部都解答了跨度比较小） 呼应的主线部分线索 紫姓草的香味，红眼，溺水/草莓/玻璃珠…，记忆模糊+既视感“狩猎”、“饵”；鸟丸 花手 1. ‌开头&lt;不要过来&gt; 2. 从杀人犯手中救下市子，毫不犹豫地扣动扳机 3. 小时候宗介在花谷里见到的&lt;恐怖的男人&gt; 4. 一年前在奥音失踪：独自来到奥音，进出深山和禁区，被发现遗物(只写了名字的笔记本)，被从云家保存 5. 外套在山上的一个小屋中 记忆的盒子 1. (所有关于小镇的熟悉和女主的羁绊省略) 2. 伊空、斗逢 3. 关于温泉街 斗逢 1. 人的声音 2. 不吃东西、一直看起来很疲惫 3. 反复使用&lt;充电&gt;这个词 佑亚（个人来说的话 姐姐 ！） 1. 疲惫 2. 粘上泥土和草叶 一些我还没明白的线索 1. ？新月形状的小镇和坟包（很有趣的想法但是没有继续讲下去……） 2. 石长姬和花手的矛盾？ 3. 伊空草莓馅饼段的阴森森（）；伊空的秘密基地的产生？ 4. 反复提及的门铃和白猫面具有什么深意吗 5. 管理员 恰 好 能凑上和女主有羁绊的几个人……（女主实属爱的使者） 6. 非斗逢线（至少宗介线是，我记不清了）依然发生了祐亚推人事件，但是那条线里斗逢不具备在场的条件吧？（而且宗介父亲如果是被推落摔死，尸体也不该在神社？）这里没有作解释，有点遗憾。（或者可能解释了但是我当时没注意到……，那就无视这条XD） 7. 奥音熊猫的复刻？？ 8. 阿安套着奥音熊猫的衣服巡逻？？ 9. 快递车上的奇怪符号（似乎只作为了一个奇怪符号渲染氛围+标记哥哥身份使用……有点小可惜） 就这些吧~ （发出鸟丸的声音）これは最後だ！ ♥ 不得不吐槽一下，编剧，你知道我参加了几次祭典吗））————！你们霓虹人真的对祭典好有执念——）））（（（无伤大雅，哈哈哈）","categories":["Tavg","Sakura"]},{"title":"女王蜂的王房","path":"/Tavg/SakuraR/6f105268.html","content":"游玩顺序：辉夜篇（虚-&gt;燐-&gt;皇树）-&gt;玛瑙篇（白鸥-&gt;红玉-&gt;贵蜂丸） 好感度：燐&gt;白鸥&gt;虚&gt;红玉&gt;贵蜂丸&gt;皇树 总体感受：坐牢（……） 本着玩都玩了的想法还是全通了（虽然因为很多地方有点雷到所以时间跨度非常之长，大概有几个月，对我而言非常少有……） 想法很碎就还是用分条的方式吧。~ 全员心理上有一些残缺… 玛瑙和白鸥应该算残缺最少的，皇树的残缺属于我无法忍受的。每次皇树做出一些令人窒息的举动我都狠狠地盼望辉夜赶紧站起来啊！我无法理解和讨厌皇树以至于我不想提他的名字——如果没有皇树那些伤害，辉夜或许还能保留一些普通的爱的能力吧。更让我难受的是在面对燐和虚的时候，（尤其是燐），辉夜就成为了第二个皇树。…… 燐无疑让人太过于心疼。只是想要帮助辉夜的美好的愿望变成了二人之间永远的隔阂，魔眼是其中最关键的媒介。辉夜绝对无法从伤害中获得快乐，无论是虚还是燐情况都一样，只是逃避焦虑无助和痛苦而已，是一种恶性的发泄（到后来也兼有控制燐的原因）；但是虚是钝感而且M的（……），勉强可以接受，燐绝对不是，他只是因为爱而纵容，就像玛瑙纵容红玉一样。只不过，命运在选择魔眼的美好的期望里早就写好了坏结局。 虚的残缺和红玉的残缺是类似的，他们身上都有长期被排斥而生的自轻，虚对外表达为懦弱与钝感，红玉则表达为恣意和放纵。辉夜用类似皇树的爱的方式强势地控制和重塑了虚（再加上虚本来就带着点M的特质），能够走到一起不算奇怪。而玛瑙的温柔注定达不到那个效果。因此玛瑙一次又一次地以无条件的包容试图去感动、说服完全没有安全感的红玉，作为一把天生的嗜血的刀（不仅体现在生理上，而是红玉从小就被教育着杀戮、那是他的一部分），红玉会一次又一次地反叛玛瑙的温柔的信念、一次又一次地以出格的自我去试探玛瑙把玛瑙扎得伤痕累累，玛瑙和红玉的恋爱注定是困难的啊。如果没有转折，这种一退再退的纵容绝对大概率会转化成退无可退的深渊吧。简而言之，玛瑙 没 有 教化和控制红玉、给红玉被爱的安全感的能力。 白鸥写得就比较奇怪，一方面是自由的、带着玛瑙出城玩的温柔的大哥哥，另一方面是束缚者，其实我没太看明白这种剧情上的矛盾具体出自哪里。白鸥确实去救了辉夜失败了受了诅咒，不希望被喜欢的女孩子知道；后来剧情里他以此编制“利用”的借口劝退玛瑙也很正常。但是！为什么白鸥和大蛇、束缚这种设定绑定啊。这一点完全不明白……就算从别人的线里看，白鸥也绝对不是占有欲极强的类型，而是温柔的守护者啊—— 贵蜂丸也是比较容易雷的类型，倒不是因为他对故国王女的忠诚或者对玛瑙的背叛……把玛瑙这个傻白甜美少女当白给的东西若即若离是真的有点让人来火，虽然不是完全解释不通（叹气）。从来不明确自己对王女的心意，即使肢体上都没有给予任何安全感。玛瑙实惨。 我个人总体体验是真的一般。但是，两个王女很甜。（┭┮﹏┭┮）没想到我最磕的是两个女主角……彼此羡慕着嫉妒着想成为对方又彼此爱着，无论是辉夜篇里对玛瑙的几次三番让步和保护，还是玛瑙篇里辉夜一次又一次试图让玛瑙成长起来、成为能够被巢选择的女王候选人（虽然方式有些残忍，不过考虑到辉夜的经历，这确实只算辉夜标尺里的普通程度……）就是有个小问号，玛瑙线里辉夜是怎么让皇树支持她去培养玛瑙的…… 虽然都是想要执政的王女但是基本在游戏里看不到王女们除了暗杀女王和逃跑以外的政治行为……有那么一点儿戏……这个游戏也不是完全不沾政治，皇树利用宗教对人界的统治也描绘得很清楚。只是，王女们所有关于政治的想法只有空口谈：“想要一切变得更好”而已。作为即将上台的王女在各个方面都显得太无知和无力，下臣只有区区二三还常常失控……呃，所以只靠理想信念与爱就可以治理国家是吗？贵蜂丸是完全不做女王预备课程的 是吧……真的，我觉得区区二三臣下的关系都处理不好，想要成为操纵权势的人太困难了，顶多只是被皇树这种下臣操控而已…… 女王的能力简直是想到哪写到哪，整一个莫名其妙（而且即使是武力上的增强好像和统治也没什么关系），魔眼的设定也具有强烈的“植入”感（如果剥离所有与魔眼相关的故事，这个世界也依然能非常流畅地运作，就好像魔眼的设定可有可无）（而且辉夜到底是怎么能相信世界上存在不需要代价的变强……她自己不应该最明白吗）。白鸥的诅咒同理。（目移） 如果，因为是魔法的架空的世界所以一切不需要理由，只要作者希望就可以发生。那我看啥（流汗黄豆）不管什么东西只要作者想解释都能硬解释…… 就这些吧，因为拖到开学了，有点没心情玩……打这个游戏真的比较疲惫（）跨度太大了有所遗忘多多包涵，个人观点做个记录轻喷，谢谢~","categories":["Tavg","SakuraR"]},{"title":"蝶之毒·华之锁","path":"/Tavg/SakuraR/d4b32276.html","content":"虽然是名作但是今年才玩真是羞愧啊……因为理论上我21年才成年合法体验Butter（bushi） 看了知乎带佬和b站带佬写的蝶毒repo，深感我写不出更深刻的repo……所以就随便写写留个档了。 真相一点点揭开的感觉真的很好！而且有很—多的伏笔~（而且根据知乎带佬的分析，从心理学上也有可以分析的地方，但是这块我真的不是很懂……） （最喜欢真假哥哥555都好贴！）作为一个老作品画风我也能接受真是太好了，好多老作品我知道它可能挺好的可是有点不能接受TVT 个人觉得FD比本篇还要好看~然后ゆりこ和瑞人哥哥是绝对的大美人！！ 我非常不客观！……好感度：瑞人＞＞真岛＞秀雄≈斯波&gt;藤田……想了想还是就讲两个角色吧……其实是因为推别的角色是在一个多月以前因为不是特别戳我XP所以印象没那么深刻……） I. 瑞人 大恶人、、、大恶人竟然来大中华麦mayaku（防屏）、、、而且是万恶之源啊（自身很惨不是作恶的理由啊）……就两个词，秘密俱乐部，奇怪的大小姐。 尤其是&lt;奇怪的大小姐&gt;这个end，我觉得真岛完全是可以控制事情不要走到这个地步的……（但是你明明口口声声说爱我啊） =。=上一代的事情关百合子跟瑞人什么事……纯纯地是被牵扯进来了……就算是复仇，这个家毁得还不够彻底吗…… 真岛是大恶人（泪）就在游戏里进行一个这个、嗯、远观……我还是没太明白真岛人设说实话，就，我不希望一段剧情是有一个无法解释的神经病才能解释通顺……不过可能疯批就是不那么好理解……（他自己也说自己是疯批，哎） 我本来想提一嘴别的游戏的好几个大恶人但是怕被人骂，还是不提了。其实是想说真岛是真的哪哪都不干净……这个就是，恶人恋爱模拟器（） 这里我大概只能接受那个happy end（伪）虽然是个显著的有爱情没真相结局，（只是这个游戏的结局不就是二选一嘛，，真残忍啊~）但是能看到很少的真岛露出来的好的一面了（就是水下的还是非常恐怖） 就是说，姐妹们，不要盼恶人从悬崖底下带着马爬回来！！ 不得不插嘴讲一下FD里让我印象深刻的&lt;开花&gt;（&lt;秘密共犯&gt;后续）……運命ですか。 II. 真岛 大恶人、、、大恶人竟然来大中华麦mayaku（防屏）、、、而且是万恶之源啊（自身很惨不是作恶的理由啊）……就两个词，秘密俱乐部，奇怪的大小姐。 尤其是&lt;奇怪的大小姐&gt;这个end，我觉得真岛完全是可以控制事情不要走到这个地步的……（但是你明明口口声声说爱我啊） =。=上一代的事情关百合子跟瑞人什么事……纯纯地是被牵扯进来了……就算是复仇，这个家毁得还不够彻底吗…… 真岛是大恶人（泪）就在游戏里进行一个这个、嗯、远观……我还是没太明白真岛人设说实话，就，我不希望一段剧情是有一个无法解释的神经病才能解释通顺……不过可能疯批就是不那么好理解……（他自己也说自己是疯批，哎） 我本来想提一嘴别的游戏的好几个大恶人但是怕被人骂，还是不提了。其实是想说真岛是真的哪哪都不干净……这个就是，恶人恋爱模拟器（） 这里我大概只能接受那个happy end（伪）虽然是个显著的有爱情没真相结局，（只是这个游戏的结局不就是二选一嘛，，真残忍啊~）但是能看到很少的真岛露出来的好的一面了（就是水下的还是非常恐怖） 就是说，姐妹们，不要盼恶人从悬崖底下带着马爬回来！！ 不得不插嘴讲一下FD里让我印象深刻的&lt;开花&gt;（&lt;秘密共犯&gt;后续）……運命ですか。 （捂脸）呃呃就是说其实我也能接受拉灯……（=w=）就是，我平时玩TAVG吧，一坐四五个小时的，……按这个游戏的色彩密度，每一块颜色都认真看的话遭不住啊。所以我这个游戏打得意外的慢，要么就是碰到颜色然后自己的情绪不对就赶紧按掉了（（（）））（而且人在寝室也不好意思随时看这个……）但是，很带感，谢谢（&gt;﹏&lt;） 心理活动细腻又生动（也就是带佬们分析的基础吧）看下来非常流畅自然~就写这么多吧。&gt;_&lt;多的不方便讲了！*（有没有一种可能，只是一种可能，是up懒得写了）希望以后回想起来还能记得一些这个游戏带给我的感触吧。","categories":["Tavg","SakuraR"]},{"title":"蒸汽监狱","path":"/Tavg/SakuraA/5b138f5c.html","content":"概述 400年前，科学家们预知到洪水将临，遂建立空中〖小岛〗试图避难；不过，小岛面积有限，而洪水来得比预计更早，只有很少的人能够登上小岛。 费里尔家是一个科学氛围浓厚的隐藏于世的家庭，其中，亚克森莱尔是优秀的工程师，制造出无线电机器、电灯等，他的弟弟、重要的友人、他父亲收下的义子尤尼则是一个体弱多病的矿石研究爱好者。尤尼16岁时梦见石英矿石里的神灵与他对话，说他命不久矣，让他用石英代替心脏。尤尼拜托了亚克森莱尔进行这些操作。 由此，永生的尤尼诞生了。石英矿石有神明般的力量，使得一切伤害他的受到惩戒。 大洪水后，参与空中地区开发的费里尔家选择留在地面上，而尤尼选择了离开、尽管他后来一直为此后悔不已。费里尔家一代代传承着控制空中地区存亡的钥匙，在地面上延续下去。地上的文明毁灭又新生，划分出各个领地，发展出了更加绚烂的科技，比如蒸汽机和手枪；地上的人们以永生的尤尼作为宗教符号重塑人们的思想，建立了人口管制法案（政府，即神官院安排伴侣完成生育），而犯罪的人被安排去往地面一个特定的区域：保护区，由神官院的机关“追猎之犬”管理。此后，上下界互相排斥和歧视。 女主角是拥有低级爵位的政治世家的独女，由于小时候受到的帮助励志于成为警察官，后来实现了梦想。得知联姻破裂的当晚，父母被杀，女主被伪造成嫌犯，而被判流放去往下界的保护区；作为有义务一同行动的警察官搭档芬被迫调职去往追猎之犬。故事从这里开始。 角色repoEltcreed好抱歉我一直记不住这个人的名字只记得住姓……。 Valentine是下界银行家家族的独子，母亲来自于上界、父亲是下界少有的上届文化崇拜者，而他也受此影响，深深迷恋女主角象征上界文化的剑术。 所以这个迷恋……开始得特别突然……一开始我印象特别不好，感觉就像有权有势的资本家玩弄花季少女。事实上Valentine在男女关系上也比较……。有经验……。（在剪辑里我把下头的片段去掉了），不过走完所有人的线就会发现Valentine还是一个挺好的人。 有很多金钱和权势，也特别懂得怎么使用；同时承担相应的责任义务，管理着这片领土，牺牲自己也在所不惜。剧本娘应该很希望把他塑造成一个“为了满足他人常常忘记自己”的温柔的形象……？至少关于男女感情的这个点安插的实在太下头了。只能说现实中碰到这样的还是快跑吧，到底有多少表现得像Valentine的人会有他一样正直……但是或许valentine也只是在大是大非上正直，或者在女主面前温柔，其实对别人还是相当残忍和冷漠的。 Ulrik无法对他人交付信任的毒舌情报商。虽然剧情里写到情报商的工作细节真是太少了，几乎一直就在写和Valentine怎么在一起斗嘴（可恶，他俩斗嘴真的好可爱！，每段都好经典。）在恋爱方面完全就是小孩子。 一开始对这个人设+发色感觉很不好，好像笹塚尊……毒舌+高技能+美少年XD……实际上玩起来感觉还好吧，不会有撞车的感觉，其实还是很、相当不一样。 不过Ulrik你真的好凶啊。。。…… 因为背负着费里尔家的沉重的秘密与不要信任他人的教条，一直以来封闭内心非常孤独。这也是他会容忍（接受？）拉法叶的存在的理由。 只是没想到情势会脱离控制。 Adage面瘫脸医生！嘿嘿(●ˇ∀ˇ●)一直在父亲的阴影下苟延残喘呢。。。（不过为了这个来到下界是不是有点离谱……不过Adage本来就好像是对所谓规矩并不在意的人，比如他看某些书）他爸真的好变态，，，=。=过分离谱了…… 是代学霸，抱着拯救他人的心意（向着理想中的父亲努力）看了非常多的专业书超级努力，又毫不顾忌地炫耀自己看了很多违禁读物（虽然实操上超稚嫩的）……嘿嘿，嘿嘿。（？）喜欢打扫卫生也是大萌点！我也喜欢！我们可以好好交流一下。（原话：不要洗碗，夺走我的乐趣。） Ines怎么说呢，让我完全无感的人设……、、、如果我是Ines我一定在一切的开端想办法干掉这个傻逼leader而不是犯下无数的杀孽之后一边后悔一边逃离这个环境让傻逼leader的罪孽延续；而且，为了不辜负我所犯下的所有罪我一定会回到上界去不容忍任何风险，比如，带上女主角。。真的太离谱，怎么可能瞒得过去，我还以为得给女主整容其实也没有（），，这不是bis吗，能goodend我都要感慨一下命运的奇迹。 对了，上一段剧情刚说要错开走影响不好下一段就一起去买菜是不是有点离谱…… 有个伏笔没回收啊，心理活动透露Ines找女主家教是为了了解什么事情，……是为了了解啥啊？是leader的任务吗……也没说清楚啊。 有一条bad end里女主角对Ines全程抱有“乳畜业家庭的孩子好有趣”的想法好生草……这个我觉得真的很合逻辑，如果我是Ines看到女主一直这个态度我也完全好感不起来干嘛要冒险带着她去上界呀。 教堂的分支那里也很奇怪，呃，属于我自己过不去，我觉得选项不应该影响到客观事实，蝴蝶也不至于，yune应该还是在教堂里吧，goodend就是会在一切发生之前作为证人帮助女主，badend就是根本不出现。但我觉得这件事应该和选项没关系。 说起来，为什么好感度选项都和我心里想选的格格不入qwq我好想选“可爱”（嘿嘿）。 Yune剧毒的少年，渴求着爱（复读）。 哈哈哈哈哈哈哈哈哈哈好搞笑救命！但是好像确实是这个意思，嘿嘿，而且技能更强大一点。不过yune属于真的活腻了相当无聊……甚至有点神性的冷漠。 我还是，不明白为什么会叫女主来做servant，明明完全是不可能的事……一面说着好有趣，一面又可以把她作为“用来证明自己身份的”一次性的东西。为了终结而恋爱对女主来说也实在很为难啊…… 感情，来的，好，突然，啊。=。=好吧，也不是完全不能接受。 BestEnd相当莫名其妙，弄不明白一切是怎么好起来的。公平地说，yune如果靠自己的心脏活下去的话，应该是回到“命不久矣”的状态才对，像某个bad end里一样，但是……？ 比起best end更喜欢我剪出来的两个bad（normal？）end！ Fin我太心疼Fin了……Fin温柔又懦弱地一直爱着女主角呀、、呜呜TuT，其实一切正常的话什么都还好的，但是他被追猎之犬那个傻逼leader（以及变态医生）折磨得太离谱，我好心痛。。，， 如果我有Fin的成长经历估计也会成为这样的人，遇见女主角也会不可控地迷上她吧。 确实个人线是会有都和的感觉，一切发展得过于顺利了，不过谢谢你啊Valentine！。 女主非得跑回去的那个结局也太生硬了，她是有点冲动但是也不至于nt至此…… 感觉真的好甜哦！真的好甜好甜哦！整个游戏的糖分一半都在这里了！ 虽然Fin在别人的线里让女主/女主的对象寄了好几次但是我好像恨不上他，唉。被追猎之犬完全欺负坏了，真的好心疼。不过还是要给被香叶茶的女主点根蜡。 然后，朝向明天——“如果那天晚上我带着剑，一切都会有所不同”。 一边看一边好想哭。其实前面也有goodend让我觉得，“虽然事情很糟糕但是至少这让我们相遇相爱了”，也算不错，可是女主角的父母注定是回不来了。 爸爸妈妈都还在真是太好了。赶在一切发生之前。 我就好像那个，国产爽文里很喜欢写的那类女主角，穿越时空重生而来更改事情的走向。又或者说，走到这里我已经经历了所有糟糕的事情。 那些被命运强迫着的卑微无力的日子。没有力量，没有人信任，无法自力更生，更别提洗清罪名、为父母报仇，只不过是别人手中的棋子，生死都在别人一念间。我会被爱的人作为一次性的“证明”送走，会被爱我的人因为他受到的伤害而扭曲地送香叶茶或者送走，会被小喽啰送走……之类的。芬在追猎之犬leader手中饱经折磨，ulrik流着眼泪为我注射安乐死的药剂，valentine为了所谓的责任把我拦在升降梯外孤身赴死而我与ulrik在下界的混乱中被迫逃亡。很多不好的事情其实远远比好的事情容易发生，而更多的不好的事情其实没写在剧本里。最大的可能性其实是女主角在保护区混沌地过几年日子，满怀着满心善良与正义死去。 但是她还是回来了。，她拿起了剑，走向了明天。","categories":["Tavg","SakuraA"]},{"title":"终远的维尔休","path":"/Tavg/SakuraA/90cd81f.html","content":"全通时间：30h（可能也因为是日语的原因所以整体偏慢？但我感觉真的好长）说值不值得玩是一个很尴尬的事情，因为优缺点都非常非常突出……打完最大的感想：好累，还是谈一点普通人类的恋爱吧。 无剧透篇雷点可能雷点先lay一下： 试图用科技的内核解释魔幻的设定，非常的尴尬，非常非常非常的尴尬，我的生医工舍友（虽然我并没有生医工的舍友）听了都要流眼泪的程度……只能在心里手动矫正。真的不止于克隆人记忆数字化心脏存感情，要离谱的多。不仅这些所谓的科学尴尬得离谱，很多科学相关的设定也不能自圆其说。 有个非攻略对象的♂角色喜欢我的攻略对象……（呜呜呜好尴尬） 血腥暴力（）（）（）…… 非常非常地无力，女主是风中的树叶、时代的尘埃；而且，女主有时候非常的玉玉，（也考虑到她经历过的一切）代入困难 最后一个锁线角色的救济（good？）end打完才会解锁前面所有角色的好结局。虽然说起来先打be也没什么，但是事实上体验完全不同，那是一种朝着既定的悲哀前进的感觉……（唉……）比如说我个人习惯是先打ge再“回收”be，那故事体验就更倾向于认为ge是真实，反过来变成“回收”ge就很难受 Otome Games传统的 原谅ta就会有好结局……（对了对了！推右摇杆可以JUMP！） 优点好啦！那我们来看看优点！（就是在接受魔幻的科技内核的基础上） 每个角色都是一片puzzle，独立又关联的谜题，咬合在一起的时候真相也浮出水面，剧本完成度非常高；铺垫做得非常圆融。 剧本节奏的把控简直出神入化，可能也有篇幅比较余裕的原因吧，我感觉是我今年下半年玩的作品里节奏感最好的一本了！ 没有一条写得敷衍的角色线！（比起幻奏）每个角色都充分体现了魅力，角色设计也很鲜明。 音乐上感觉就一首我特别喜欢的；美工的话总体也非常不错，好几张cg都绝美……！。配音也没什么可以挑的~（点名Scien，太贴脸啦） 可以接受缺点的话去玩玩也挺好的 剧透篇惯例的好感度比较：Scien &gt; Mathis &gt; 2A &gt; Yve &gt; Lucas（总体上都挺高的） 剧本没办法比，对科学内核的发自内心的无法接受完全干涉了我的评价能力……本来也应该加入评价理由的。按我的攻略顺序来讲吧。 1. Mathis距离真相最远的线，本来以为应该是甜饼结果惨的不行。后来发现每条线都很惨。…… 其实我觉得这个科学内核已经有点离谱了，不过勉强作为设定接受也还行吧。铺垫设置得非常微妙，而且我个人xp（）的原因觉得Mathis超——kawaii。 女装直接把我击穿啦！ 2. Lucas一下子变得恐怖起来了，真的有吓到。我的道德洁癖一下子竖起来了，打咩哟……主要lucas的杀人和Scien还不太一样，Scien虽然也不是什么好人但是至少不是这样无差别伤害……（这算五十步和一百步吗？） 而且安排了好多杀我的中途BE，好感度都吓没了…… Lucas的香叶茶和Toma还不一样，他是真的牙白啊！！！太恶劣了！！！换个角度看和卡米尔也差不多吧？ 虽然说是洗脑。唉。只能说是可怜。 所以救济end的AS是上坟我觉得也完全理所应当……惨是真的惨，但是不给他足够惩罚的话又没办法告慰那些无辜死去的人们。这样的。 关于“洗脑”、“被控制”、“被威胁”杀人的杀人者的定义一直是很模糊的，能做的只能是也给予处罚了吧……&amp; 3. Scien 帅是真的帅，人格魅力都要溢出屏幕了，我也有幕强的心理的…… 好坏很难评价了，大家其实也会下意识地这么想吧，牺牲的不是自己共感的对象好像就没有那么难受；在别的线埋女主解决问题的时候会觉得有点糟糕？。是固守某个既定原则的人，对别人对自己都是这样，一样冷漠无情。还是女主改变了他呀~ 其实他向女主揭示自己的恶的时候就已经有好感了吧，希望对方认识到真正的自己……之类的；不过劝退女主的时候说的话实在太伤人了，让人直呼人间之屑。 明明是喜欢的但是不太有恋爱感……这样的。自信的骄傲的强大的理性的男人啊。 ……配音好贴脸！！好喜欢！！ 4. Yve表官配！Ricolis与Ricolis公主的守护者~ 从进线开始就很无语这个大好人的性格，感觉很扭曲难以接受……，总觉得会像Lucas一样突然爆出来什么怪东西，其实完全也没有，只是单纯的渴望着爱的温柔善良的人啊。 只是这种温柔和善良无法带来好的结局呢。 其实，从这条线开始暴露出更多的《真相》尤其是科学的，看的我非常难受，导致完全没有游戏体验，直到进了2A线我才开始缓过一口气…… 5. 2A太惨了……但是这个拯救的方法真的好愚蠢…… 对了？绝望end的CYCLE结局里Adolphe还是回去种ricolis吗？我不太搞得懂，而且时空悖论之类的我已经不想讲啦，麻烦看看石头门是怎么处理的吧。关于时间回溯这种问题的处理太粗糙了…… 真没想到是达哈特，好惊讶，本来的印象是“混沌中立”的角色，看完这个救济再回去打别的救济end的时候（除了Scien线正好死掉）总会想起达哈特会不会跳出来作妖。 就是不得不吐槽一下批量克隆的这个问题，如果像lucas赝品那种批量克隆是合理的话，Scien达哈特等等理当是可以无穷无尽的……？（？）还有设定一个机器隐藏起来定时备份定时生成之类的……？应该办法很多吧。 算了，我都能接受泡在培养皿里成体基因工程了还有什么不能接受的…… 对，就是这种奇怪的思考一直影响我共情…… 真的，我忍不住这个科学设定啊，如果能接受的话应该体验会好得多……那个那个，中山智美是一点生物基础都没有也敢于写这种本的吗（羞涩）。。。 幻奏那种本身就带点魔幻色彩的就算啦，这种故事整个真相都奠基在科学上吧……如果细细考虑把这些bug全堵上成为一部神作也不是不可能的事情吧。 好遗憾。 好遗憾。唉。","categories":["Tavg","SakuraA"]},{"title":"灰鹰幻境","path":"/Tavg/Sakura/24962.html","content":"无剧透 总体+剧本 总时长16个小时左右（主观感受是很长的……不过可能是因为我用flowchart不熟练找分点太费劲了），性价比很高。 现在能查到的一些攻略都不太实用……太长了，一边看一边打影响体验……大概就是猜猜看哪几个选项影响然后倒回去改。 系统：Flowchart用好的话存档不是特别大的问题，因为flowchart数据是全局的，倒回去改了哪个选项应该只有那个变化，其它数据都保留（读save就是回归到save时的选项状态）。但是《已读快进》功能变成摆设了……它不记录你看过哪些文段。（不过这个游戏换选项对文段影响不大，可以勇敢快进。）粉框对话的设置好二啊……硬着头皮快进看完。刚开始玩的时候有漏掉故事没点，被锁了好久…=w= 剧本 这个剧本形式和主流（？）日乙不太一样，更像是普通的剧情向tavg。一般的安排：共通+（一些选项导入/显式选择攻略对象）个人线，避免一个故事看四五遍看得无聊所以每个个人线会有不一样的故事（典型案例Amnesia本篇，几乎完全不同），同时共享一个世界观（CP，CM，…）但是这个本的形式是单一主线+隐藏支线（休），部分选项会影响结局女主的选择（对于矛盾、男主）。 不是说好或者坏，乙女游戏似乎不太倾向于用这种结构。理由很简单，会导致女主奇妙地变成万人迷……典型地举个例子，恋与制作人，刚和A贴贴完又和B贴贴，但是这种贴贴又是剧情不可割裂的，是在A B恋慕女主角才会发生后续的故事，不能割裂的看待“故事主线”和“恋爱线”。我反正不太能够接受，……女主面对每个男主都会有心动描写，这不好吧…… 如果要避免这种我是海王的错觉，只能尽量减糖。呃，所以灰鹰减糖减得不怎么像个恋爱游戏……不过故事真的讲的还可以，算比较完整了。 *完整不是说完美！而是说自圆其说。在这方面它回收伏笔确实做得还不错。很多本都喜欢有庞大（和日常生活截然不同）的世界观，但是在这种文字篇幅（加以有限的想象）基础上其实是很难完美无缺的，只能说在接受这个设定的基础上再做推理猜测。（DRB的世界观很有科学说服力吗？但是一个游戏真的一定要很有科学说服力吗？） 灰鹰的世界观设定给我感觉更像一个（黑）童话。具体在剧透篇里再细说。 CV LIST 傑德/艾爾cv.田村睦心（很贴人设！塔之主cv.平川大輔通用声线（但是就是好听！）拉凡cv.日野 聡萊維cv.斉藤壮馬和CM的眼罩笨蛋同声线。Soma kawai！盧格斯cv.古川慎休cv.浪川大輔（和palika的黑弥同声线，语气稍有变化奧爾迦cv.森川智之艾爾利克cv.石川界人（这个声线好甜！勞倫斯cv.鳥海浩輔通用声线。 插画 非常多 而且质量也很高！单冲着这些画买我觉得也不亏（？） 音乐 总体一般，点了几十个粉框对话任务以后你只会对那个对话bgm彻底ptsd……没有给我留下很深印象的曲子。 剧透化妆舞会前是日常向，化妆舞会后是恐怖向（？）。 伏笔很多而且回收得很巧妙。到最后都还有一些意犹未尽的人物的谜。 幻奏那种个人线的短故事容易局限在很少的矛盾里，但是灰鹰有足够的篇幅去讲述一个比较复杂的故事。 *灰鹰其实也是可攻略角色吧，这个戏分和结局跟别的攻略角色都能打平手啊…… 吐槽一些关于剧情的点。 i. 所有奇怪的设定当作黑童话都算能接受（）。 ii. 从转折点开始很惊喜！虽然是完全意外的转变，但是并没有那么强的违和感，（对上之前的一些伏笔和“黑影”“万花筒”相关的铺垫），给人眼前一亮的感觉，更想去探究故事的真相。 iii. 拉凡的人设很精细，也很讨喜；而莱维的扭曲就更让人怜惜和心痛（虽然我没办法原谅这个类型……其实莱维的疯和隔壁伊格尼斯有点像，但是伊格尼斯的选择要比莱维讨喜多了。）至于休和lucas，我基本没办法共情，不太理解。 i. 乙女游戏里的官二代都是在基层勤恳干活的吗…… ii. 我知道弗朗西丝卡扭曲的成长背景，也回收了拉凡视角下她对女主异常关怀的伏笔（？），但是还是理解不了她干掉闺蜜又悉心抚养闺蜜女儿的尊严论…… iii. 休在主线里几乎主导了这个故事，虽然一副《不想夺走别人的故事》只想做个旁观者的样子……而且休到底为什么、什么时候开始对女主感兴趣也是个谜，我想休应该见过很多有趣的灵魂吧。（不管说是主线里，还是休的支线里） iv. 虽然我知道这是不分线无可奈何的事情，但是女主能不能不要对每个人都看起来那么动心…… v. 没有一个绝对意义上的good end。 主要的bad end 省流版： ①女主和选择的男主两个人关起门来永远过下去 ②女主以特殊的身份被原谅（这个我觉得最不合理，以小镇对魔女的那个态度，真的会只因为是狼族首领的妻子免除怀疑吗？会以为有人出来说坏事是自己做的而被释放吗？） ③女主死掉，救赎小镇，开启与生的世界的通道。（这里我没太看懂，为什么女主没有在奈落？……这个是，想象中的尾声？）//以上是end（各男主角，end-A girl）和special end（塔之主，灰鹰） ④女主以某种行为使得故事在真相揭晓前结尾于“平凡”，可喜可贺。 休线的结局就是这一类（和hero-end，people-end本质并无不同）。或许有时候，揭露真相确实不如无知幸福吧。（反而是最接近ge的） ⑤崩坏end：女主因为和幽灵对话死掉故事结束（这个真的好奇怪啊，怎么实现的）；拉凡兄弟突然杀疯，这是我进的第一个结局……但很多end里女主都没做出有效的选择，不应该因为女主没有选择而使得男主发疯，这没有什么逻辑关系。 vi. 休线的女主因为害羞红眼睛但是怎么别的线都做没有嘛；女主的红眼功能略有一些凑数，只在两兄弟那里用了一下。 vii. 卢卡斯的形象还可以更细腻一点，爱上女主突然就算了，当作一吻定情吧，从爹控到救女主的转变也很突然……论角色的刻画的话，拉凡&gt;灰鹰＞莱维≈卢卡斯＞休（休真的太神秘了，说了很多还是觉得难以捉摸） viii. 既然只是传说，为什么小镇的人那么恐惧魔女呢？狼鹰的对立也有点刻意。就当作是设定去接受吧。 ix. 亚里亚应该知道自己的未来吧，但是为什么不能拯救自己呢……好遗憾啊。 就到这里，写得也比较不成体系，就作一些碎碎念吧。","categories":["Tavg","Sakura"]},{"title":"奥林匹亚的晚宴","path":"/Tavg/Sakura/3e3a34ab.html","content":"无剧透篇全通时间：约28小时（6天）。个人好感度：璃空＞朱砂≈缘＞玄叶＞时贞＞火向 satoi我的kami~~cv发挥也很优秀。 背景：是参考了日本神话……不过我不是特别了解，哈哈，不然一边玩应该能一边猜到一些东西。虽然我觉得有点中二但是也能接受吧……（说实话很难想象天女岛的制度是怎么运行的……还有天供岛的政治好像也很随意的样子……）几个海边还挺近的，到处都有马车直达…… 剧本：HE剧本我觉得都还可以。分个人线后面再谈。但是！但是！be2的设计天雷，，，看的我真的……。还有大家说的很多的白亚闪回2333 音乐：我好喜欢那首《彩虹》！ 不剧透很难评价啊 那接下来进入剧透环节！！（★,°:.☆(￣▽￣)/$:.°★ ）） 角色1. 璃空璃空！我的初恋！（？？）谁能拒绝这样的小孩我甚至不能给他贴标签！在别的线看到璃空我还是会嗷嗷叫！璃空！！！ 这应该就是《刻板温柔》？小孩真的很容易害羞，一直会脸红，好可爱啊。私心再放两张图。 但是剧情怎么说……我知道推荐攻略第一个角色应该是离真相很远，但是也不至于此……以及，现在我也没搞明白为什么璃空的be是被大海卷走？而且？我觉得叉梗不应该被轻易原谅，，不只是说be2里女主这个案子，还有那么多无辜的人。。有点过于圣母。 还有还有，为什么高材生、高级军官、贵族少爷，会被派去看大门啊。（？） 2. 时贞第一印象：这不是我弟弟嘛（天秤）？（？)有点难以下口…… 呃，，倒不是这个问题。主要是时贞真的自卑得让我脑子痛。……团队还挺喜欢自卑弟弟人设的……之前还有美人星川翡翠（）不至于，真的不至于。后面火向也是个自卑弟弟。…… 而且剧本最后的解释也很牵强。绿的族长被柑南洗脑就会说出那种程度的话吗……离大谱……时贞后面感觉被压迫得也精神不太正常……be里女主也不大正常了。 可能我个人原因吧，，我觉得这样的恋爱谈的好难过。…… 怎么说，远离真相的剧本靠后的部分确实让人emmm（be2的问题我最后再说吧） 3. 缘感觉在逐渐靠近真相了。其实第一印象的话我是很喜欢缘的！但是后来，，就蛮无语的。 （虽然但是，yosuga语速好慢啊，和火向完全形成对比了） 这种将整个人的生命寄托在另一个人身上的爱太沉重了，也就游戏里能代一代了。 这条线的主要矛盾在紫的覆灭原因的探寻上呢。（什么紫的男人死了要报仇我真的是好无语，这个设定加进去感觉就是强行增加男女主矛盾，整个游戏剧本里这个环节只在这里起作用，异常突兀）（代不来缘为什么突然发疯……代不来为什么缘对女主是不是想得起那个贝壳这么在意） 珠蓝真的是薛定谔的强势，乐死了，有的线有的时候怎么说都不听不听，在这里居然一下就说服了（虽然女主那三条是还不错但是珠蓝你对青的固执呢……） *为什么那么多cg里缘的眼睛都插在头发里，呃呃）（ 葡萄紫冰沙，嘿嘿。定位和汀紫鹤有点接近，不过我更喜欢缘~！（都是疯批？） 4. 玄叶个人原因对这种从事研究之类的工作的男主角有附加好感度——！手帕的设计太甜啦！！！！点名表扬！！！ 但是这个傻逼be，不是，我觉得玄叶做不出鲨了女主这种事╮(╯-╰)╭玄叶应该是那种，我死了为了让女主更好的活下去，的类型吧？另一个be还行，女主对着骷髅头哭哭我也觉得挺符合女主形象的。 （呜呜呜，既然那么喜欢我就别气我啊！还咚我，呜呜呜，你好过分。） 剧本靠后的文本还是让我觉得很残念，选项和结局关系不大确实是常事啦，但是黄绿的那个男的……就非得对他圣母才能有好结局真是难过啊，我的选项到底为什么会影响玄叶做药的速度和那个男的的 康复时间……而且女主真就一点都救不了玄叶吗…… 5. 火向一开始就抱有很高的期待但是打着打着相当失落的一条线。 长发美人suki！女主每次一回头就发现他在墙后面看着，嘿嘿，好可爱。而且也很容易脸红。（？）火向，你好高调，你这么高调行事到底是怎么一直低调到女主出现的……脱了外套好瘦好瘦，披着外套比较帅，嘿嘿。 还是碰到大家都反映的问题，有奇怪的替身感。其实我开始也觉得没事，可能就是喜欢小偶像嘛，然后认识到女主这个人，（虽然中间这个过程真难受啊）（女主到底喜欢他哪……）（就en追——）自卑的问题比上文提到的有增不减，（自卑表情的立绘我觉得不太好看），也是蛮难受的。可不可以多展现一点你帅气的一面呀。这张好好看！ 后来渐渐认识到这个世界真相我觉得好雷。……所以卑弥呼大人当葬仪社是为了赎罪？色层什么的我可真是……共通的时候我就觉得这个设定强迫症（）的不行，简直是救命。我知道他可能是无心的，但我还是会感到不爽。 朱砂线推完我才知道原来是对着我感慨天照大神。救命……好雷……完全是替身梗…… 神的问题结局也靠神来解决~属于是神仙打架凡人彳亍。 6. 朱砂全能朱砂！通晓百科还会做饭。（？我不是在说爱石爹！）不一样不一样。就很特别，哈哈哈，大概就是“我知道你喜欢我，但是请你说出来”，身上有那种理直气壮的自信强势、改变一切的决心和责任感，很迷人哦。不过这条线的女主比别的线都腼腆别扭啊…… 对了，你们理的人看起来好闲。。。 松岗配的好用力，感受到了，（。） 真相线！其实来的还是信息量有点突然的大，基本上都集中在火向和朱砂线里了，如果能放一点在前面会更温和吧。 正常的两个结局也是有赖于神的恩典。所以死水里的女神是被他们的爱情打动了是的吧（）我觉得算是所有线结局里逻辑最通顺的了…… 其它 月黄泉，你的be2是所有be2里我觉得最正常的。=。=女主到底为啥觉得自己和月黄泉关系很好……其实感觉也就很普通的长辈（？）的关系。虽然把月黄泉对女主的亲情解读到be2的占有欲保护欲有点不适，但是，比起别的be2要好多了。女主下海 柑南双子3p 海浬贴贴，哪个都雷得我欲仙欲死，，，。（（虽然我也觉得不会是一直这样，月黄泉和道摩sama都不干活嘛）如果写不来be2，可以不要写……如果我有罪，请用法律惩罚我……（。） 关于女主人设。唉，，，天真挂的贵族代小姐，也是可以的，玛丽苏光环的正中心了。其实我很难想象每天的目标都是谈恋爱的生活啊！（？）不过女主读了那么多书也没在剧本里有很多体现，其实我觉得应该要对人与社会有更深的了解吧，也可能是因为和外界接触实在太少了？我想象不出来。 这种上位者的天真的悲悯，有些剧情片段里让我会感到无奈呢。道摩作为一个父亲的严厉是可以接受的，但是“不会有人爱你”这种阴间话还是算了吧…… 这个本，就当小甜饼看看得了，剧情我觉得只比水晶鞋好一点点……人设还是不够立体，，故事发展也不是那么理直气壮。……可能很久以后在我心里都留不下什么痕迹了，只有璃空脸红红和几个雷人的be……","categories":["Tavg","Sakura"]},{"title":"灰姑娘的玻璃鞋","path":"/Tavg/Sakura/24104.html","content":"今天七周目cendrillon palika通关～ 本来想给个及格分3星，因为喜欢忧涟和黑祢的设、赞美美工和音乐，所以加一点，给个4芬⑧。作品整体体验还可以，美工音乐；长度我大约用时20h。总体上还是值回售价的。剧本有点中二病，，世界观有点微妙（bad end属实接地府，看得我对病娇的恐惧指数大幅提升）角色的话……好感度 忧涟≈黑祢＞紫鸢≈回螺＞＞泣虎＞纶灯＞＞歌紫歌以下全是剧透 个人吐槽，无意引战，雷点不同人之常情 忧涟学者型傲娇少年sukidesu！虽然说话很糟心，但是流着泪表白之类的几段描写+配音实在太好了（呜呜）“我也不知道这是什么感情，但是为什么我在哭呢”（（（ 黑祢配音里最喜欢的一个！超级合适啊！也是研究者的那种类型。白月光的话，我觉得不算很雷……当做亲人理解也没问题。是令人羡慕的羁绊啊……会做甜点的设定也很可爱哈哈！（咬一口女主的脸w吧唧）（其实是天然系 超级会撒娇的孩子） 其实同一个作品里的话感觉定位和忧涟过于接近了……（其实我就是会一直分不清，因为太像了，但是黑弥是黄头发，忧涟是黑头发——……） 可惜的就是这两位前期剧本有点，，看得脚趾扣地……代入党应该会很难受吧。因为都是那种不太会展开心扉的类型，女主就en追，努力尬聊的样子让人落泪。 紫鸢好会！！！温柔♂爸爸给我泡红茶……是那种超亚萨西的类型。有责任心和正义感的王子殿下。拿着标准童话本。 （不过性格也就不是特别鲜明了……） 回螺女装弟弟！……背负了这么多，很辛苦吧。哎可惜关于女装啊人格分裂啥的写的比较少，，。xp没有彻底满足qwq 泣虎呃呃，，这个是在和小学生恋爱吗？？？ 有点 幼稚 到 难以接受的程度了呜呜 而且幼稚就算了，还是个扭曲的兄控……很难接受……这个恋爱真的是谈不下去啦！ 纶灯。。…不是花了钱才不想走完这个线……这种不叫做be变态，应该称之为除了ge全程都变态。。。就是以前经历很惨精神有问题觉得死亡很美，卧室满墙壁蝴蝶标本暗室里满柜子尸体(游戏设定因诅咒而死的人变成玻璃)(男主称之为“蝴蝶”) 过程里大多数时间不是考虑把女主关起来(事实上也关了一段时间)就是把女主变成蝴蝶(玻璃尸体)保存起来…… 事实上中途bad end也是相当的多，还让女主帮他打扫尸体陈列柜不答应就会中途bad end ……好家伙女主真的好傻白甜，，……“不是你的错”这种阴间话简直让我三观震颤……那我想每个犯罪的变态不都有精神变态的理由……好离谱…… 痛苦面具就没摘下来过…… 。。我反正，对着一直想把我关起来或者干掉的变态说不出什么不是你的错之类的话。真的觉得有点过分了，，，。。而且之前打紫鸢线和泣虎线就可以看到纶灯有多病而且真的犯下不能原谅的错的，这也都可以随随便便原谅吗……要说犯罪的人的话，多少都有苦衷，难道说就合理吗…… 太病了，，，看不下去。 歌紫歌……嗯，什么叫做 反派颜值决定世界观…在中途be里世界已经被你毁灭过多少次了。错的到底是谁啊歌紫歌？……这种无知是罪吗？？？…… 伤害了这么多的人（比如玻璃的父母）的人，，怎么可以就这样走进作品的两个end…… 白月光琉璃相比来说都不算什么了。 至少三观得 正 吧。 而且打完回螺以后每次拨指针我都。。唉。…… 关于其中4个 bad end 的吐槽 黑祢线，女主逐渐变成玻璃没办法行动担心亲友保护她让她待在房间里没办法和黑祢一直相处，蛊惑黑祢杀掉所有女主亲友带她私奔（？？？）要求男主把她死后的尸体玻璃做成饰品佩戴在身上永远不许忘掉他。（？？？？？） 紫鸢线，除了男女主，所有人的时间静止了，男主情绪崩坏，女主在日复一日寻找解决办法无果后和男主交谈绝望指数up，想掐死他，无法下定决心然后男主掐着她嗓子亲（？？？），最后两个人过上了 永 恒 的幸福生活。 泣虎线，正常be，男主以为女主不够在意他，干脆两个人一起做咒术的祭品，被关在时间静止的钟塔里。女主也是日复一日解决办法找不到，最后幸福生活了。（算是比较正常了……） 忧涟线，男主给女主下了咒，女主眼里只能有她、和别的男的说话就会自己去自杀，男主的代价是“除了女主以外任何人都看不见自己”。然后男主把最好的朋友（紫鸢）杀掉了，女主的记忆也崩坏了，两个人在远离所有其他人的森林里幸福（）地生活了下去。（不过还挺忧涟的 感觉是他会做出来的事情……）","categories":["Tavg","Sakura"]},{"title":"已学的歌曲List","path":"/Private/ec50d896.html","content":"1Yoasabi-群青Yoasabi-たぶん稲葉曇-ハルノ寂寞香椎モイミ-花色TOKOTOKO/Gumi-君色に染まるMikito-小夜子Minato/初音未来-Magnet春卷饭-再会羽生まゐご-オノマトペ 2Yoasabi-怪物Deco*27-毒林檎HoneyWorks/Chico-世界は恋に落ちている【半】香椎モイミ-初恋日記ユイカ/れん-好きだから。","categories":["Private"]},{"title":"想玩的游戏List","path":"/Private/c342359b.html","content":"文字游戏 Clannad 克洛诺斯 little busters ALTDEUS:Beyond Chronos 星空列车与白的旅行 绯染天空 Ever 17 428 千恋万花 赛博酒保 绯色的欠片 夏空的独白 神なる君と 幸运之杖 QR社童话系列 蛇香 LicoBiTs-泡沫のユークロニア Slow Damage 其它 杀戮尖塔","categories":["Private"]},{"path":"/about/index.html","content":"友链关于留言板 皆さん、こんにちは！私はフロトなんです(x) SJTU-2021级-计算机科学与技术专业在读，Coding时长一年半，技术有待提升；因为对没兴趣的专业毫无兴趣（？）所以这方面的考分都一塌糊涂，虽然有兴趣的也没见得学得很好罢了（事到如今，只是强忍着绝望活在这个世界上.jpg） 唱歌すき！舟/术/原すき！drama&amp;漫画すき！文字游戏大大大大好き！ 在二次元世界是荤素不忌的文字游戏玩家，虽然成为文字游戏玩家的契机是从小到大没有一个打得好的游戏；；在三次元世界是一种非必要不出门主义的阴暗阿宅，同班同学都还认不全。讨厌人多的地方… 为了文字游戏自学了日语，虽然非常工地，但是能过N3，到现在大多数日语文字游戏基本随便玩，从23年开始会参加学校的日语辅修成为一个真正的二外美少女！（？）给大多数玩过的文字游戏全都写repo（这也是建立这个博客的最大理由……就是用来装一些乱七八糟的repo~）不过实际上对很多事情的思考角度和很多乙女游戏玩家不太一样，虽然不拒同担但是很害怕和某些同担交流（……） 机密信息： 虽然看上去一副被快餐信息宠坏的样子，但是其实以前是个纤细的文学少女？？？ 虽然现在对于大多数学科都是及格万岁，但是其实以前过着爽文般的高中生活 (*/ω＼*) 虽然在各类TAVG里阅尽千帆，但是好像xp是清纯男高中生（什 （逃"},{"path":"/friend/index.html","content":"友链关于留言板 Elivis 持续建设中x"},{"path":"/guestbook/index.html","content":"友链关于留言板 这里是本博客的留言板！&gt;w&lt; 请みんなさん畅所欲言~~"},{"title":"Buy Help","path":"/files/computer/buy.html","content":""},{"title":"PC check","path":"/files/computer/check.html","content":"检查电池健康度powercfg /BatteryReport"},{"title":"电脑install","path":"/files/computer/install.html","content":"装系统在DiskGenius选择快速分区，划分100MB的引导分区，剩下为普通分区（恢复分区有没有都可以）为了方便找引导区可以给它分配一个盘符 微PE启动计算机并选择windows安装器，选择刚刚的引导分区和系统盘数据分区，记得设定版本、勾选预设定盘符（不然系统盘不是C盘很难改） 加载完重启就可以天涯若比邻 修改cmd默认终端cmd原默认终端……呃……还是换一个。并且在json（左下角打开）中修改ctrl+c为ctrl+shift+c（同理v），方便接下来某些程序需要用到ctrl+c程序中断 删/改盘符系统自带的盘符修改器可能有问题，而PA等可能需要重启进入PE环境比较麻烦。 cmd指令改盘符 启动diskpart 查询磁盘列表list disk 选择需要操作的磁盘（序号看列表）select disk 0 查询该磁盘的分区情况list partition 选择需要操作的分区select partition 2 查询当前系统已分配盘符list volume 重新分配为指定盘符assign G 删除盘符（比如删除刚刚标记的引导分区盘符）remove G SELECT指令 DISK - 将焦点移动到磁盘。例如，SELECT DISK。PARTITION - 将焦点移动到分区。例如，SELECT PARTITION。VOLUME - 将焦点移动到卷。例如，SELECT VOLUME。VDISK - 将焦点转移到虚拟磁盘。例如，SELECT VDISK。 diskpart全指令（Help可以输出帮助信息） ACTIVE - 将选中的分区标记为活动的分区。ADD - 将镜像添加到一个简单卷。ASSIGN - 给所选卷分配一个驱动器号或装载点。ATTRIBUTES - 操纵卷或磁盘属性。ATTACH - 连接虚拟磁盘文件。AUTOMOUNT - 启用和禁用基本卷的自动装载。BREAK - 中断镜像集。CLEAN - 从磁盘清除配置信息或所有信息。COMPACT - 尝试减少文件的物理大小。CONVERT - 在不同的磁盘格式之间转换。CREATE - 创建卷、分区或虚拟磁盘。DELETE - 删除对象。DETAIL - 提供对象详细信息。DETACH - 分离虚拟磁盘文件。EXIT - 退出 DiskPart。EXTEND - 扩展卷。EXPAND - 扩展虚拟磁盘上可用的最大大小。FILESYSTEMS - 显示卷上当前和支持的文件系统FORMAT - 格式化卷或分区GPT - 给选择的 GPT 分区分配属性。HELP - 显示命令列表。IMPORT - 导入磁盘组。INACTIVE - 将所选分区标为不活动。LIST - 显示对象列表。MERGE - 将子磁盘与其父磁盘合并。ONLINE - 使当前标为脱机的对象联机。OFFLINE - 使当前标记为联机的对象脱机。RECOVER - 刷新所选包中所有磁盘的状态。 尝试恢复无效包中的磁盘，并 重新同步具有过时丛或奇偶校验数据 的镜像卷和 RAID5 卷。REM - 不起任何作用。用来注释脚本。REMOVE - 删除驱动器号或装载点分配。REPAIR - 用失败的成员修复一个 RAID-5 卷。RESCAN - 重新扫描计算机，查找磁盘和卷。RETAIN - 在一个简单卷下放置一个保留分区。SAN - 显示或设置当前启动的操作系统的 SAN 策略。SELECT - 将焦点移动到对象。SETID - 更改分区类型。SHRINK - 减小选定卷。UNIQUEID - 显示或设置磁盘的 GUID 分区表(GPT)标识符或 主启动记录(MBR)签名。 驱动 英伟达显卡驱动包 360驱动软件补全驱动 DirectX驱动包 软件 Coding大礼包-&gt;Vscode安装"},{"title":"PC配置List","path":"/files/computer/list.html","content":"OwnedMizuki主板：华硕H610M-ECpu：12代 I3-12100F（板+u 1200）显卡：GTX1060 3G内存：酷兽DDR4 3200Mhz 8G*2（257）Cpu散热器：玄冰400pro（90）固态：长江致钛Ti5000Pro 512G（326）电源：先马全模组500W （250）机箱：半岛铁盒白羊座（100）预估价格：2600 HatsuKoi主板：华硕H610M-ACPU：12代 I3-12100F（板+u 1200）显卡：GTX2060S 8G (1000)网卡：AX210内存：金士顿DDR4 2400MHz 8GB*2硬盘：西数730 521G；西数 HDD 1Cpu散热器：仿利民120的6铜管白色散热器电源：银欣全模组STX电源 500W机箱：小喆C2P+定制亚克力侧板预估价格：3500 闲置中机箱：半岛铁盒白羊座（100）电源：航嘉直出400W主板：华硕B150M-D（100 Seris/C230 series 芯片组 Family-A148）CPU：I5-6500 （含集显 HD Graphic 530）Cpu散热器：玄冰400pro（90）显卡：RTX960 2G"},{"title":"Stellar自定义","path":"/files/hexo/Stellar自定义.html","content":"摘录自创作者博客 特殊文本语法标签页（页内Tab）presentcodes文本表格页内标签示例~(效果还可以选择center和right) a b c a1 b1 c1 a2 b2 c2 &#123;% tabs active:1 align:left %&#125;&lt;!-- tab 文本 --&gt;页内标签示例~~(效果还可以选择center和right)&lt;!-- tab 表格 --&gt;| a | b | c || --- | --- | --- || a1 | b1 | c1 || a2 | b2 | c2 |&#123;% endtabs %&#125; Wiki文档页wiki页面创建 在blog/source/_data/projects.yml填写project信息。 Stellar: name: Stellar title: Stellar - 每个人的独立博客 subtitle: &#x27;每个人的独立博客 | Designed by xaoxuu&#x27; tags: 博客主题 cover: true # 是否显示封面 logo: src: /assets/wiki/stellar/icon.svg small: 112px large: 240px description: Stellar 是一个内置 wiki 系统的 hexo 主题，适合综合型站点使用。同时也拥有简约而精美的视觉设计和丰富的标签插件，帮助您简单从容地应对各种场合。 repo: xaoxuu/hexo-theme-stellar comment_title: &#x27;评论区仅供交流，有问题请提[issue](https://github.com/xaoxuu/hexo-theme-stellar/issues) 反馈。&#x27; giscus: data-repo: xaoxuu/hexo-theme-stellar data-mapping: number data-term: 226 sidebar: [toc] # 侧边栏的自定义 sections: # toc栏的自定义 &#x27;快速开始&#x27;: [0, 99] &#x27;基本使用&#x27;: [100, 199] &#x27;文档系统&#x27;: [200, 299] &#x27;进阶设定&#x27;: [900, 999] 新建一个文件夹用来存放wiki文档，包含： index.md: ---title: Indexlayout: wiki # 使用wiki布局模板 wiki: hexo # 使用的wiki名字menu_id: files #（是否需要激活导航栏）order: 0---"},{"title":"hexo&git 部署和粗修","path":"/files/hexo/hexo&git 部署和粗修.html","content":"第一次配置hexo 安装Git 安装 配置SSH ssh-keygen -t rsa -C &quot;你的邮箱地址&quot; 回车回车生成.SSH和.PUB文件 复制文件内容到Github ssh -T git@github.com 检查和授权 安装Nodejs https://blog.csdn.net/qq_48485223/article/details/122709354 安装 在nodejs文件夹下配置两个子文件夹node_global和node_cache npm config set cache &quot;D:\\Engineering odejs ode_cache&quot; npm config set prefix &quot;D:\\Engineering odejs ode_global&quot; 新建环境变量 NODE_PATH = D:\\Engineering odejs ode_modules （node_modules 路径） PATH 添加 D:\\Engineering odejs ode_global（node_global 路径） 安装hexo （-g为全局安装命令） npm install -g hexo-cli 如果Git失败ipconfig /flushdns git config --global http.sslVerify &quot;false&quot; 安装主题Volantis git clone https://github.com/volantis-x/hexo-theme-volantis.git themes/volantis Butterfly git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly Stellar git clone https://github.com/xaoxuu/hexo-theme-stellar.git themes/stellar Npm 包配置npm install --save hexo-deployer-gitnpm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archivenpm install hexo-renderer-pug hexo-renderer-stylus --save"},{"title":"Index","path":"/files/hexo/index.html","content":"关于hexo的学习笔记呀。（基本都不是原创~）"},{"title":"CUDA & pip","path":"/files/python/CUDA & pip.html","content":"https://zhuanlan.zhihu.com/p/331719151 - 知乎专栏 1️⃣ 配置 CUDA、cuDNN 如果你使用的系统支持 Nvidia 显卡，可以利用 CUDA 与 cuDNN 套件，对常用的 python 机器学习库进行加速。pip 是默认的 python 包管理器，但在校外网使用时偶尔会遇到卡顿问题，可以通过更换安装源解决。 关于 CUDA：CUDA（ComputeUnified Device Architecture），是显卡厂商 NVIDIA 推出的运算平台。 CUDA 是一种由 NVIDIA 推出的通用并行计算架构，该架构使 GPU 能够解决复杂的计算问题。 cuDNN：NVIDIA cuDNN 是用于深度神经网络的 GPU 加速库。它强调性能、易用性和低内存开销。NVIDIA cuDNN 可以集成到更高级别的机器学习框架中，如谷歌的 Tensorflow、加州大学伯克利分校的流行 caffe 软件。简单的插入式设计可以让开发人员专注于设计和实现神经网络模型，而不是简单调整性能，同时还可以在 GPU 上实现高性能现代并行计算。 一般来说，安装完 CUDA 也需要进一步安装 cuDNN 套件。 安装 查看一下支持的版本。 ​ 官网下载合适的版本安装包。暂时推荐 10.2！等多数包更新支持 11 后再进行迁移。 20201205，目前最新的 CUDA 版本号为 11.1，但仍然推荐使用上一个大版本最后的稳定版本，目前为 10.2。 仅仅安装以下几个组件。之后默认安装就好了，注意一下实际的安装路径。 ​ 请勿选择默认的安装模式，进行勾选其中 CUDA 部分组件即可。 正常来说安装完成后，相应的环境变量可以自动配置完成。如果没有，需要手动配置相应的环境变量，包含 bin、include、lib、libnvvp 几个文件夹，将其添加到用户级别的环境变量即可。 ​ 检查版本号。 PS C:\\Users\\Tommy&gt; nvcc -Vnvcc: NVIDIA (R) Cuda compiler driverCopyright (c) 2005-2019 NVIDIA CorporationBuilt on Wed_Oct_23_19:32:27_Pacific_Daylight_Time_2019Cuda compilation tools, release 10.2, V10.2.89 官网下载解压 cuDNN 文件，解压缩，将得到的三个文件夹的内容复制粘贴到 CUDA 安装目录即可完成安装。 C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2\\ 使用 torch 库检查 CUDA PyTorch 是最常用的一个可以直接利用 CUDA 库的 python 第三方包了。我们用它来了验证一下 CUDA 的安装是否完成。这里列举一些 torch​ 关于 CUDA 的操作。 &gt;&gt;&gt; import torch&gt;&gt;&gt; torch.__version__&#x27;1.6.0&#x27;&gt;&gt;&gt; torch.version.cuda&#x27;10.2&#x27;&gt;&gt;&gt; torch.cuda.is_available() # check CUDA availablityTrue&gt;&gt;&gt; torch.cuda.device_count() # GPUs1&gt;&gt;&gt; torch.cuda.current_device() # index of devicein use0&gt;&gt;&gt; torch.cuda.get_device_name(0) # GPU device name&#x27;GeForce RTX 2060&#x27;&gt;&gt;&gt; torch.cuda.get_device_capability(0) # capability of device(7, 5) # the major and minor cuda capability of the device&gt;&gt;&gt; torch.cuda.empty_cache() # free up GPU devices in use 这是在终端中的 python 交互库中完成的。直接在终端中输入 python 即可进入。 前段时间用了 yarn 之后，倍感 yarn 指令的亲切感。可惜目前来说，pip 还没有特别优秀的替代品，在一些安装配置指令上还有些不尽人意的地方。 另外一个比较值得注意的地方，pip 不存在项目环境与全局环境，所有第三方包均安装在全局目录下，这一点上来说，对项目快速部署不是特别友好。目前常见的方案是常见虚拟环境，如 conda，pipenv 等。 配置 pip，主要是对默认的源进行替换。 pip 换源与配置 注意不同系统中，配置文件存放的位置不同。 # Linuxmkdir ~/.config/pipsudo vi ~/.config/pip/pip.conf# macOSmkdir ~/.pipsudo vi ~/.pip/pip.conf# windowssudo vi %HOMEPATH%\\pip\\pip.ini 替换源尽量使用 https​，新版 ubuntu 要求使用 https​ 源。实测学院网连接清华的源很慢，可能也是因为 https​ 的原因。以下三个常用靠谱国内镜像源，选择其一即可。 # mirrorshttp://mirrors.aliyun.com/pypi/simple/https://pypi.tuna.tsinghua.edu.cn/simple/http://pypi.mirrors.ustc.edu.cn/simple/ 打开配置文件，覆盖其中的内容。 [global]index-url = http://mirrors.aliyun.com/pypi/simple/trusted-host = mirrors.aliyun.comtimeout = 30disable-pip-version-check = true[list]format = columns 常用库安装指令 列举一些常用的第三方包安装指令。注意，torch 有无 CUDA 的安装指令是不一样的，具体可以查看官网。 # pip 20.2(python 3.8)# pip toolspip install pip black pip-check pip-review# nice envpip install jupyterlab spyder# data process basepip install numpy pandas scipy# machine learningpip install scikit-learn# data visualizationpip install matplotlib# network and transmittingpip install paho-mqtt# file IO and databasepip install h5py pyyaml pymysql# encoding toolspip install chardet# funny toolspip install sphinx sphinx-rtd-theme sphinx-autobuild recommonmark prettytable# torch win with/without CUDApip install torch===1.6.0 torchvision===0.7.0 -f https://download.pytorch.org/whl/torch_stable.htmlpip install torch torchvision 一般的代码对第三方包版本的要求不是特别严格，所以对于这类依赖包、库不用特别更新。但一些用于终端的开发工具可以适当地进行更新。 # pip-checkpip-check -Hu# pip-reviewpip-review -i 笔者整理的 PyPI 包推荐，可以参考这篇文章。"},{"title":"EasyOCR","path":"/files/python/EasyOCR.html","content":"摘要EasyOCR 是一个python版的文字识别工具。目前支持80中语言的识别。 安装安装稳定版 pip install easyocr 安装最新版本： pip install git+https://github.com/JaidedAI/EasyOCR.git 安装完成后，可以通过easyocr.version 查看版本号： import easyocrprint(easyocr.__version__) 测试第一次安装使用，easyocr会下载默认模型。等待的时间比较长，而且容易失败。 如果一直失败，可以采用另一种方式，登录到网站下载模型。 下载检测器模型 下载识别器模型 将下载的模型文件解压后拷贝到当前登录的用户目录的.EasyOCR\\model文件夹下，Windows系统为：C:\\Users\\用户名.EasyOCR\\model。 识别模型（语言包）的文件名称和后面看到的语言类型并不是完全对应的，ch_sim对应简体中文(zh_sim_g2)，en对应英文(english_g2)。 调用方式 import easyocrreader = easyocr.Reader([&#x27;ch_sim&#x27;,&#x27;en&#x27;]) # this needs to run only once to load the model into memoryresult = reader.readtext(&#x27;chinese.jpg&#x27;) 输出结果： [([[189, 75], [469, 75], [469, 165], [189, 165]], &#x27;愚园路&#x27;, 0.3754989504814148), ([[86, 80], [134, 80], [134, 128], [86, 128]], &#x27;西&#x27;, 0.40452659130096436), ([[517, 81], [565, 81], [565, 123], [517, 123]], &#x27;东&#x27;, 0.9989598989486694), ([[78, 126], [136, 126], [136, 156], [78, 156]], &#x27;315&#x27;, 0.8125889301300049), ([[514, 126], [574, 126], [574, 156], [514, 156]], &#x27;309&#x27;, 0.4971577227115631), ([[226, 170], [414, 170], [414, 220], [226, 220]], &#x27;Yuyuan Rd.&#x27;, 0.8261902332305908), ([[79, 173], [125, 173], [125, 213], [79, 213]], &#x27;W&#x27;, 0.9848111271858215), ([[529, 173], [569, 173], [569, 213], [529, 213]], &#x27;E&#x27;, 0.8405593633651733)] 方法详解Reader()参数详解： lang_list (list)：识别语言代码，比如[‘ch_sim’,’en’]分别表示简体中文和英文。 gpu (bool, string, default = True) ：是否使能GPU，只有安装了GPU版本才有效。 model_storage_directory (string, default = None) ：模型存储位置，依次查找系统变量EASYOCR_MODULE_PATH (preferred)、MODULE_PATH (if defined)表示的路径或者~/.EasyOCR/路径。 download_enabled (bool, default = True)：如果没有对应模型文件时，自动下载模型。 user_network_directory (bool, default = None) ：用户自定义识别网络的路径，如果没有指明，则在MODULE_PATH + ‘/user_network’ (~/.EasyOCR/user_network)目录中查找。 recog_network (string, default = ‘standard’) ：替代标准模型，使用自定义的识别网络。 detector (bool, default = True) ：是否加载检测模型。 recognizer (bool, default = True) ：是否加载识别模型。 readtext(）参数详解 image (string, numpy array, byte) ： 输入图像； decoder (string, default = ‘greedy’)：选项有 ‘greedy’、‘beamsearch’ 和 ‘wordbeamsearch’； beamWidth (int, default = 5) ： 当解码器 = ‘beamsearch’ 或 ‘wordbeamsearch’ 时要保留多少光束； batch_size (int, default = 1) ： batch_size&gt;1 将使 EasyOCR 更快但使用更多内存； worker (int, default = 0) ： 数据加载器中使用的编号线程； allowlist (string) ： 强制 EasyOCR 只识别字符的子集。对特定问题有用（例如车牌等）； blocklist (string) ： 字符的块子集。如果给定了允许列表，则此参数将被忽略。 detail (int, default = 1)： 将此设置为 0 以进行简单输出； paragraph (bool, default = False)：将结果合并到段落中； min_size (int, default = 10) ： 过滤文本框小于最小值（以像素为单位）； rotation_info (list, default = None) ： 允许 EasyOCR 旋转每个文本框并返回具有最佳置信度分数的文本框。符合条件的值为 90、180 和 270。例如，对所有可能的文本方向尝试 [90, 180 ,270]。 contrast_ths (float, default = 0.1) ： 对比度低于此值的文本框将被传入模型 2 次。首先是原始图像，其次是对比度调整为“adjust_contrast”值。结果将返回具有更高置信度的那个； adjust_contrast (float, default = 0.5) ： 低对比度文本框的目标对比度级别。 text_threshold (float, default = 0.7) ： 文本置信度阈值 low_text (float, default = 0.4) ： 文本下限分数 link_threshold (float, default = 0.4) ： 链接置信度阈值 canvas_size (int, default = 2560) ：最大图像尺寸。大于此值的图像将被缩小。 mag_ratio (float, default = 1) ：图像放大率 slope_ths (float, default = 0.1) - 考虑合并的最大斜率 (delta y/delta x)。低值意味着不会合并平铺框。 ycenter_ths (float, default = 0.5) - y 方向的最大偏移。不应该合并不同级别的框。 height_ths (float, default = 0.5) - 盒子高度的最大差异。不应合并文本大小非常不同的框。 width_ths (float, default = 0.5) - 合并框的最大水平距离。 add_margin (float, default = 0.1) - 将边界框向所有方向扩展某个值。这对于具有复杂脚本的语言（例如泰语）很重要。 x_ths (float, default = 1.0) - 当段落=True 时合并文本框的最大水平距离。 y_ths (float, default = 0.5) - 当段落 = True 时合并文本框的最大垂直距离。"},{"title":"matplotlib","path":"/files/python/Matplotlib.html","content":"坐标轴字体大小 import matplotlib.pyplot as plt plt.xticks([1, 2, 3, 4, 5, 6, 7, 8]) plt.tick_params(labelsize=13) #刻度字体大小13 中文字体缺失凌云飞鸿的博客-CSDN博客_matplotlib字体缺失 pyplot 并不默认支持中文显示，也没有自带中文字体，因此需要自行下载所需字体，并修改 rcParams 参数来显示中文。下面以 SimHei （黑体）字体为例进行说明。 安装字体１．下载 SimHei.ttf 字体文件２．查看 matplotlib 的字体路径 import matplotlib print(matplotlib.matplotlib_fname()) 得到的路径（如~/.local/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc)是 matplotlib 参数预加载文件matplotlibrc的路径，则字体的存放路径为~/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf。将下载好的字体文件复制到该目录下 ３．删除 matplotlib 的缓冲目录查看 matplotlib 的字体缓存路径： import matplotlibprint(matplotlib.get_cachedir()) 得到的路径如~/.cache/matplotlib，在终端使用rm -rf ~/.cache/matplotlib命令删除缓存目录。这样做之后，在使用 matplotlib 绘图时，会自动生成新的缓存目录。 设置参数使用 matplotlib 绘图时，添加以下几行代码： import matplotlib.pyplot as pltimport matplotlibmatplotlib.rcParams[&#x27;font.family&#x27;] = &#x27;SimHei&#x27;matplotlib.rcParams[&#x27;font.size&#x27;] = 10matplotlib.rcParams[&#x27;axes.unicode_minus&#x27;]=False&#x27;&#x27;&#x27; 使用下面语句也可以plt.rcParams[&#x27;font.family&#x27;] = &#x27;SimHei&#x27;plt.rcParams[&#x27;font.size&#x27;] = 10plt.rcParams[&#x27;axes.unicode_minus&#x27;]=False&#x27;&#x27;&#x27; 这样就可以在绘图时使用该中文字体了。也可以在前面提到的 matplotlibrc 文件中修改这些参数。这里选择在代码中修改。 几种常用的中文字体： 中文字体 说明 SimHei 中文黑体 Kaiti 中文楷体 LiSu 中文隶书 FangSong 中文仿宋 YouYuan 中文幼圆 STSong 华文宋体"},{"title":"PipenV+Pyinstaller","path":"/files/python/PipenV+Pyinstaller.html","content":"pyinstaller main.py --noconsole --hidden-import PySide2.QtXml cd C:\\Users\\alery\\Desktop\\final Pipenv的作用 可以利用pipenv来实现同时管理项目中的python虚拟环境和相关包依赖。 使用步骤 cmd中输入命令 pip install pipenv 安装pipenv cmd切换路径到需要建立虚拟环境的项目目录下 输入命令 pipenv install 开始安装虚拟环境 安装完毕后输入命令 pipenv shell 进入虚拟环境 Pipfile文件 虚拟环境安装完毕后项目目录中将创建Pipfile/Pipfile.lock两个文件 Pipfile：用于保存项目的python版本、依赖包等相关信息 Pipfile.lock：用于对Pipfile的锁定 Pipfile文件可以单独移放到其他项目内，用于项目虚拟环境的建立和依赖包的安装 常用命令 pipenv install 若项目目录中虚拟环境未创建且无Pipfile文件，将安装虚拟环境并创建Pipfile文件 若项目目录中虚拟环境未创建且有Pipfile文件，将根据Pipfile文件来安装相应python版本和依赖包 若项目目录中虚拟环境已创建且有Pipfile文件，将根据Pipfile文件来安装依赖包 pipenv install xx: 安装python包 pipenv uninstall xx: 卸载python包 pipenv shell：进入虚拟环境(项目目录下) pipenv graph：显示包依赖关系 pipenv —venv：显示虚拟环境安装路径 pipenv run python main.py：在虚拟环境下运行py文件 pipenv —rm：清除环境 exit：退出虚拟环境"},{"title":"Tkinter","path":"/files/python/Tkinter.html","content":"https://blog.csdn.net/weixin_62651706/article/details/127026626 这篇博客将详细介绍 tkinter 模块的子模块，如消息框子模块（messagebox）、颜色选择器子模块（colorchooser）以及文件对话框子模块（filedialog），欢迎大家参考和学习！ 一、messagebox 子模块一般用法 messagebox 子模块的一般作用就是产生一个消息框，提供的消息框种类有 8 个，下面将一个一个介绍 【showinfo】showinfo(title=None, message=None, **options) 信息提示消息框 【title】弹窗的标题 【message】字符串，要显示的信息 【options】其他选项，具体见高级操作 【返回值】字符串对象 【提示音】信息提示音 代码示例 import tkinter.messageboxreturn_value = tkinter.messagebox.showinfo(&#x27;温馨提示&#x27;, &#x27;您还没有给我点赞哦！ 记得点赞，不要忘记啦！&#x27;)print(type(return_value), return_value)# &lt;class &#x27;str&#x27;&gt; ok 效果展示 【showwarning】showwarning(title=None, message=None, **options) 警告提示消息框 【title】弹窗的标题 【message】字符串，要显示的信息 【options】其他选项，具体见高级操作 【返回值】字符串对象 【提示音】信息提示音 代码示例 import tkinter.messageboxreturn_value = tkinter.messagebox.showwarning(&#x27;严重警告&#x27;, &#x27;如果你还不给我点赞，你的电脑将收到病毒攻击！&#x27;)print(type(return_value), return_value)# &lt;class &#x27;str&#x27;&gt; ok 效果展示 showwarning 【showerror】showerror(title=None, message=None, **options) 错误提示消息框 【title】弹窗的标题 【message】字符串，要显示的信息 【options】其他选项，具体见高级操作 【返回值】字符串对象 【提示音】错误提示音 代码示例 import tkinter.messageboxreturn_value = tkinter.messagebox.showerror(&#x27;系统错误&#x27;, &#x27;系统正在受到未知来源的病毒攻击！ (ERROR_3X007)&#x27;)print(type(return_value), return_value)# &lt;class &#x27;str&#x27;&gt; ok 效果展示 showerror 【askquestion】askquestion(title=None, message=None, **options) 一般询问消息框 【title】弹窗的标题 【message】字符串，要显示的信息 【options】其他选项，具体见高级操作 【返回值】字符串对象 【提示音】无 特别的，这个窗口无法点击关闭按钮，只能点击“是(Y)”或者“否(N)” 与 askyesno 的区别在于，该返回值为 str，而 askyesno 为 bool 代码示例 import tkinter.messageboxreturn_value = tkinter.messagebox.askquestion(&#x27;是否点赞&#x27;, &#x27;您要给我点赞是吗？&#x27;)print(type(return_value), return_value)# &lt;class &#x27;str&#x27;&gt; yes(点击是) no(点击否) 效果展示 askquestion 【askokcancel】askokcancel(title=None, message=None, **options) “确定取消”询问消息框 【title】弹窗的标题 【message】字符串，要显示的信息 【options】其他选项，具体见高级操作 【返回值】布尔值 【提示音】无 代码示例 import tkinter.messageboxreturn_value = tkinter.messagebox.askokcancel(&#x27;点赞确认&#x27;, &#x27;是否给这篇博客点赞？&#x27;)print(type(return_value), return_value)# &lt;class &#x27;bool&#x27;&gt; True(点击确定) False(点击取消或关闭) 效果展示 askokcancel 【askyesno】askyesno(title=None, message=None, **options) “是否”询问消息框 【title】弹窗的标题 【message】字符串，要显示的信息 【options】其他选项，具体见高级操作 【返回值】布尔值 【提示音】无 特别的，这个窗口无法点击关闭按钮，只能点击“是(Y)”或者“否(N)” 代码示例 import tkinter.messageboxreturn_value = tkinter.messagebox.askyesno(&#x27;收藏确认&#x27;, &#x27;是否收藏这篇博客？&#x27;)print(type(return_value), return_value)# &lt;class &#x27;bool&#x27;&gt; True(点击是) False(点击否) 效果展示 askyesno 【askyesnocancel】askyesnocancel(title=None, message=None, **options) “是否取消”询问消息框 【title】弹窗的标题 【message】字符串，要显示的信息 【options】其他选项，具体见高级操作 【返回值】布尔值或者 None 【提示音】无 代码示例 import tkinter.messageboxreturn_value = tkinter.messagebox.askyesnocancel(&#x27;支持&#x27;, &#x27;是否点赞并收藏这篇博客？&#x27;)print(type(return_value), return_value)# &lt;class &#x27;bool&#x27;&gt; True(点击是) False(点击否) None(点击取消或关闭) 效果展示 【askretrycancel】askretrycancel(title=None, message=None, **options) “重试取消”询问消息框 【title】弹窗的标题 【message】字符串，要显示的信息 【options】其他选项，具体见高级操作 【返回值】布尔值 【提示音】信息提示音 代码示例 import tkinter.messageboxreturn_value = tkinter.messagebox.askretrycancel(&#x27;提示&#x27;, &#x27;运气不佳，白嫖失败！&#x27;)print(type(return_value), return_value)# &lt;class &#x27;bool&#x27;&gt; True(点击重试) False(点击取消或关闭) 效果展示 askretrycancel 高级操作 高级操作呢，一般人是不知道的，只有看了子模块 messagebox 源代码的人才知道，为什么这么说呢，下面我们看看部分源代码就知道了 # tk common message boxes# tk的常见消息框# this module provides an interface to the native message boxes# available in Tk 4.2 and newer.# 该模块为Tk 4.2及更新版本中可用的本地消息框提供接口# written by Fredrik Lundh, May 1997# 作者：Fredrik Lundh，1997年5月## options (all have default values):# 参数（都有默认值）# - default: which button to make default (one of the reply codes)# 设置默认值的按钮（其中一个回复代码）# - icon: which icon to display (see below)# 要显示的图标（见下文）# - message: the message to display# 要显示的消息# - parent: which window to place the dialog on top of# 将对话框放置在哪个窗口的上面# - title: dialog title# 对话框标题# - type: dialog type; that is, which buttons to display (see below)# 对话框类型；也就是说，要显示哪些按钮（见下文）# constants# icons 【用于icon参数】ERROR = &quot;error&quot; # “错误”图标INFO = &quot;info&quot; # “信息”图标QUESTION = &quot;question&quot; # “询问”图标WARNING = &quot;warning&quot; # “警告”图标# types 【用于type参数】ABORTRETRYIGNORE = &quot;abortretryignore&quot; # 中止、重试、忽略 （3个按钮的模式）OK = &quot;ok&quot; # 确定 （1个按钮的模式）OKCANCEL = &quot;okcancel&quot; # 确定、取消 （2个按钮的模式）RETRYCANCEL = &quot;retrycancel&quot; # 重试、取消 （2个按钮的模式）YESNO = &quot;yesno&quot; # 是、否 （2个按钮的模式）YESNOCANCEL = &quot;yesnocancel&quot; # 是、否、取消 （3个按钮的模式）# replies 【用于default参数】ABORT = &quot;abort&quot; # 默认为“中止”按钮RETRY = &quot;retry&quot; # 默认为“重试”按钮IGNORE = &quot;ignore&quot; # 默认为“忽略”按钮OK = &quot;ok&quot; # 默认为“确定”按钮CANCEL = &quot;cancel&quot; # 默认为“取消”按钮YES = &quot;yes&quot; # 默认为“是”按钮NO = &quot;no&quot; # 默认为“否”按钮 上面这段说明（不含中文翻译）是子模块 messagebox 的模块文档说明（很重要），我们发现啊，除了我们可以直接看到的 title 参数和 message 参数外，其实还有其他参数的，只不过它们被用 **options 给代替了，导致我们不知道还有什么参数（可能是因为一般不用修改这些参数，它们只需要采用默认值就行了叭） （作者 Fredrik Lundh 在1997年就写出了这么牛逼轰轰的代码，膜拜啊 ~ 膜拜啊 ~ orz） 代码示例 import tkinter.messageboxreturn_value = tkinter.messagebox.askyesnocancel(&#x27;程序错误&#x27;, &#x27;您可以选择终止程序的运行 或者重新尝试运行 或者忽略错误继续运行&#x27;, default=tkinter.messagebox.ABORT, icon=tkinter.messagebox.ERROR,type=tkinter.messagebox.ABORTRETRYIGNORE) 效果展示 高级操作 还有其他的大家也可以积极尝试呀！ 二、colorchooser 子模块 你们知道颜色选择器是什么东东嘛？打开 Word 文档，随便输入什么东西，然后选中输入的文本，修改其颜色时，可以看到有个“其他颜色”的按钮，点一下，就会弹出来一个弹窗，而这个弹窗就是 Word 的颜色选择器，它可以得到 RGB 码中的任意一种颜色 而 tkinter 模块也有一个内置的颜色选择器，功能和别的颜色选择器差不多，但是样子稍有不同 askcolor(color: str | bytes | None = ..., *, initialcolor: _Color = ..., parent: Misc = ..., title: str = ...) 【color】同下面的 initialcolor 【initialcolor】初始颜色，格式为含有 3 个范围在 0~255 整数的元组 【parent】颜色对话框的父窗口（颜色对话框将显示在其上面） 【title】对话框的标题 【返回值】一个元组，格式: (颜色元组, RGB码) 代码示例import tkinter.colorchooserprint(tkinter.colorchooser.askcolor())# (None, None) 点击取消或关闭# ((0, 0, 0), &#x27;#000000&#x27;) 格式: (颜色元组, RGB码) 效果展示 colorchooser 下面给出一张对比图（Word 的颜色选择器） Word 文档的颜色选择器 其实他俩差不了多少 三、filedialog 子模块 我们平时打开文件啊、保存文件等，都会有一个弹窗弹出来，让我们选择打开的文件或保存路径等，而这些弹窗就是文件对话框，很幸运啊，tkinter 模块的 filedialog 子模块早在 1997 年就有了这些接口（作者还是上文提到的那个“大牛”），让我们来看一看吧 【askopenfilename】askopenfilename(*, defaultextension: str | None = ..., filetypes: Iterable[tuple[str, str | list[str] | tuple[str, ...]]] | None = ..., initialdir: StrOrBytesPath | None = ..., initialfile: StrOrBytesPath | None = ..., parent: Misc | None = ..., title: str | None = ..., typevariable: StringVar | str | None = ...) 文件打开 【defaultextension】默认扩展名（如果没有写扩展名） 【filetypes】文件类型选项（可迭代对象） 格式：[(文件说明, 文件扩展名)] 或者 [(文件说明, [文件扩展名1, 文件扩展名2, …])] 【initialdir】初始目录 【initailfile】初始文件名（可加扩展名，也可不加，不加则使用默认扩展名） 【parent】父窗口（弹窗会显示在父窗口上面，也可以空着为默认值，则直接弹出） 【title】窗口标题 【typevariable】类型变量 【返回值】字符串对象（文件路径） 代码示例 import tkinter.filedialogreturn_value = tkinter.filedialog.askopenfilename(filetypes=[(&#x27;All Files&#x27;, &#x27;.*&#x27;)], title=&#x27;打开文件&#x27;, initialfile=&#x27;Python.py&#x27;, initialdir=&#x27;C:/Users/小康/Desktop&#x27;)print(type(return_value), return_value)# &lt;class &#x27;str&#x27;&gt; C:/Users/小康/Desktop/示例文件.txt (选中 示例文件.txt) 效果展示 askopenfilename 【asksaveasfilename】asksaveasfilename(*, confirmoverwrite: bool | None = ..., defaultextension: str | None = ..., filetypes: Iterable[tuple[str, str | list[str] | tuple[str, ...]]] | None = ..., initialdir: StrOrBytesPath | None = ..., initialfile: StrOrBytesPath | None = ..., parent: Misc | None = ..., title: str | None = ..., typevariable: StringVar | str | None = ...) 文件另存为 【confirmoverwrite】是否覆盖重名（原）文件（默认为True，即“已存在”会询问是否覆盖） 【defaultextension】默认扩展名（如果没有写扩展名） 【filetypes】文件类型选项（可迭代对象） 格式：[(文件说明, 文件扩展名)] 或者 [(文件说明, [文件扩展名1, 文件扩展名2, …])] 【initialdir】初始目录 【initailfile】初始文件名（可加扩展名，也可不加，不加则使用默认扩展名） 【parent】父窗口（弹窗会显示在父窗口上面，也可以空着为默认值，则直接弹出） 【title】窗口标题 【typevariable】类型变量 【返回值】字符串对象（文件路径） 代码示例 import tkinter.filedialogreturn_value = tkinter.filedialog.asksaveasfilename(filetypes=[(&#x27;所有文件&#x27;, [&#x27;.py&#x27;, &#x27;.txt&#x27;])], title=&#x27;另存为文件&#x27;, initialdir=&#x27;C:/Users/小康/Desktop&#x27;, defaultextension=&#x27;.txt&#x27;)print(type(return_value), return_value)# &lt;class &#x27;str&#x27;&gt; C:/Users/小康/Desktop/hello.txt (输入 hello) 效果展示 asksaveasfilename 【askopenfilenames】askopenfilenames(*, defaultextension: str | None = ..., filetypes: Iterable[tuple[str, str | list[str] | tuple[str, ...]]] | None = ..., initialdir: StrOrBytesPath | None = ..., initialfile: StrOrBytesPath | None = ..., parent: Misc | None = ..., title: str | None = ..., typevariable: StringVar | str | None = ...) 多个文件打开 【defaultextension】默认扩展名（如果没有写扩展名） 【filetypes】文件类型选项（可迭代对象） 格式：[(文件说明, 文件扩展名)] 或者 [(文件说明, [文件扩展名1, 文件扩展名2, …])] 【initialdir】初始目录 【initailfile】初始文件名（可加扩展名，也可不加，不加则使用默认扩展名） 【parent】父窗口（弹窗会显示在父窗口上面，也可以空着为默认值，则直接弹出） 【title】窗口标题 【typevariable】类型变量 【返回值】字符串对象（文件路径） 代码示例 import tkinter.filedialogreturn_value = tkinter.filedialog.askopenfilenames(filetypes=[(&#x27;All Files&#x27;, &#x27;.*&#x27;)], title=&#x27;打开文件&#x27;, initialfile=&#x27;Python.py&#x27;)print(type(return_value), return_value)# &lt;class &#x27;tuple&#x27;&gt; (&#x27;D:/Python 测试/a0.py&#x27;, &#x27;D:/Python 测试/a1.py&#x27;, &#x27;D:/Python 测试/a2.py&#x27;) 效果展示 askopenfilenames 【askopenfile】askopenfile(mode: str = ..., *, defaultextension: str | None = ..., filetypes: Iterable[tuple[str, str | list[str] | tuple[str, ...]]] | None = ..., initialdir: StrOrBytesPath | None = ..., initialfile: StrOrBytesPath | None = ..., parent: Misc | None = ..., title: str | None = ..., typevariable: StringVar | str | None = ...) 文件打开 【mode】文件打开模式（同 open 函数的 mode 参数） 【defaultextension】默认扩展名（如果没有写扩展名） 【filetypes】文件类型选项（可迭代对象） 格式：[(文件说明, 文件扩展名)] 或者 [(文件说明, [文件扩展名1, 文件扩展名2, …])] 【initialdir】初始目录 【initailfile】初始文件名（可加扩展名，也可不加，不加则使用默认扩展名） 【parent】父窗口（弹窗会显示在父窗口上面，也可以空着为默认值，则直接弹出） 【title】窗口标题 【typevariable】类型变量 【返回值】文件 IO 对象 代码示例与效果展示类似于上面的 askopenfilename 【askopenfiles】askopenfiles(mode: str = ..., *, defaultextension: str | None = ..., filetypes: Iterable[tuple[str, str | list[str] | tuple[str, ...]]] | None = ..., initialdir: StrOrBytesPath | None = ..., initialfile: StrOrBytesPath | None = ..., parent: Misc | None = ..., title: str | None = ..., typevariable: StringVar | str | None = ...) 多个文件打开 【mode】文件打开模式（同 open 函数的 mode 参数） 【defaultextension】默认扩展名（如果没有写扩展名） 【filetypes】文件类型选项（可迭代对象） 格式：[(文件说明, 文件扩展名)] 或者 [(文件说明, [文件扩展名1, 文件扩展名2, …])] 【initialdir】初始目录 【initailfile】初始文件名（可加扩展名，也可不加，不加则使用默认扩展名） 【parent】父窗口（弹窗会显示在父窗口上面，也可以空着为默认值，则直接弹出） 【title】窗口标题 【typevariable】类型变量 【返回值】元组形式的文件 IO 对象 代码示例与效果展示类似于上面的 askopenfilenames 【asksaveasfile】asksaveasfile(mode: str = ..., *, confirmoverwrite: bool | None = ..., defaultextension: str | None = ..., filetypes: Iterable[tuple[str, str | list[str] | tuple[str, ...]]] | None = ..., initialdir: StrOrBytesPath | None = ..., initialfile: StrOrBytesPath | None = ..., parent: Misc | None = ..., title: str | None = ..., typevariable: StringVar | str | None = ...) 文件另存为 【mode】文件打开模式（同 open 函数的 mode 参数） 【confirmoverwrite】是否覆盖重名（原）文件（默认为True，即“已存在”会询问是否覆盖） 【defaultextension】默认扩展名（如果没有写扩展名） 【filetypes】文件类型选项（可迭代对象） 格式：[(文件说明, 文件扩展名)] 或者 [(文件说明, [文件扩展名1, 文件扩展名2, …])] 【initialdir】初始目录 【initialfile】初始文件名（可加扩展名，也可不加，不加则使用默认扩展名） 【parent】父窗口（弹窗会显示在父窗口上面，也可以空着为默认值，则直接弹出） 【title】窗口标题 【typevariable】类型变量 【返回值】文件 IO 对象 代码示例与效果展示类似于上面的 asksaveasfilename 【askdirectory】askdirectory(*, initialdir: StrOrBytesPath | None = ..., mustexist: bool | None = ..., parent: Misc | None = ..., title: str | None = ...) 选择文件夹 【initialdir】初始目录 【mustexist】是否必须为现有目录 【parent】父窗口（弹窗会显示在父窗口上面，也可以空着为默认值，则直接弹出） 【title】窗口标题 【返回值】字符串对象（文件夹路径） 代码示例 import tkinter.filedialogreturn_value = tkinter.filedialog.askdirectory()print(type(return_value), return_value)# &lt;class &#x27;str&#x27;&gt; C:/Users/小康/Desktop 效果展示 askdirectory"},{"title":"Vscode配置","path":"/files/python/Vscode配置.html","content":"主题Ayu 很多颜色 Dainty Github Theme 黑白两套 Slack Theme Winter is Coming Theme 深蓝 解决终端中文乱码powershell 解决办法在设置settings.json添加以下代码 默认每次启动终端 发出指令让终端以Chcp65001编码运行 &quot;terminal.integrated.profiles.windows&quot;: &#123; &quot;PowerShell&quot;: &#123; &quot;source&quot;: &quot;PowerShell&quot;, &quot;overrideName&quot;: true, &quot;args&quot;: [&quot;-NoExit&quot;, &quot;/c&quot;, &quot;chcp 65001&quot;], &quot;icon&quot;: &quot;terminal-powershell&quot;, &quot;env&quot;: &#123; &quot;TEST_VAR&quot;: &quot;value&quot; &#125; &#125; &#125;, &quot;terminal.integrated.defaultProfile.windows&quot;: &quot;PowerShell&quot;, cmd 解决办法 在运行中输入”regedit”,找到HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Command Processor 右键-新建，选择“字符串值”，“名称”列填写“autorun”, 数值数据填写“chcp 65001”，然后确定即可。 Vscode配置cpp环境1. 下载并安装cpp编译器minGW打开minGW官网，进入 SourceForge 中的 MinGW-w64 下载页面。关于安装： *关于SEH&amp;SJLJ： seh 是新发明的，而 sjlj 则是古老的。seh 性能比较好，但不支持 32位。 sjlj 稳定性好，支持 32位。 *关于Dwarf&amp;Sjlj： 选择了 32位 后，则可以用 dwarf 和 sjlj 两种异常处理模型。同样的，dwarf 的性能要优于 sjlj ，可以它不支持 64位 。建议选择 dwarf。 2.设置环境变量 右键此电脑-属性-高级系统设置-高级-环境变量-用户变量-双击Path-新建 插入刚才minGW下载到本地的文件目录：C:\\\\Program Files (x86)\\mingw-w64\\i686-8.1.0-posix-dwarf-rt_v6-rev0\\mingw32\\bin；设置完环境变量后需要重启。 验证环境变量是否设置成功 打开命令行窗口并输入 gcc -v 3.下载vscode 打开vscode官网 下载vscode 打开vscode并安装简体中文、c/c++插件 在左上角的资源管理器中打开一个文件夹用来存放cpp代码 新建一个“hello world.cpp”文件（注意文件扩展名也算作新建文件内容的一部分。） 按下F5调试 选择c++（GDB/LLDB）和g++.exe，然后vscode编译器就会帮你配置好运行cpp所需要的.vscode文件夹，这意味着在这个文件夹下编写的cpp文件有了一个格式的设置文件，你可以通过修改.json的值来修改这个文件夹下所有的cpp文件的各种参数。 重新运行我们刚才编写的hello world.cpp文件 底下的vscode自带的终端就会显示出结果。 4. *配置google format设置-Clang_Format &#123; BasedOnStyle: Google, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Attach, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4 &#125; 5. *CPP17设置-“code-runner.executorMap” &quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ -std=c++17 $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot; 设置-“cpp” 配置默认版本为C++17 Python安装安装，勾选添加到Path 检查是否安装成功： 1、打开cmd，输入python，点击回车。 2、输入import this，欣赏下python之禅。 解决完之后，就可以输入： 1、在cmd输入 pip list 检查是否已存在需要的包 2、输入 pip install flake8 下载安装flake8 3、输入 pip install yapf 下载安装yapf Pip 更换镜像源CMD方法升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置： python -m pip install --upgrade pippip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 如果您到 pip 默认源的网络连接较差，临时使用本镜像站来升级 pip： python -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade pip 备用方法（新建ini）[global]trusted-host=mirrors.aliyun.comindex-url=http://mirrors.aliyun.com/pypi/simple/ Anaconda（卸载原来的python和所有相关path） https://blog.csdn.net/weixin_43412762/article/details/129599741 Nodejs 下载 安装nodejs 目录下新建node_global和node_cachecmdnpm config prefix &quot;D:\\Engineer odejs ode_global&quot;npm config cache &quot;D:\\Engineer odejs ode_cache&quot; 配置环境变量NODE_PATH = &quot;D:\\Engineer odejs ode_modules&quot; 测试cmd(a)npm install express -g Git 安装 配置SSH ssh-keygen -t rsa -C &quot;你的邮箱地址&quot; 回车回车生成.SSH和.PUB文件 复制文件内容到Github ssh -T git@github.com 检查和授权 Golang 下载 安装golang 配置环境变量： GOROOT = D:\\Engineering\\Go ;安装根目录GOPROXY = https://goproxy.cn,direct ;代理GOPATH = D:\\Engineering\\Go\\gopath ;工作目录（存放包） vscode中安装go插件 Golang包配置配置代理 git config --global http.proxy 127.0.0.1:1080git config --global https.proxy 127.0.0.1:1080 常用bat set /p input=input resp (e.g:github.com/siddontang/go-log)git clone https://www.%input% %GOPATH%/src/%input% x包全集 git clone https://github.com/golang/text.git %GOPATH%/src/golang.org/xcd %GOPATH%/src/golang.org/xgit clone https://github.com/golang/tools.gitgit clone https://github.com/golang/net.gitgit clone https://github.com/golang/sys.gitgit clone https://github.com/golang/term.gitgit clone https://github.com/golang/crypto.gitgit clone https://github.com/golang/oauth2.gitgit clone https://github.com/golang/blog.gitgit clone https://github.com/golang/text.gitgit clone https://github.com/golang/review.gitgit clone https://github.com/golang/time.gitgit clone https://github.com/golang/vgo.gitgit clone https://github.com/golang/image.gitgit clone https://github.com/golang/sync.git 用户代码片段配置VScode代码配置段转换器 C++ &quot;head&quot;: &#123;\t&quot;prefix&quot;: &quot;head&quot;,\t&quot;body&quot;: [ &quot;/*&quot;, &quot;Title: $1&quot;, &quot;Author: AleryXiao&quot;, &quot;Date: $&#123;CURRENT_YEAR&#125;.$&#123;CURRENT_MONTH&#125;.$&#123;CURRENT_DATE&#125;&quot;, &quot;Theme: $2&quot;, &quot;Content: &quot;, &quot;$3&quot;, &quot;*/&quot;\t],\t&quot;description&quot;: &quot;head&quot;&#125; Python &quot;head&quot;: &#123;\t&quot;prefix&quot;: &quot;head&quot;,\t&quot;body&quot;: [ &quot;&#x27;&#x27;&#x27;&quot;, &quot;Title: $1&quot;, &quot;Author: AleryXiao&quot;, &quot;Date: $&#123;CURRENT_YEAR&#125;.$&#123;CURRENT_MONTH&#125;.$&#123;CURRENT_DATE&#125;&quot;, &quot;Theme: $2&quot;, &quot;Content: &quot;, &quot;$3&quot;, &quot;&#x27;&#x27;&#x27;&quot;\t],\t&quot;description&quot;: &quot;head&quot;&#125; 变量使用${name:default}，您可以插入变量的值。如果未设置变量，则插入其默认值或空字符串。当变量未知（即未定义其名称）时，将插入变量的名称并将其转换为占位 常用变量 TM_CURRENT_LINE当前行的内容 TM_FILENAME当前文档的文件名 TM_FILENAME_BASE当前文档的文件名，不带扩展名 CLIPBOARD剪贴板的内容 ==日期和时间==： CURRENT_YEAR本年度 CURRENT_YEAR_SHORT本年度的最后两位数 CURRENT_MONTH两位数的月份（例如“02”） CURRENT_MONTH_NAME_SHORT月份的简称（例如“Jul”） CURRENT_DATE两位数的月份日期（例如“08”） CURRENT_SECONDS_UNIX自 Unix 纪元以来的秒数"},{"title":"Xpath","path":"/files/python/Xpath.html","content":"Reference: Xpath的使用(详细教学) 1. Xpath的概览XPath的选择功能十分强大，他提供了非常简洁明了的路径选择表达式。另外，它还提供了100多个内建函数，用于字符串，数值，时间的匹配以及节点，序列的处理。几乎所有我们想要定位的节点。都可以用XPath选择。 2. XPath常用规则 表达式 描述 nodename 选取此节点的所有子节点 / 从当前节点选取直接子节点 // 从当前节点选取子孙节点 . 选取当前节点 . . 选取当前节点的父节点 @ 选取属性 这里列出了XPath的一个常用匹配规则，如下：//title[@lang=&#x27;eng&#x27;]他代表选择所有名称为title，同时属性lang的值为eng的节点。后面会通过python的lxml库，利用XPath对HTML进行解析 3. 准备工作使用lxml库之前，首先要确保其已经安装好。可以用使用pip3来安装pip3 install lxml 4. 实例引用下面通过实例感受一下使用Xpath对网页进行解析的过程，相关代码如下： from lxml import etreetext = &#x27;&#x27;&#x27;&lt;div&gt; &lt;ul&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt; &lt;/ul&gt; &lt;/div&gt;&#x27;&#x27;&#x27;html = etree.HTML(text)result = etree.tostring(html)print(result.decode(&#x27;utf-8&#x27;)) 这里首先导入lxml库的etree模块，然后声明了一段HTML文本，接着调用HTML类进行初始化，这样就构造了一个XPath解析对象，此处需要注意一点，HTML文本中的最后一个li节点是没有闭合的，而etree模块可以自动修正HTML文本。之后调用tostring方法即可输出修正后的HTML代码，但是结果是bytes类。于是利用decode方法将其转换成str类型，结果如下： &lt;html&gt;&lt;body&gt;&lt;div&gt; &lt;ul&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 可以看到，经过处理之后li节点标签得以补全，并且自动添加了body、html节点。另外，也可以不声明，直接读取文本进行解析，示例如下： from lxml import etreehtml = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())result = etree.tostring(html)print(result.decode(&#x27;utf-8&#x27;)) 期中test.html的内容就是上面列子中的HTML代码，内容如下： &lt;div&gt; &lt;ul&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt; &lt;/ul&gt; &lt;/div&gt; 这次输出的结果略有不同，多了一个DOCTYPE声明，不过对解析无任何影响，结果如下： &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;&lt;html&gt;&lt;body&gt;&lt;div&gt;&amp;#13; &lt;ul&gt;&amp;#13; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;&amp;#13; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;&amp;#13; &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;&amp;#13; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;&amp;#13; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&amp;#13; &lt;/li&gt;&lt;/ul&gt;&amp;#13; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 5. 所有节点我们一般会用以//开头的XPath规则，来选取所有符合要求的节点。这里还是以第一个实例中的HTML文本为例，选取其中所有节点，实现代码如下： from lxml import etreehtml = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())result = html.xpath(&#x27;//*&#x27;)print(result) 运行结果如下： [&lt;Element html at 0x1a5aa580b48&gt;, &lt;Element body at 0x1a5aa580c48&gt;, &lt;Element div at 0x1a5aa580c88&gt;, &lt;Element ul at 0x1a5aa580cc8&gt;, &lt;Element li at 0x1a5aa580d08&gt;, &lt;Element a at 0x1a5aa580d88&gt;, &lt;Element li at 0x1a5aa580dc8&gt;, &lt;Element a at 0x1a5aa580e08&gt;, &lt;Element li at 0x1a5aa580e48&gt;, &lt;Element a at 0x1a5aa580d48&gt;, &lt;Element li at 0x1a5aa580e88&gt;, &lt;Element a at 0x1a5aa580ec8&gt;, &lt;Element li at 0x1a5aa580f08&gt;, &lt;Element a at 0x1a5aa580f48&gt;] 这里使用*代表匹配所有节点，也就是获取整个HTML文本中的所有节点。从运行结果可以看到返回形式是一个列表，其中每个元素是Element类型，类型后面跟这节点的名称，如html、body、div等所有节点都包含在列表中。当然，此处也可以匹配指定节点名称。列如想获取li节点，示例如下： from lxml import etreehtml = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())result = html.xpath(&#x27;//li&#x27;)print(result)print(result[0]) 这里选取所有li节点，可以使用//，然后直接加上节点名称，调用时使用xpath方法即可。运行结果如下： [&lt;Element li at 0x1c66d060c48&gt;, &lt;Element li at 0x1c66d060c88&gt;, &lt;Element li at 0x1c66d060cc8&gt;, &lt;Element li at 0x1c66d060d08&gt;, &lt;Element li at 0x1c66d060d48&gt;]&lt;Element li at 0x1c66d060c48&gt; 可以看到，提取结果也是一个列表，其中每个元素都是Element类型。要是想取出一个对象可以直接用中括号加索引获取，如[0]。 6. 子节点通过/或//即可查找元素的子节点或子孙节点。假如现在想选择li节点的所有直接子节点a，则可以这样实现： from lxml import etreehtml = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())result = html.xpath(&#x27;//li/a&#x27;)print(result) 这里通过追加/a的方式，选择了所有li节点的所有直接子节点a。其中//li用于选中所有li节点，/a用于选中li节点的所有直接子节点啊。运行结果如下： [&lt;Element a at 0x2592a090c48&gt;, &lt;Element a at 0x2592a090c88&gt;, &lt;Element a at 0x2592a090cc8&gt;, &lt;Element a at 0x2592a090d08&gt;, &lt;Element a at 0x2592a090d48&gt;] 上面的/用于选取节点的直接子节点，如果要获取节点的所有子孙节点，可以使用//。例如要获取ul节点下面的所有子孙节点a，可以这样实现： from lxml import etreehtml = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())result = html.xpath(&#x27;//ul//a&#x27;)print(result) 运行结果是相同的。但是如果这里用//ul/a，就无法获取结果了，因为/用于获取直接的子节点，而ul节点下没有直接的a子节点，只有li节点，所以无法获取任何匹配结果如下： from lxml import etreehtml = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())result = html.xpath(&#x27;//ul/a&#x27;)print(result) 运行结果如下： [] 因此这里要注意/和//的区别，前者用于获取直接子节点，后者用于获取子孙节点 7. 父节点如何查找父节点呢?示例如下：首先选中href属性为link4.html的a节点，然后获取其父节点，在获取父节点的class属性，相关代码如下： from lxml import etreehtml = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())result = html.xpath(&#x27;//a[@href=&quot;link4.html&quot;]/../@class&#x27;)print(result) 运行结果如下： [&#x27;item-1&#x27;] 可以通过观察这正是我们获取a标签属性为href为link4.html的父节点li节点的class属性我们也可以用parent::获取父节点,代码如下： from lxml import etreehtml = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())result = html.xpath(&#x27;//a[@href=&quot;link4.html&quot;]/parent::*/@class&#x27;)print(result) 结果相同都是[‘item-1’] 8. 属性匹配在选取节点的时候，还可以使用@符号实现属性过滤。例如，要选取class属性为item-0的li接地但，可以这样实现： from lxml import etreehtml = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())result = html.xpath(&#x27;//li[@class=&quot;item-0&quot;]&#x27;)print(result) 这里通过加入[@class=‘item-0’]，限制了节点的class属性为item-0.HTML文本中符合这个条件的li节点有两个，所以结果因该返回两个元素。结果如下： [&lt;Element li at 0x23e52010c48&gt;, &lt;Element li at 0x23e52010c88&gt;] 可见，匹配结果因该返回两个元素，后面在验证 9. 文本获取用Xpath中的text方法可以获取节点中的文本，接下来尝试获取前面li节点中的文本，相关代码如下： from lxml import etreehtml = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())result = html.xpath(&#x27;//li[@class=&quot;item-0&quot;]/text()&#x27;)print(result) 运行结果为： [&#x27;\\r &#x27;] 奇怪的是，我们没有获取任何文本，只获取了一个换行符，这是为什么呢？因为xpath中text方法的前面是/，而/的含义就是直接选取子节点，很明显li的直接子节点都是a节点，文本都是在a节点内部的，所以这里匹配到的结果就是被修正的li节点内部的换行符，因为自动修正的li节点的尾标签换行了。及选中的是这两个节点： &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&amp;#13; &lt;/li&gt; 其中一个节点因为自动修正，li节点的尾标签在添加的时候换行了，所以提取文本得到的唯一结果就是li节点的尾标签和a节点的尾标签之前的换行符。 因此，如果想获取li节点内部的文本，就有两种方法，一种是先选取a节点在获取文本，另一种是使用//。接下来我们看两种的区别。 from lxml import etreehtml = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())result = html.xpath(&#x27;//li[@class=&quot;item-0&quot;]/a/text()&#x27;)print(result) 运行结果如下： [&#x27;first item&#x27;, &#x27;fifth item&#x27;] 可以看到，这里返回两个值，内容都是class属性为item-0的li节点的文本，这也印证了前面属性匹配的结果是正确的。这种方式下，我们是逐层选取的，先选取li节点，然后利用/选取其直接子节点a，在选取a的文本，得到的两个结果恰好符合我们的预期。 再看一下啊使用//能够获取什么结果 from lxml import etreehtml = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())result = html.xpath(&#x27;//li[@class=&quot;item-0&quot;]//text()&#x27;)print(result) 运行结果如如下： [&#x27;first item&#x27;, &#x27;fifth item&#x27;, &#x27;\\r &#x27;] 不出所料，这里的返回结果是三个。可想而知这里选取的是所有子孙节点的文本，其中前两个是li的子节点a内部的文本，另外一个是最后一个li节点内部的文本，及换行符 如果需要选取子孙节点内部的所有文本，直接使用//text，这样可以获得全部信息，但是也会有一些换行符等特殊字符，如果获取特定子孙节点的所有文本，则先逐层选择在用text方法 10. 属性获取获取li节点下面的所有a节点的href from lxml import etreehtml = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())result = html.xpath(&#x27;//li/a/@href&#x27;)print(result) 这里通过@href获取节点的href属性，注意此处和属性匹配的方法不同，属性区别是用中括号加属性名和值来限定某个属性，如[@href=“link1.html”],此处的@href是指获取节点的某个属性，二者需要做好区分。运行结果如下： [&#x27;link1.html&#x27;, &#x27;link2.html&#x27;, &#x27;link3.html&#x27;, &#x27;link4.html&#x27;, &#x27;link5.html&#x27;] 可以看到，我们成功获取了所有li节点下a节点的href属性，并以列表形式返回了他们。 11. 属性多值匹配有时候，某些节点的属性可能有多个值，例如： from lxml import etreetext = &#x27;&#x27;&#x27;&lt;li class=&quot;li li-first&quot;&gt;&lt;a href=&quot;link.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;&#x27;&#x27;&#x27;html = etree.HTML(text)result = html.xpath(&#x27;//li[@class=&quot;li&quot;]/a/text()&#x27;)print(result) 这里HTML文本中li节点的class属性就有两个值：li和 li-first。此时如果还用之前的属性匹配获取节点，就无法获取到了运行结果如下： [] 这种情况需要用到contains方法(和jquery中的contains方法一致) from lxml import etreetext = &#x27;&#x27;&#x27;&lt;li class=&quot;li li-first&quot;&gt;&lt;a href=&quot;link.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;&#x27;&#x27;&#x27;html = etree.HTML(text)result = html.xpath(&#x27;//li[contains(@class,&quot;li&quot;)]/a/text()&#x27;)print(result) 上面使用了contains方法，给其第一个参数传入属性名称，第二个参数传入属性值，只要传入的属性包含传入的属性值，就可以完成匹配了。此时运行结果如下： [&#x27;first item&#x27;] contains方法在某个节点的某个属性有多个值时用到 12. 多属性匹配我们还可能遇到一种情况，就是更具多个属性确定一个节点，这是需要同事匹配多个属性。运算符and用于连接多个属性，实例如下： from lxml import etreetext = &#x27;&#x27;&#x27;&lt;li class=&quot;li li-first&quot; name=&quot;item&quot;&gt;&lt;a href=&quot;link.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;&#x27;&#x27;&#x27;html = etree.HTML(text)result = html.xpath(&#x27;//li[contains(@class, &quot;li&quot;) and @name=&quot;item&quot;]/a/text()&#x27;)print(result) 这里的li节点又增加了一个name属性，因此要确定li节点，需要同时考察class和name属性，一个条件是class属性里面包含了li字符串，另一个条件是name属性为item字符串，这二者同时得到满足，才是li节点。class和name属性需要用到and运算符相连。结果如下： [&#x27;first item&#x27;] 以下列举了其他运算符号 运算符 描述 实例 返回值 or 或 age=19 or age=20 如果age是19则返回True。如果age是21则返回false 两个条件满足一个即可 and 与 age&gt;19 and age&lt;20 如果age是20则返回True。如果age是18则返回false 两个条件同时满足即可 mod 计算除法的余数 5 mod 2 1 计算两个节点集 //book //cd 返回所有拥有book和cd元素的节点集 **加减乘除 + - * div(表示除法) 大于小于等比较运算符 不举例说明** 13. 按序选择在选择节点时，某些属性可能同时匹配了多个节点，但我们只想要其中一个，如第二个或者最后一个可以使用往中括号中传入索引的方法获取特定次序的节点如下： from lxml import etreetext = &#x27;&#x27;&#x27;&lt;div&gt; &lt;ul&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt; &lt;/ul&gt; &lt;/div&gt;&#x27;&#x27;&#x27;html = etree.HTML(text)result = html.xpath(&#x27;//li[1]/a/text()&#x27;)print(result)result = html.xpath(&#x27;//li[last()]/a/text()&#x27;)print(result)result = html.xpath(&#x27;//li[position()&lt;3]/a/text()&#x27;)print(result)result = html.xpath(&#x27;//li[last()-2]/a/text()&#x27;)print(result) 第一个print 往中括号中传入索引[1]，即可获取第一个数据，注意序号以1开头，而不是0第二个last()方法表示最后一个第三个position()❤️ 选取了位置小于3的li节点也就是第一个和第二个节点第四次last()-2则表示倒数第三个结果如下： [&#x27;first item&#x27;][&#x27;fifth item&#x27;][&#x27;first item&#x27;, &#x27;second item&#x27;][&#x27;third item&#x27;] 在这个实例中我们使用了last、position等方法。xpath提供了100多个方法，包括存取、数值、字符串、逻辑、节点、序列等处理功能 节点集函数 last() 返回当前上下文中的最后一个节点的位置号数。 position() 返回当前节点的位置的数字,位于第多少个。 count(node-set) 返回节点集node-set中的节点数。 id(mark) 根据在DTD中声明为ID类型的标识符选择元素,返回一个节点集。 name() 返回节点名称。 local-name() 返回不带名称空间的节点名称。 namespace-uri() 返回名称空间。字符串函数 string(object) 把节点集、数字、布尔值等转化成字串并返回。 format-number(num) 把数字转化成字串并返回。 concat(string1,string2...) 合并多个字串并返回。 starts-with(string1,string2) 如果字串string1开头带string2的所有字符则返回true,否则返回false。 contains(string1,string2) 如果字串string1包含string2的所有字符则返回true,否则返回false。 substring(string,number1,number2) 取string中从位置number1开始,number2长的子串,number2可省略。 substring-before(string1,string2) 取string1在string2第一次出现位置之前的子串。 substring-after(string,string) 取string1在string2第一次出现位置之后的子串。 string-length(string) 返回string的长度数字。 normalize-space(string) 清除string头尾的空白字符并且把连续的空白字符替换为一个再返回。 translate(string1,string2,string3) 假如string1中的字符在string2中有出现,那么替换为string3对应string2的同一位置的字符,假如string3这个位置取不到字符则删除string1的该字符。布尔函数 boolean(object) 非0和NaN的数字/非空节点/长度大于0的字串返回true,非基本类型的转换有时无法估计。 not(boolean) 对布尔值取反。 true() 返回true。 false() 返回false。 lang(string) 如果上下文节点的lang属性和string相同则返回true。数字函数 number(object) 使对象转化成数字,布尔值true为1,false为0;节点集首先转换成字符串,字符串转换成数字或者NaN。 sum(node-set) 对节点集node-set中的所有节点应用number()函数后返回和。 floor(number) 返回不大于数字number的最大整数。 ceiling(number) 返回不小于数字number的最小整数。 round(number) 返回和数字number的四舍五入结果。 14. 节点轴选择XPath提供了很多节点轴的选择方法，包括获取子元素，兄弟元素，父元素，祖先元素等，实例如下： from lxml import etreetext = &#x27;&#x27;&#x27;&lt;div&gt; &lt;ul&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;&lt;span&gt;first item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt; &lt;/ul&gt; &lt;/div&gt;&#x27;&#x27;&#x27;html = etree.HTML(text)result = html.xpath(&#x27;//li[1]/ancestor::*&#x27;)print(result)result = html.xpath(&#x27;//li[1]/ancestor::div&#x27;)print(result)result = html.xpath(&#x27;//li[1]/attribute::*&#x27;)print(result)result = html.xpath(&#x27;//li[1]/child::a[@href=&quot;link1.html&quot;]&#x27;)print(result)result = html.xpath(&#x27;//li[1]/descendant::span&#x27;)print(result)result = html.xpath(&#x27;//li[1]/following::*[2]&#x27;)print(result)result = html.xpath(&#x27;//li[1]/following-sibling::*&#x27;)print(result) 运行结果如下： [&lt;Element html at 0x2458d4d6bc8&gt;, &lt;Element body at 0x2458d4d6b48&gt;, &lt;Element div at 0x2458d4d6b08&gt;, &lt;Element ul at 0x2458d4d6c08&gt;][&lt;Element div at 0x2458d4d6b08&gt;][&#x27;item-0&#x27;][&lt;Element a at 0x2458d4d6c08&gt;][&lt;Element span at 0x2458d4d6b08&gt;][&lt;Element a at 0x2458d4d6c08&gt;][&lt;Element li at 0x2458d4d6b48&gt;, &lt;Element li at 0x2458d4d6c48&gt;, &lt;Element li at 0x2458d4d6c88&gt;, &lt;Element li at 0x2458d4d6cc8&gt;] 首先介绍关于xpath轴的方法 ancestor选取当前节点的所有先辈（父、祖父等）。ancestor-or-self选取当前节点的所有先辈（父、祖父等）以及当前节点本身。attribute选取当前节点的所有属性。child选取当前节点的所有子元素。descendant选取当前节点的所有后代元素（子、孙等）。descendant-or-self选取当前节点的所有后代元素（子、孙等）以及当前节点本身。following选取文档中当前节点的结束标签之后的所有节点。following-sibling选取当前节点之后的所有兄弟节点namespace选取当前节点的所有命名空间节点。parent选取当前节点的父节点。preceding选取文档中当前节点的开始标签之前的所有节点。preceding-sibling选取当前节点之前的所有同级节点。self选取当前节点。"},{"title":"f-string","path":"/files/python/f-string.html","content":"https://zhuanlan.zhihu.com/p/418092817 - 知乎专栏 1、f-string简介 python3.6引入了一种新的字符串格式化方式：f-tring格式化字符串。从%s格式化到format格式化再到f-string格式化，格式化的方式越来越直观，f-string的效率也较前两个高一些，使用起来也比前两个简单一些。 同时值得注意的是，f-string就是在format格式化的基础之上做了一些变动，核心使用思想和format一样，因此大家可以学习完%s和format格式化，再来学习f-string格式化。 2、f-string的常见使用方式2.1 基本使用*① f-string用大括{ }表示被替换字段，其中直接填入替换内容即可。 &gt;&gt;&gt; name = &quot;Huang Wei&quot;&gt;&gt;&gt; f&quot;Hello, my name is &#123;name&#125;&quot;&#x27;Hello, my name is Huang Wei&#x27;&gt;&gt;&gt; num = 2&gt;&gt;&gt; f&quot;I have &#123;num&#125; apples&quot;&#x27;I have 2 apples&#x27;&gt;&gt;&gt; price = 95.5&gt;&gt;&gt; f&quot;He has &#123;price&#125;$&quot;&#x27;He has 95.5$&#x27; 2.2 表达式求值与函数调用① f-string的大括号{ }可以填入表达式或调用函数，Python会求出其结果并填入返回的字符串内。 &gt;&gt;&gt; f&quot;They have &#123;2+5*2&#125; apples&quot;&#x27;They have 12 apples&#x27;&gt;&gt;&gt; name = &quot;Huang Wei&quot;&gt;&gt;&gt; f&quot;my name is &#123;name.lower()&#125;&quot;&#x27;my name is huang wei&#x27;&gt;&gt;&gt; import math&gt;&gt;&gt; f&quot;Π的值为&#123;math.pi&#125;&quot;&#x27;Π的值为3.141592653589793&#x27; ② f-string中使用lambda匿名函数：可以做复杂的数值计算 &gt;&gt;&gt; aa = 123.456&gt;&gt;&gt; f&quot;&#123;(lambda x:x*5-2)(aa):.2f&#125;&quot;&#x27;615.28&#x27;&gt;&gt;&gt; bb = 8&gt;&gt;&gt; cc = 2&gt;&gt;&gt; f&quot;&#123;(lambda x,y:x+y)(bb,cc)&#125;&quot;&#x27;10&#x27; 说明：注意语法格式的写法，第一个小括号表示的是lambda表达式，第二个小括号表示给lambda表达式传入参数。 2.3 f-string中引号使用存在的问题① f-string大括号内使用的引号不能和大括号外的引号定界符引号冲突，需根据情况灵活切换使用单引号、双引号、单三引号、双三引号。 &gt;&gt;&gt; f&#x27;I am &#123;&quot;Huang Wei&quot;&#125;&#x27;&#x27;I am Huang Wei&#x27;&gt;&gt;&gt; f&#x27;&#x27;&#x27;I am &#123;&#x27;Huang Wei&#x27;&#125;&#x27;&#x27;&#x27;&#x27;I am Huang Wei&#x27;&gt;&gt;&gt; f&quot;&quot;&quot;I am &#123;&#x27;Huang Wei&#x27;&#125;&quot;&quot;&quot;&#x27;I am Huang Wei&#x27;&gt;&gt;&gt; f&quot;&quot;&quot;I am &#123;&quot;Huang Wei&quot;&#125;&quot;&quot;&quot;&#x27;I am Huang Wei&#x27;&gt;&gt;&gt; f&#x27;I am &#123;&#x27;Huang Wei&#x27;&#125;&#x27; File &quot;&lt;stdin&gt;&quot;, line 1 f&#x27;I am &#123;&#x27;Huang Wei&#x27;&#125;&#x27; ^SyntaxError: invalid syntax 注意：只要大括号内外的引号不同，就没有问题。但是大括号中只能是但引号和 双引号 ，大括号外的引号定界符引号可以使用单引号、双引号、单三引号、双三引号。 ② 大括号外的引号还可以使用\\转义，但大括号内不能使用\\转义。 &gt;&gt;&gt; f&quot;he\\&#x27;ll go to &#123;&#x27;shang hai&#x27;&#125;&quot;&quot;he&#x27;ll go to shang hai&quot;&gt;&gt;&gt; f&quot;&quot;&quot;he introduces himself &#123;&quot;I\\&#x27;m Tom&quot;&#125;&quot;&quot;&quot; File &quot;&lt;stdin&gt;&quot;, line 1SyntaxError: f-string expression part cannot include a backslash&gt;&gt;&gt; f&quot;&quot;&quot;he introduces himself &#123;&quot;I&#x27;m Tom&quot;&#125;&quot;&quot;&quot;&quot;he introduces himself I&#x27;m Tom&quot; 2.4 f-string中大括号使用存在的问题① f-string大括号外如果需要显示大括号，则应输入连续两个大括号；大括号内需要引号，使用引号即可。 &gt;&gt;&gt; f&quot;5&#123;&#x27;&#123;apples&#125;&#x27;&#125;&quot;&#x27;5&#123;apples&#125;&#x27;&gt;&gt;&gt; f&quot;&#123;&#123;5&#125;&#125;&#123;&#x27;apples&#x27;&#125;&quot;&#x27;&#123;5&#125;apples&#x27; 2.5 f-string填充 ① 什么是填充？ 概念：当我们指定了字符串最终的长度的时候，如果现有的字符串没有那么长，那么我们就用某种字符（填充字符）来填满这个长度，这就是“填充”。 ② 演示代码如下：默认使用空格填充 &gt;&gt;&gt; name = &quot;Huang Wei&quot;&gt;&gt;&gt; f&quot;&#123;name:&gt;20&#125;&quot;&#x27; Huang Wei&#x27;&gt;&gt;&gt; f&quot;&#123;name:&lt;20&#125;&quot;&#x27;Huang Wei &#x27;&gt;&gt;&gt; f&quot;&#123;name:^20&#125;&quot;&#x27; Huang Wei &#x27; ③ 用指定字符进行填充 &gt;&gt;&gt; name = &quot;Huang Wei&quot;&gt;&gt;&gt; f&quot;&#123;name:_&gt;20&#125;&quot;&#x27;___________Huang Wei&#x27;&gt;&gt;&gt; f&quot;&#123;name:_&lt;20&#125;&quot;&#x27;Huang Wei___________&#x27;&gt;&gt;&gt; f&quot;&#123;name:_^20&#125;&quot;&#x27;_____Huang Wei______&#x27; 注意：填充分为左填充、右填充、居中填充。左填充表示在字符串左侧填充，右填充表示在字符串右侧填充，居中填充表示在字符串左右两侧对称填充。&gt;表示左填充，&lt;表示右填充，^表示居中填充。记忆方法：括号口朝左边，就表示左填充；括号口朝右边，就表示右填充。 2.6 f-string数字符号相关格式描述符：仅针对数值有效&gt;&gt;&gt; a = 12&gt;&gt;&gt; b = -25&gt;&gt;&gt; f&quot;&#123;a:+&#125;&quot;&#x27;+12&#x27;&gt;&gt;&gt; f&quot;&#123;b:+&#125;&quot;&#x27;-25&#x27;&gt;&gt;&gt; f&quot;&#123;a:-&#125;&quot;&#x27;12&#x27;&gt;&gt;&gt; f&quot;&#123;b:-&#125;&quot;&#x27;-25&#x27;&gt;&gt;&gt; f&quot;&#123;a: &#125;&quot;&#x27; 12&#x27;&gt;&gt;&gt; f&quot;&#123;b: &#125;&quot;&#x27;-25&#x27; 结论如下： ​ 2.7 f-string宽度与精度相关格式描述符：保留小数点位数 ① 语法格式如下 ​ ② 演示代码如下 &gt;&gt;&gt; a = 123.456# 只指定width&gt;&gt;&gt; f&quot;&#123;a:10&#125;&quot;&#x27; 123.456&#x27;# 只指定0width&gt;&gt;&gt; f&quot;&#123;a:010&#125;&quot;&#x27;000123.456&#x27;# 使用width.precision&gt;&gt;&gt; f&quot;&#123;a:8.1f&#125;&quot;&#x27; 123.5&#x27;&gt;&gt;&gt; f&quot;&#123;a:8.2f&#125;&quot;&#x27; 123.46&#x27;&gt;&gt;&gt; f&quot;&#123;a:.2f&#125;&quot;&#x27;123.46&#x27;# 在width后面，直接加f，表示补足小数点后的位数至默认精度6&gt;&gt;&gt; f&quot;&#123;a:2f&#125;&quot;&#x27;123.456000&#x27; 2.8 f-string截断与填充的结合使用 当需要格式化的数据类型是“字符串”的时候，才会发生截断。截断的含义，以及发生截断的条件，都可以可参考我文章开头提到的文章。 &gt;&gt;&gt; a = &quot;Hello&quot;# 当发生截断的时候，如果不指定填充符，默认使用空格填充&gt;&gt;&gt; f&quot;&#123;a:10.3&#125;&quot;&#x27;Hel &#x27;# 在发生截断的时候，使用指定的填充符&gt;&gt;&gt; f&quot;&#123;a:_&gt;10.3&#125;&quot;&#x27;_______Hel&#x27;&gt;&gt;&gt; f&quot;&#123;a:_&lt;10.3&#125;&quot;&#x27;Hel_______&#x27; 2.9 f-string针对date、datetime和time对象，进行年月日、时分秒等信息提取&gt;&gt;&gt; from datetime import *# today()返回本地时间的一个date对象&gt;&gt;&gt; a = date.today()&gt;&gt;&gt; adatetime.date(2020, 2, 1)&gt;&gt;&gt; f&quot;&#123;a:%Y-%m-%d&#125;&quot;&#x27;2020-02-01&#x27; 说明：针对date、datetime和time对象，进行年月日、时分秒等提取，我们直接可以使用datetime模块中的方法就可以解决。这里讲述这个知识点，只是为了说明f-string处理date、datetime和time对象的一种可行思路。关于datatime模块的讲解，可以参考我的连载文章：https://​261833/article/details/103895079​blog.csdn.net/weixin_41 3、综合案例：使用%、format、f-string打印九九乘法表 ① %s方式 for i in range(1,10): for j in range(1,i+1): print(&quot;%s*%s=%s&quot; % (j,i,j*i),end=&quot; &quot;) print(&quot; &quot;) 结果如下： ​ ② format方式 for i in range(1,10): for j in range(1,i+1): print(&quot;&#123;0&#125;*&#123;1&#125;=&#123;2&#125;&quot;.format(j,i,j*i),end=&quot; &quot;) print(&quot; &quot;) 结果如下： ​ ③ f-string方式 for i in range(1,10): for j in range(1,i+1): print(f&quot;&#123;j&#125;*&#123;i&#125;=&#123;j*i&#125;&quot;,end=&quot; &quot;) print(&quot; &quot;) 结果如下： ​"},{"title":"Index","path":"/files/python/index.html","content":"关于Python的学习笔记呀。（基本都不是原创~）"},{"title":"数据处理","path":"/files/python/数据处理.html","content":"2023年春季PRP项目中遇到的函数整理。 .mat文件读取/保存 Scipy.io 方法（处理一般的.mat文件）scio.loadmat(&quot;name.mat&quot;) data = np.array(matName[&#x27;data&#x27;], dtype=float) scio.savemat(&quot;data.mat&quot;,&#123;&quot;matName&quot;:data&#125;) h5py方法 （处理 save -v7.3 形式保存的.mat文件） data = h5py.File(&quot;DO_1990.mat&quot;, &quot;r&quot;)diss_oxygen = data[&#x27;do1&#x27;]diss_oxygen = torch.tensor(diss_oxygen) numpy操作 y = np.full_like(x, -1) 创建一个与x大小相同的空数组并初始化 array_np.T[0] array_np[,:0] 获取首列 array_np[0] 获取首行 一维数组特征np.min(array_np) np.max(array_np) np.average(array_np)np.cumsum(array_np) 累加 (a[i] -&gt; s[i]) array_np.astype(int) 强制类型转换 array_np.shape 获取形状 torch操作 indices = torch.where(array = key) 返回符合条件的索引元组 unique_list = torch.unique(torch.tensor(data)) 一维张量去重"},{"title":"腾讯云OCR","path":"/files/python/腾讯云OCR.html","content":"http://www.qb5200.com/article/385513.html 百度OCR体验地址： https://ai.baidu.com/tech/imagerecognition/general 腾讯OCR体验地址： https://cloud.tencent.com/act/event/ocrdemo 腾讯云目前额度是： 每个接口 1,000次/月免费，有6个文字识别的接口，一共是6,000次/月 百度接口调用之前写过文章 python实现百度OCR图片识别过程解析 使用步骤 1、注册账号： https://cloud.tencent.com/ 2、开通服务：https://console.cloud.tencent.com/ocr/general 3、申请访问秘钥：https://console.cloud.tencent.com/cam/capi 4、通过 API 或 SDK 或命令行来使用服务 具体参考《操作指南》：https://cloud.tencent.com/document/product/866/17622 接口使用1、安装SDK https://github.com/TencentCloud/tencentcloud-sdk-python pip3 install tencentcloud-sdk-python 2、代码实例# -*- coding: utf-8 -*-import jsonfrom tencentcloud.common import credentialfrom tencentcloud.common.profile.client_profile import ClientProfilefrom tencentcloud.common.profile.http_profile import HttpProfilefrom tencentcloud.ocr.v20181119 import ocr_clientfrom tencentcloud.ocr.v20181119.models import ( GeneralAccurateOCRRequest, EnglishOCRRequest, GeneralBasicOCRRequest, GeneralEfficientOCRRequest, GeneralFastOCRRequest, GeneralHandwritingOCRRequest)class TencentOcr(object): &quot;&quot;&quot; 计费说明：1,000次/月免费 https://cloud.tencent.com/document/product/866/17619 &quot;&quot;&quot; SECRET_ID = &quot;你的秘钥 SECRET_ID&quot; SECRET_KEY = &quot;你的秘钥 SECRET_KEY&quot;\t# 地域列表\t# https://cloud.tencent.com/document/api/866/33518#.E5.9C.B0.E5.9F.9F.E5.88.97.E8.A1.A8 Region = &quot;ap-beijing&quot; endpoint = &quot;ocr.tencentcloudapi.com&quot; # 通用文字识别相关接口 # https://cloud.tencent.com/document/api/866/37173 mapping = &#123; # 通用印刷体识别（高精度版） ok &quot;GeneralAccurateOCR&quot;: GeneralAccurateOCRRequest, # 英文识别 ok &quot;EnglishOCR&quot;: EnglishOCRRequest, # 通用印刷体识别 一般 &quot;GeneralBasicOCR&quot;: GeneralBasicOCRRequest, # 通用印刷体识别（精简版）（免费公测版）no &quot;GeneralEfficientOCR&quot;: GeneralEfficientOCRRequest, # 通用印刷体识别（高速版）一般 &quot;GeneralFastOCR&quot;: GeneralFastOCRRequest, # 通用手写体识别 ok &quot;GeneralHandwritingOCR&quot;: GeneralHandwritingOCRRequest, &#125; def __init__(self): cred = credential.Credential(self.SECRET_ID, self.SECRET_KEY) httpProfile = HttpProfile() httpProfile.endpoint = self.endpoint clientProfile = ClientProfile() clientProfile.httpProfile = httpProfile self.client = ocr_client.OcrClient(cred, self.Region, clientProfile) def get_image_text(self, image_url, ocr=&quot;GeneralAccurateOCR&quot;): req = self.mapping[ocr]() req.ImageUrl = image_url resp = getattr(self.client, ocr)(req) return json.loads(resp.to_json_string())[&#x27;TextDetections&#x27;][0][&#x27;DetectedText&#x27;]def main(): tencentOcr = TencentOcr() url = &quot;https://ocr-demo-1254418846.cos.ap-guangzhou.myqcloud.com/general/GeneralBasicOCR/GeneralBasicOCR3.jpg&quot; print(tencentOcr.get_image_text(url, ocr=&quot;GeneralHandwritingOCR&quot;))if __name__ == &#x27;__main__&#x27;: main() 相关文章 Pytorch SSD模型分析 基于Pytorch SSD模型分析 python标签云 基于python3生成标签云代码解析"},{"title":"软件测试-SE3336","path":"/files/courseNotes/软件测试.html","content":"SE 交叉选修 Lec1课程要求 签到 + 点名 The grade of the course will be determined as follows: Projects 1~4：40% Usual test：10% Final exam: 50% 开卷 The students (110) will collaborate in groups (no more than 4 students) Project 1: week 3~6 Black-box test-case generation take an application with requirement document create black-box test cases execute test report bugs in a bug tracking tool. ==Project 2==: week 7~10 White-box test-case generation and coverage use tools evaluate coverage create additional white-box test cases to satisfy some coverage criteria. ==Project 3==: week 11~14 Select a software GUI with at least 2 levels Use selenium，to complete GUI test. Project 4: week 15~17 select a software of web server, use LoadRunner, to complete performance test. What is Software Testing? Testing = process of finding input values to check against a software (focus of this course) Debugging = process of finding a fault given a failure Testing is fundamentally about choosing finite sets of values from the input domain of the software being tested Given the test inputs, compare the actual results with the expected results Lec2 Math Prerequisites of Software Testing"},{"title":"软件测试-SE3336","path":"/files/courseNotes/数据库原理.html","content":"SE 交叉选修 Lec1课程要求 作业5-6次，不计分 大作业1个（4-5个部分），40% 期末综合练习，60% Describing Data Data Model a collection of concepts for describing data. Schema a description of a particular collection of data, using a given data model. Relational model of data the most widely used model today Main concept: relation, basically a table with rows and columns. Every relation has a schema, which describes the columns, or fields. Concurrency Control key to good DBMS performance -&gt; ensures such problems don’t arise. Users/programmers can pretend they are using a single-user system. (called “Isolation”) Database Management Systems (DBMS) DBMS used to maintain, query large datasets. can manipulate data and exploit semantics Other benefits include recovery from system crashes, concurrent access, quick application development, data integrity and security."},{"title":"计算机组成-汇编语言-CS2307","path":"/files/courseNotes/2022(2)/汇编语言(8086).html","content":"帮助快速上手汇编语言编程，虽然只限于编程配套Bilibili视频：上篇；下篇 VScode配置调试环境 安装插件TASM/MASM 右键扩展设置，选择Assembler：MASM 右键调试即可开始调试了！ Debug.exe R命令：查看、改变CPU寄存器的内容D命令：查看内存中的内容T命令：执行一条机器指令G命令：从停顿的地方运行到底 第一段代码：Hello WorldDSEG SEGMENT MESS DB &#x27;Hello, World!&#x27;,0DH,0AH,24HDSEG ENDSSSEG SEGMENT PARA STACK DW 256 DUP(?)SSEG ENDSCSEG SEGMENT ASSUME CS:CSEG, DS:DSEG BEGIN:MOV AX,DSEG MOV DS,AX MOV DX,OFFSET MESS MOV AH,9 INT 21H MOV AH,4CH INT 21HCSEG ENDSEND BEGIN 基础指令用以下指令可以写一个基础的程序： 段定义+Assume XXX SEGMENT(XXX:DATA/STACK/CODE)XXX ENDS ASSUME CS:CSEG, DS:DSEG, SS:SSEGMOV AX,DSEGMOV DS,AXMOV AX,SSEGMOV SS,AX 数据定义 (ORG 1000)(NAME) DB ?/...(NAME) DB N DUP(?/...)db:12H/dw:1234H MOV MOV AX,YMOV Y,AXMOV AX,BX +- ADD AX,X;AX+=XSUB AX,X;INC AX;AX++DEC AX;AX--NEG AX ;取负 程序的终止 MOV AH,4CHINT 21H 稍后会讲的进阶指令： Label和JUMP：跳转 分支和循环 堆栈的使用 &lt;函数&gt;：PROC和MACRO INT 21H指令：输入/输出 寄存器的使用在汇编语言中，我们不能对内存中的数据进行直接操作，如果要操作，需要把数据先MOV到寄存器中再进行处理。为了写代码的过程更顺滑，最好先简单了解一下这些寄存器的使用，当然，你也可以只了解通用寄存器的使用，别的等用到了再去查询。我会尽可能简单地表述。 8086 CPU 中有14个16位寄存器 。16位的存储可以用16进制表示，BeLike：123AH（H表示16进制)在查看内存情况的时候，由于数据从高位到低位存储，BeLike：3A 12 通用寄存器：AX，BX，CX，DXDSEG ...X DB 12HY DB ?....CSEG......MOV AH,XMOV Y,AH ;Y--12H 可以拆分为两个寄存器使用（AH和AL），不过各自有各自的独特作用，用到再提，这和它们的名字是关联的 说到底为什么&lt;通用&gt;寄存器会有&lt;独特的作用&gt;？这是因为==一些内置的指令依靠固定的寄存器传递参数==，所以这些寄存器也有了独特的作用 一般来说随便用就可以，反正里面的东西不久存，只是用来做==中转== AX：Accumlator 累加器特殊功能和MUL/DIV有关，后面再说 BX：Base 基地址寄存器可以存储地址并访问说到地址，就得提一下汇编语言里地址的表示方法在汇编语言里，内存中的地址BeLike：204B:1001 （以16进制表示）204B是段地址，1001是偏移地址，各需要一个Word进行存储有两个指令对应的获取内存单元的这两种地址 SEG可以获取段地址（这个段就是指我们程序对应的段Segment），OFFSET可以获取偏移地址 使用这两个词只需要在MOV时加在变量前即可，比如MOV BX offset X在“通过地址找内容”这件事方面，一般用BX存储偏移地址比如：X DW 1234HY DW ?...MOV BX, OFFSET X;BX中存储了X的偏移地址MOV Y, [BX];BX存储的偏移地址对应的内容被存放到y 一般来说，[BX]就是指 DS:[BX]，默认段地址为数据段，当然你也可以指定为CS和SS CX：Count 计数器和循环指令LOOP有关 LOOP指令类似于C语言中的For循环，loop NAME近似于for(cx;;cx--)关于LOOP的用法，具体到程序结构再说好了~。 DX：Data 数据寄存器特殊功能和MUL/DIV有关，后面再说也有与输入输出的暂存有关的功能（9.10号指令） 指针变址寄存器：SP，BP，SI，DI都倾向于用来存地址 SP：Stack Pointer和堆栈段的使用有关，定义堆栈段要记得手动把SP放在栈顶 BP：Base Pointer和BX有类似的用法，只是一般更倾向于用在堆栈的数据里，[BP]默认为SS:[BP] SI：Source IndexDI：Destination Index和BX有类似的用法，[SI]默认为DS:[SI]如果要转移数据，倾向于用SI存原地址，DI存新地址 段寄存器：CS，DS，SS，ES，IP段的存在方便我们以==段地址+偏移地址==的方式定位内存单元刚刚在例子中看到，一般的程序我们定义三个段，Data、Stack和Code，它们的作用和名字是一致的 这些寄存器都和程序段还有程序的运行有关。在程序启动的时候，操作系统会把IP（Instruction Pointer）指向程序的第一句开始运行，之后IP会一直指向每次要运行的下一条指令（显然我们可以用IP玩一些花活，但是对于简单的程序，我们没有必要操作IP） 在代码段的开始，我们就用Assume语句声明CS、DS、SS的地址和CS不同，DS和SS寄存器的值需要我们手动指定，而与SS寄存器绑定的SP指针也需要我们手动设置（SS:SP指向的就是栈顶元素） ES是Extra Segment，程序有附加段落的时候才用，用法和DS SS差不多 标志寄存器 FLAG只是写代码的话不用管它16位分开使用，有各自不同的意思，结果会以下面的形式呈现在-R中 阶段练习有以上的知识已经能写很多代码。 练习a: x+y 在数据段（data segment）中定义3个word，其中x=1234H，y=2345H, z=? 将x+y的结果保存在z中 进阶指令这里开始会有一点复杂，建议一边写一边看 1. Label和Jump：跳转一段代码可以拥有label，Jump NAME 即可跳转至label位置比如MAIN：MOV X,AXJUMP DONEMOV AX,Y...DONE:\tMOV AH, 4CH\tINT 21在这段程序中，MOV AX,Y就会直接被跳过 2. 分支和循环分支 CMP-JGE/… BeLike:(求abs(AX)保存在AX中) MAIN:...CMP AX,0JGE DONE; Jump if Greater or EqualNEG AXDONE:...END MAIN 练习b: 求最大值 在数据段（data segment）中定义4个word，其中x=1234H，y=2345H, z=-1234H，w=? 求max(x,y,z)储存于w 循环 LOOP一种简单的循环，类似于for(cx;;cx--)。（事实上，你可以用JUMP和分支结构来实现循环） LOOP NM过程中： 0. CMP CX,0 1. 如果CX&gt;0，继续执行以下语句，否则跳出 2. DEC CX(CX&gt;0) 3. JUMP NM MOV CX,6NM: ...LOOP NM;这样写一共执行CX次（声明NM时执行1次，LOOP中执行CX-1次） 练习c: 数组初始化 在数据段（data segment）中分配100字节，并为每个字节依次赋值0-99。 3. 堆栈的使用初始化两个好用的方法 比较直观的（堆栈段中做定义） 在堆栈段划分位置，保存栈顶位置 在程序段开始的时候把堆栈段的位置告诉堆栈寄存器SS，把栈顶的位置告诉指针寄存器SP SSEG SEGMENT STACK DW 128 dup(?) TOP DW LENGTH STACK ;划定范围SSEG ENDSCSEG SEGMENT ASSUME CS:CSEG,DS:DSEG,SS:SSEG MAIN: MOV AX,DSEG MOV DS,AX MOV AX,SSEG MOV SS,AX MOV AX,TOP MOV SP,AX ;栈顶地址载入 稍微没那么直观的（程序段中划空间）直接给SP赋值 SSEG SEGMENTSSEG ENDS;ss:0000-ss:1000CSEG SEGMENT ASSUME CS:CSEG, DS:DSEG,SS:SSEG BEGIN:MOV AX,DSEG MOV DS,AX MOV AX,SSEG MOV SS,AX MOV SP,1000H ;手动规定了1000H的空置空间(OFFSET 0H-1000H) PUSH和POP注意：==只能操作寄存器==，不能直接操作内存单元PUSH AX：将AX的值入栈（如果AX两个字节，就会入栈两个字节，SP也相应-2）POP AX：出栈，内容保存在AX（如果AX两个字节，就会入栈两个字节，SP也相应+2） 用SP和BP操作堆栈在主程序只是暂存数据用的话，一般==不用==操作指针但是，由于PROC需要使用到堆栈段，所以这是操作指针就是必要的，接下来在PROC中解释 4. &lt;函数&gt;：PROC和MACROPROC&amp;CALL（子程序结构）定义 PROC-RET-ENDP(Near 属性是默认值) MAIN:CALL NMNM PROC...RETNM ENDP...END MAIN 完整的表达式：调用：CALL FAR/NEAR PTR NM定义：NM PROC FAR/NEAR 子程序属性和调用段内调用只需要Main（主Label调用）的话空置即可（默认Near） A:...\tCALL B;调用B PROC B:...;默认为near属性子程序\tRET\tB ENDP...END A 段间调用PROC A:CALL FAR PTR BRETENDPPROC B FAR:...;写明属性RET ENDP 小心堆栈！PROC的本质是：入栈程序出口指针，RET时从回到出口指针的位置所以： 第一个出栈元素会是一个偏移地址 如果最后SP的指针位置不对，就无法正确RET 简单的方法：==用寄存器BP保护SP==，使用BP进行数据的读取 例子a(1): x+y子程序化 … 在堆栈段push任意两个长度为1word的数据 使用子程序，将这两个数据的和存储于AX… SUM PROC ;取两个栈顶元素求和储存到AX中 MOV BP,SP MOV AX,[BP+2] ADD AX,[BP+4] RETSUM ENDP 练习b(1) 求最大值 子程序化 在数据段（data segment）中定义4个word，其中x=1234H，y=2345H, z=-1234H，w=? 在堆栈段push x,y,z 求max(x,y,z)储存于w *Macro（宏定义）PROC的使用有调用开销（程序的中断 跳转 继续），而MACRO没有MACRO相当于写代码的人把重复写代码的过程交给了汇编器，相比子程序来说，是通过多占程序的内存来提高运行速度（对机器来说，每调用一次Macro，就是把这段指令重复了一次） NM MACRO R1,R2...(参数)...END MNM MACRO AX,BX...(寄存器取值) 5. INT 21H指令：输入/输出其实查书就可以了 到这里汇编语言编程的&lt;大局&gt;已经描述完全 关于一些语句的细节可以通过搜索引擎和汇编相关的任何书籍进行确认~ 键盘输入1号指令：单个字符输入MOV AH,1INT 21H (内容会保存在AL) 10号指令：从键盘输入字符串内存里需要划分三个部分： 1.一个字节存放最大长度（你写，溢出会被裁掉） 2.一个字节存放实际长度（指令运行完CPU会写） 3.一些字节用来存字符串 DATA SEGMENT MAXLENGTH DB 100 ;一个字节，用它存最大的长度 ACTUALLENGTH DB ? ;一个字节，用它存实际的长度，在指令执行后会被填写 STRING DB 100 DUP(?) ;用来存字符串DATA ENDSSTACK SEGMENTSTACK ENDSCODE SEGMENT ASSUME DS:DATA,SS:STACK,CS:CODE MAIN: MOV AX,DATA MOV DS,AX MOV DX,OFFSET MAXLENGTH ;把需要用到的内存块（三个部分）的地址存入DX MOV AH,10 INT 21H MOV AH,4CH INT 21HCODE ENDSEND MAIN 显示器输出2号调用：单个字符输出MOV DL,&#x27;A&#x27;MOV AH,2INT 21H 9号调用：字符串输出你的字符串必须要以’$‘结尾！不然输出不会结束！（类似于’\\0’，’$‘是一种字符串的终止符）程序会将DS:DX地址开始输出字符到’$‘结尾 MOV DX,OFFSET STRINGMOV AH,9INT 21H 综合练习练习d. 大小写转换+输入输出 （分支/循环/子程序+输入输出）用户输入一个单词，程序将所有大写转换为小写并输出到显示器(注：’a’=’A’+20H)"},{"title":"现代操作系统CS2310 （上）进程管理","path":"/files/courseNotes/2022(2)/现代操作系统1.html","content":"操作系统基础 关于抽象abstaction （计算机组成的重要概念） 层次化抽象 将系统划分成多个层次，每个层次都对下层屏蔽了具体实现细节，只向上层提供了一组简单的接口，从而简化了系统的设计和维护。 对于计算机系统结构，可以抽象为硬件层、操作系统层、系统程序层、应用程序层、用户层。每个层次都对下层屏蔽了具体实现细节，只提供了一组简单的接口。 虚拟机 (Vitural machines) ==virtualization layer== vitural cpu &amp; memory &amp; devices 什么是计算机操作系统 (Operating system / OS) ？ 一种介于计算机用户与计算机应用间的“程序” 一个系统资源的分配者、其它程序的控制者 提供服务 GUI program execution IO operations File-system manipulation communications error detection resource allocation accouting protection &amp; security 系统调用 (System Call) OS提供的可编程接口 比如 fork() exit() wait() (unix) 等 比起使用系统调用，OS也向各类服务提供应用程序接口 ( Application program interface / Api) -&gt; 可以视为一种对系统调用的封装和抽象 简单，易移植 eg. Win32 API, POSIX API(UNIX, Linux, Mac OS), Java API(JVM) Outline 进程管理 进程/线程/同步/死锁 内存管理 内存/虚拟内存 存储管理 文件系统/大容量存储结构/IO系统 分布式系统结构 进/线程调度并发 &amp; 并行 并发 Concurrency 时分复用：多个任务在同一时段内共享资源，交替运行 并行 Parallelism (multi-core system) 多个任务在（通过多个处理单元）同一时刻同时执行，互相独立 进程 &amp; 线程 进程 process 线程 threads 独立存在 作为进程子集存在 携带更多状态信息 共享内存.系统资源 独立地址空间 共享地址空间 仅通过IPC通信交互 更多方式 上下文切换比较慢 同进程内切换速度很快 线程是进程内的执行单元，不能独立于进程存在，而只能在进程中产生。 每个线程都共享了进程的地址空间、文件描述符表和其他系统资源。 可以认为正因为线程之间共享了部分资源，如代码段、数据段和文件描述符表等，因此在线程之间进行切换时，不需要像进程切换那样复制和恢复整个地址空间，这使得线程切换速度更快。 同时，由于线程之间共享了相同的地址空间，因此线程之间的通信更加容易和高效。线程可以直接访问同一进程内的共享内存，无需通过进程间通信（IPC）的方式进行数据传递，这减少了通信的开销和复杂性。 用户线程 (user threads) &amp; 核线程 (kernel threads) Many-to-one多个用户线程对核隐藏，映射到一个内核级线程上，由内核级线程来执行单个用户线程出现问题会导致同组线程都出问题；不能并行运行 One-to-one高并行支持创建kernel thread有开销Linux, windows NT/XP/2000, Solaris 9+ Many-to-many操作系统重构一定数量核线程Windows NT with the ThreadFiber package Two-level在Many-to-many的基础上运行用户线程与核线程1对1绑定 进程 process 进程 process ( = job 作业) program becomes process when the exe file is loaded into memory 开始运行的程序被载入内存，成为进程（此处的“内存”、之后的“组分”与虚拟内存有关） 1 program can be several processes 一个程序可以产生多个进程 一个进程的组成部分 conposition: 栈 stack … 堆 heap memroy dynamically allocated during run time 数据 data 文本 text programme code PCB (Process control block) state num counter registers mem limits list of open files …—&gt; 包含进程的状态;控制;上下文切换;通信和同步;优先级管理信息 进程的状态 process state 一个新的进程的一生： 创建 (new) 就绪 (ready) 进程就绪，等待处理器分配资源 比如CPU正在忙着处理别的进程，可能新的进程就要等待 运行 (run) 执行指令 等待 (wait) 进程未就绪，等待事件的发生或完成 比如等待键盘输入字符 终止 (terminated) CPU的进程切换过程 保存当前进程的上下文(-&gt;PCB0) 切换到新进程的上下文(&lt;-PCB1) …更新控制信息，开始执行新进程 结束执行新进程 保存新进程的上下文(-&gt;PCB1) 切换到原进程的上下文(&lt;-PCB0) … CPU调度 cpu scheduling抢占 preemptive 和 非抢占 nonpreemptive 一个处于Run状态的进程是否可根据调度规则在运行过程中被其它进程中断？ 能 -&gt; 抢占式：允许中断 不能 -&gt; 非抢占式：除非进程结束或者进入等待状态，即释放CPU资源，不允许另一个进程获取其CPU资源 什么是CPU调度在进程的状态发生以下变化时，CPU可能作“调度”决策 run -&gt; wait run -&gt; ready wait -&gt; ready (I/O完成等event发生，等待资源分配) terminates 在1.4时做决策 -&gt; 非抢占 (处理进程的等待和结束)在2.3时做决策 -&gt; 抢占 (处理新的ready进程) 调度器 Dispatcher 控制CPU 切换上下文 切换进程 切换用户/管理员权限 用户程序重启 调度延迟 Dispatch latency time it takes for the dispatcher to stop one process and start another running. 调度算法均为人为定义，可能会有版本差别。可以将一切调度理解为队列的设计、出入队规则的设计。一般不标注可抢占时，认为不可抢占。 先有四种基础决策。 FCFS (First-Come, First-Served） Convoy effect - short process behind long process 非常基础和朴素的安排方法 短进程不友好 SJF (P/NP)Shortest-Job-First 先处理（预估的）总耗时最短的工作 SJF(P) -&gt; 先处理（预估的）剩余耗时最短的工作 小心地处理新进程和被抢占的进程的顺序 理论最优解 事实上，难点在于很难预测到底耗时多久（ -&gt; 预测方案） 会导致饥饿 等电梯。你住在高楼层。电梯总优先服务低楼层的人下楼。 低楼层总有人按电梯。 你永远等不到电梯。 类似地，优先级调度也会导致饥饿。 Example of SJF (NP) Example of SJF (P) 优先级调度 PS (P/NP)Priority Scheduling (高度类似SJF，仅更改判断条件) 先处理高优先级进程 注意同优先级进程的处理方式 时间片轮转调度 RR (P/NP)Round-Robin Scheduling在RR(quatum=q)算法下，每个进程获得一个时间片time slice，长度为q。 关于q 当取quatum为一个极大的值，相当于FCFS，对短进程不友好 当取quatum为一个极小的值，符合RR的意图，但是会消耗大量时间用于进程切换 需要一个较为合适的取值 Example of RR 关于饥饿 FCFS 不会导致饥饿 SJF, PS均会导致饥饿 RR 可以有效避免饥饿 以下为混合决策，更加自定义化，请认真查看题目说明。 多级队列调度 Multilevel Queue Schedulingmultiques, eg. foreground &amp; background each queue has own scheduling algo 每个队列都有独立的出队规则 schedule between queues: eg1. fixed prority 规定出队优先级 serve all from queue1, then 2 may cause starvation eg2. time slice 轮转从两个队列调取进程 each queue has a time slice… 多级反馈队列 Multilevel Feedback Queue Schedulinga kind of ↑ structure: queues 多少队列 each queue’s sche algo 每个队列的出队规则 method when to upgrade/demote jobs 任务的转移规则 which queue a process will enter when that process needs service 进入时的初始队列 classic example: Q1(RR(8))-&gt;Q2(RR(16))-&gt;Q3(FCFS) In Q1/Q2, not completed -&gt; degrade and queue If not used up and not degrade, requeue ( &amp; get a new time slice) Example of MFQ 锁管理（进程同步）进程同步 Process Synchronization producer - consumer problem Critical Section Problem 临界资源：每个进程的访问互斥(When one process is in critical section, no other processes may be in its critical section) find protocol to solve 防止竞争的==协议== Critical Section do &#123; entry section // 资源保护开始\t== critical section ==exit section //资源保护结束\tremainder section &#125; while (TRUE) To solve this Mutual Exclusion 互斥 Progress work when OK and don’t postpone indefinitely Bounded Waiting 有限等待 Sequential Access 顺序访问 如何实现同步原语 / 原子操作 Atomic 硬件支持：atomic hardware instructions （原语） Atomic = non-interruptable 不可中断 Test&amp;Set (TAS)Either test memory word and set value: TestAndSet () Definition (由硬件实现) boolean TestAndSet (boolean *target) &#123; boolean rv = *target; *target = TRUE; return rv: &#125; Example (share bool Lock(False)) Solution:do &#123;\twhile ( TestAndSet ( &amp;lock ))\t; // do nothing\t// critical section\tlock = FALSE;\t// remainder section&#125; while (TRUE) -&gt;(Add bounded-waiting) ： 每个进程在一段时间内只能获取一定次数的testandset操作资源，如果达到阈值，就等待一定时间后再尝试获取do &#123; waiting[i] = TRUE; key = TRUE; while (waiting[i] &amp;&amp; key) key = TestAndSet(&amp;lock); waiting[i] = FALSE; // critical section j = (i + 1) % n; while ((j != i) &amp;&amp; !waiting[j]) j = (j + 1) % n; if (j == i) lock = FALSE; else waiting[j] = FALSE; // remainder section &#125; while (TRUE); Swap安全地交换两个内存单元内的数据 Exampledo &#123; key = TRUE; while ( key == TRUE) Swap (&amp;lock, &amp;key ); // critical section lock = FALSE; // remainder section &#125; while (TRUE); Mutex 一种轻量级的同步机制 实现两种基本操作：lock和unlock。 在lock()和unlock()之间的临界区域内同一时间只有一个进程可以访问共享资源，其他进程必须等待锁被释放才能进入临界区域。 #include &lt;pthread.h&gt;pthread_mutex_t mutex;void *thread_function(void *arg) &#123;\tpthread_mutex_lock(&amp;mutex); // 加锁Mutex // ... critical part\tpthread_mutex_unlock(&amp;mutex); // 解锁Mutex\t// ... remainder &#125; Samophore 一种用于线程同步的机制，可以用于多线程编程中控制访问共享资源。 维护一个计数器和等待队列 Semaphore提供了两个主要的操作：wait（等待）和signal（发信号）。Semaphore的值为整数，初始值可以是任意的正整数，表示可用的资源数目。Semaphore的值只能在wait和signal操作中改变，且改变是原子的，所以可以避免竞态条件。 在C语言中，Semaphore是通过系统提供的sem_t类型来表示的。 wait（等待）：当一个线程想要使用Semaphore代表的共享资源时，它需要调用wait操作。 如果Semaphore的值为正数，则该线程可以使用该资源，同时Semaphore的值减1；如果Semaphore的值为0，则该线程将被阻塞，直到有其他线程释放资源并增加Semaphore的值为止。 int sem_wait(sem_t *sem); signal（发信号）：当一个线程使用完Semaphore代表的共享资源时，它需要调用signal操作。 这将增加Semaphore的值，并唤醒等待该Semaphore的线程，以便它们可以继续使用资源。 int sem_post(sem_t *sem); Semaphore还有其他一些操作，例如初始化、销毁等。在使用Semaphore时，需要注意避免死锁等问题，通常需要仔细考虑线程的同步关系，避免资源竞争等问题。 死锁问题 DeadlockDeadlock Characterization Mutual exclusion 资源互斥 同一时间仅有一个进程可以使用某资源 Hold and wait 享有资源的进程等待其它资源 No preemption 不允许抢占其它进程享有的资源 Circular wait 互相等待形成环 哲学家吃饭都拿左边筷子 Resource-Allocation Graph algorithm-&gt; DEADLOCK AVOIDANCE 通过画资源分配图，检查是否存在死锁，以及确定导致死锁的进程和资源，进而解除死锁 (avoidance) ; 也可以用于避免死锁（在分配前检查是否可能导致死锁） 用资源分配图可以表示当前的资源和进程关系 常用于每个资源仅有1instance的情况（多个instance时，环路和死锁未必相关） V: P: P1,P2… (process list) R: R1,R2… (resource list) E: request edges 请求边 ( process -&gt; resource ) assignment edges 分配边 ( resource -&gt; process ) 通过图判断死锁 无环 -&gt; no deadlock 有环 -&gt; 1 instance / resource type -&gt; 死锁 -&gt;1 instance / … -&gt; 死锁可能性 升级的资源分配图 Each process must a priori claim maximum use claim edge 有向虚线：进程P可能请求资源R （P-&gt;R） request edge 实线（P-&gt;R） assignment edge 实线 （R-&gt;P） 只有当将需求边转换为分配边不会导致分配图中环的形成时，这个请求才会被允许。 Safe mode &amp; safe sequenceSafe mode 在分配请求发生时检查是否这一请求是否使得系统处于安全模式（存在安全队列）以预防死锁 Defination: 系统中每个进程都能够按照它所需的顺序获得资源，执行完自己的任务并释放资源，而不会发生死锁。 If Pi’s resource needs are not immediately available, then Pi can wait until all Pj have finished When all Pj are finished, Pi can obtain needed resources, execute, return allocated resources, and terminate When Pi terminates, Pi+1 can obtain its needed resources, and so on Otherwise, system is in unsafe state 安全模式 -&gt; 无死锁 非安全模式 -&gt; 有可能死锁 starvation 饥饿 … Avoidance -&gt; 确保系统不会进入非安全状态Safe sequence 安全队列 eg: available resource = 3| |maximum needs|holds|needs||—|—|—|—||P0|10|5|5||P1|4|2|2||P2|9|2|7| Avai P1+ P1- P0+ P0- P2+ P2- 3 1 5 0 10 3 12 P1 -&gt; P0 -&gt; P2每一步寻找可运行的process，完成后释放process和它的所有资源。如果找不到可运行的process，则出现unsafe state。 The banker’s algorithm 适用于资源有mutiple instances的情况 Definationn = number of processesm = number of resources types. Available: Vector of length m. If available\\[j] = k, there are k instances of resource type Rj available Max: n x m matrix. If Max\\[i,j] = k, then process Pi may request at most k instances of resource type Rj Allocation: n x m matrix. If Allocation\\[i,j] = k then Pi is currently allocated k instances of Rj Need: n x m matrix. If Need\\[i,j] = k, then Pi may need k more instances of Rj to complete its task Need\\[i,j] = Max\\[i,j] – Allocation\\[i,j]** The algorithm work := available, finish[i] = false find i that finish[i] = false need[i] &lt;= work if i = -1, go to 4 work = work + allocation[i], finish[i] = true, go to 2 if finish[i] = true for all i -&gt; ok, else !ok Simulation+P1-&gt;[2,1,0]-&gt;-P1-&gt;[5,3,2]+P3-&gt;[5,2,1]-&gt;-P3-&gt;[7,4,3]+P0-&gt;[0,0,0]-&gt;-P0-&gt;[7,5,3]+P2-&gt;[1,5,3]-&gt;-P2-&gt;[10,5,5]+P4-&gt;[12,2,4]-&gt;-P4-&gt;[10,5,7] Sum up: deadlock handlingPREVENTION-&gt; restrain the ways request can be madeshown in [deadlock characterization] AVOIDANCE入职检查Whenever a process requests a resource, the request is granted only if the allocation leaves the system in a safe state. Help system to add priori info Prepare for checking: each process declare max of resources needed Dynamically check if there’ll be circular-wait condition be defined by available/allocated resourvces, max demands of processes safe state checking (bank algo/…) ; circle check DETECTIONsimilar to avoidance RECOVERY precess termination 进程终结 一次终结所有/逐个终结直至死锁解除 resource preemption 资源抢占 允许从一个或多个死锁进程中抢占资源 selecting a victim / rollback 回滚 可能导致饥饿"},{"title":"现代操作系统CS2310 速效版","path":"/files/courseNotes/2022(2)/现代操作系统0.html","content":"操作系统基础 关于抽象abstaction （计算机组成的重要概念） 层次化抽象 将系统划分成多个层次，每个层次都对下层屏蔽了具体实现细节，只向上层提供了一组简单的接口，从而简化了系统的设计和维护。 对于计算机系统结构，可以抽象为硬件层、操作系统层、系统程序层、应用程序层、用户层。每个层次都对下层屏蔽了具体实现细节，只提供了一组简单的接口。 虚拟机 (Vitural machines) ==virtualization layer== vitural cpu &amp; memory &amp; devices 什么是计算机操作系统 (Operating system / OS) ？ 一种介于计算机用户与计算机应用间的“程序” 一个系统资源的分配者、其它程序的控制者 系统调用 (System Call) OS提供的可编程接口 比如 fork() exit() wait() (unix) 等 比起使用系统调用，OS也向各类服务提供应用程序接口 ( Application program interface / Api) -&gt; 可以视为一种对系统调用的封装和抽象 简单，易移植 eg. Win32 API, POSIX API(UNIX, Linux, Mac OS), Java API(JVM) 提供服务 GUI program execution IO operations File-system manipulation communications error detection resource allocation accouting protection &amp; security Outline 进程管理 进程/线程/同步/死锁 内存管理 内存/虚拟内存 存储管理 文件系统/大容量存储结构/IO系统 分布式系统结构 进/线程调度并发 &amp; 并行 并发 Concurrency 时分复用：多个任务在同一时段内共享资源，交替运行 并行 Parallelism (multi-core system) 多个任务在（通过多个处理单元）同一时刻同时执行，互相独立 进程 &amp; 线程 进程 process 线程 threads 独立存在 作为进程子集存在 携带更多状态信息 共享内存.系统资源 独立地址空间 共享地址空间 仅通过IPC通信交互 更多方式 上下文切换比较慢 同进程内切换速度很快 线程是进程内的执行单元，不能独立于进程存在，而只能在进程中产生。 每个线程都共享了进程的地址空间、文件描述符表和其他系统资源。 可以认为正因为线程之间共享了部分资源，如代码段、数据段和文件描述符表等，因此在线程之间进行切换时，不需要像进程切换那样复制和恢复整个地址空间，这使得线程切换速度更快。 同时，由于线程之间共享了相同的地址空间，因此线程之间的通信更加容易和高效。线程可以直接访问同一进程内的共享内存，无需通过进程间通信（IPC）的方式进行数据传递，这减少了通信的开销和复杂性。 用户线程 (user threads) &amp; 核线程 (kernel threads) Many-to-one多个用户线程对核隐藏，映射到一个内核级线程上，由内核级线程来执行单个用户线程出现问题会导致同组线程都出问题；不能并行运行 One-to-one高并行支持创建kernel thread有开销Linux, windows NT/XP/2000, Solaris 9+ Many-to-many操作系统重构一定数量核线程Windows NT with the ThreadFiber package Two-level在Many-to-many的基础上运行用户线程与核线程1对1绑定 进程 process 进程 process ( = job 作业) program becomes process when the exe file is loaded into memory 开始运行的程序被载入内存，成为进程（此处的“内存”、之后的“组分”与虚拟内存有关） 1 program can be several processes 一个程序可以产生多个进程 一个进程的组成部分 conposition: 栈 stack … 堆 heap memroy dynamically allocated during run time 数据 data 文本 text programme code PCB (Process control block) state num counter registers mem limits list of open files …—&gt; 包含进程的状态;控制;上下文切换;通信和同步;优先级管理信息 进程的状态 process state 一个新的进程的一生： 创建 (new) 就绪 (ready) 进程就绪，等待处理器分配资源 比如CPU正在忙着处理别的进程，可能新的进程就要等待 运行 (run) 执行指令 等待 (wait) 进程未就绪，等待事件的发生或完成 比如等待键盘输入字符 终止 (terminated) CPU的进程切换过程 保存当前进程的上下文(-&gt;PCB0) 切换到新进程的上下文(&lt;-PCB1) …更新控制信息，开始执行新进程 结束执行新进程 保存新进程的上下文(-&gt;PCB1) 切换到原进程的上下文(&lt;-PCB0) … CPU调度 cpu scheduling抢占 preemptive 和 非抢占 nonpreemptive 一个处于Run状态的进程是否可根据调度规则在运行过程中被其它进程中断？ 能 -&gt; 抢占式：允许中断 不能 -&gt; 非抢占式：除非进程结束或者进入等待状态，即释放CPU资源，不允许另一个进程获取其CPU资源 什么是CPU调度在进程的状态发生以下变化时，CPU可能作“调度”决策 run -&gt; wait run -&gt; ready wait -&gt; ready (I/O完成等event发生，等待资源分配) terminates 在1.4时做决策 -&gt; 非抢占 (处理进程的等待和结束)在2.3时做决策 -&gt; 抢占 (处理新的ready进程) 调度器 Dispatcher 控制CPU 切换上下文 切换进程 切换用户/管理员权限 用户程序重启 调度延迟 Dispatch latency time it takes for the dispatcher to stop one process and start another running. 调度算法均为人为定义，可能会有版本差别。可以将一切调度理解为队列的设计、出入队规则的设计。一般不标注可抢占时，认为不可抢占。 先有四种基础决策。 FCFS (First-Come, First-Served） Convoy effect - short process behind long process 非常基础和朴素的安排方法 短进程不友好 SJF (P/NP)Shortest-Job-First 先处理（预估的）总耗时最短的工作 SJF(P) -&gt; 先处理（预估的）剩余耗时最短的工作 小心地处理新进程和被抢占的进程的顺序 理论最优解 事实上，难点在于很难预测到底耗时多久（ -&gt; 预测方案） 会导致饥饿 等电梯。你住在高楼层。电梯总优先服务低楼层的人下楼。 低楼层总有人按电梯。 你永远等不到电梯。 类似地，优先级调度也会导致饥饿。 Example of SJF (NP) Example of SJF (P) 优先级调度 PS (P/NP)Priority Scheduling (高度类似SJF，仅更改判断条件) 先处理高优先级进程 注意同优先级进程的处理方式 时间片轮转调度 RR (P/NP)Round-Robin Scheduling在RR(quatum=q)算法下，每个进程获得一个时间片time slice，长度为q。 关于q 当取quatum为一个极大的值，相当于FCFS，对短进程不友好 当取quatum为一个极小的值，符合RR的意图，但是会消耗大量时间用于进程切换 需要一个较为合适的取值 Example of RR 关于饥饿 FCFS 不会导致饥饿 SJF, PS均会导致饥饿 RR 可以有效避免饥饿 以下为混合决策，更加自定义化，请认真查看题目说明。 多级队列调度 Multilevel Queue Schedulingmultiques, eg. foreground &amp; background each queue has own scheduling algo 每个队列都有独立的出队规则 schedule between queues: eg1. fixed prority 规定出队优先级 serve all from queue1, then 2 may cause starvation eg2. time slice 轮转从两个队列调取进程 each queue has a time slice… 多级反馈队列 Multilevel Feedback Queue Schedulinga kind of ↑ structure: queues 多少队列 each queue’s sche algo 每个队列的出队规则 method when to upgrade/demote jobs 任务的转移规则 which queue a process will enter when that process needs service 进入时的初始队列 classic example: Q1(RR(8))-&gt;Q2(RR(16))-&gt;Q3(FCFS) In Q1/Q2, not completed -&gt; degrade and queue If not used up and not degrade, requeue ( &amp; get a new time slice) Example of MFQ 锁管理（进程同步）进程同步 Process Synchronization producer - consumer problem Critical Section Problem 临界资源：每个进程的访问互斥(When one process is in critical section, no other processes may be in its critical section) find protocol to solve 防止竞争的==协议== Critical Section do &#123; entry section // 资源保护开始\t== critical section ==exit section //资源保护结束\tremainder section &#125; while (TRUE) To solve this Mutual Exclusion 互斥 Progress work when OK and don’t postpone indefinitely Bounded Waiting 有限等待 Sequential Access 顺序访问 如何实现同步原语 / 原子操作 AtomicMany systems provide hardware support for critical section code Some machines provide special atomic hardware instructions （原语） Atomic = non-interruptable Test&amp;Set (TAS)Either test memory word and set value: TestAndSet () Definition (由硬件实现) boolean TestAndSet (boolean *target) &#123; boolean rv = *target; *target = TRUE; return rv: &#125; Example (share bool Lock(False)) Solution:do &#123;\twhile ( TestAndSet ( &amp;lock ))\t; // do nothing\t// critical section\tlock = FALSE;\t// remainder section&#125; while (TRUE) -&gt;(Add bounded-waiting) ： 每个进程在一段时间内只能获取一定次数的testandset操作资源，如果达到阈值，就等待一定时间后再尝试获取do &#123; waiting[i] = TRUE; key = TRUE; while (waiting[i] &amp;&amp; key) key = TestAndSet(&amp;lock); waiting[i] = FALSE; // critical section j = (i + 1) % n; while ((j != i) &amp;&amp; !waiting[j]) j = (j + 1) % n; if (j == i) lock = FALSE; else waiting[j] = FALSE; // remainder section &#125; while (TRUE); Swapswap contents of two memory words: Swap() — 安全地交换两个内存单元内的数据 Exampledo &#123; key = TRUE; while ( key == TRUE) Swap (&amp;lock, &amp;key ); // critical section lock = FALSE; // remainder section &#125; while (TRUE); Mutex 一种轻量级的同步机制 实现两种基本操作：lock和unlock。 在lock()和unlock()之间的临界区域内同一时间只有一个进程可以访问共享资源，其他进程必须等待锁被释放才能进入临界区域。 #include &lt;pthread.h&gt;pthread_mutex_t mutex;void *thread_function(void *arg) &#123;\tpthread_mutex_lock(&amp;mutex); // 加锁Mutex // ... critical part\tpthread_mutex_unlock(&amp;mutex); // 解锁Mutex\t// ... remainder &#125; Samophore 一种用于线程同步的机制，可以用于多线程编程中控制访问共享资源。 维护一个计数器和等待队列 Semaphore提供了两个主要的操作：wait（等待）和signal（发信号）。Semaphore的值为整数，初始值可以是任意的正整数，表示可用的资源数目。Semaphore的值只能在wait和signal操作中改变，且改变是原子的，所以可以避免竞态条件。 在C语言中，Semaphore是通过系统提供的sem_t类型来表示的。 wait（等待）：当一个线程想要使用Semaphore代表的共享资源时，它需要调用wait操作。 如果Semaphore的值为正数，则该线程可以使用该资源，同时Semaphore的值减1；如果Semaphore的值为0，则该线程将被阻塞，直到有其他线程释放资源并增加Semaphore的值为止。 int sem_wait(sem_t *sem); signal（发信号）：当一个线程使用完Semaphore代表的共享资源时，它需要调用signal操作。 这将增加Semaphore的值，并唤醒等待该Semaphore的线程，以便它们可以继续使用资源。 int sem_post(sem_t *sem); Semaphore还有其他一些操作，例如初始化、销毁等。在使用Semaphore时，需要注意避免死锁等问题，通常需要仔细考虑线程的同步关系，避免资源竞争等问题。 死锁问题 DeadlockDeadlock Characterization Mutual exclusion 资源互斥 only one process at a time can use a resource Hold and wait process holding at least one resource is waiting to acquire additional resources held by other processes 享有资源的进程等待其它资源 No preemption a resource can be released only voluntarily by the process holding it, after that process has completed its task 不允许抢占其它进程享有的资源 Circular wait 互相等待形成环 哲学家吃饭都拿左边筷子 Each process utilizes a resource as follows: request use release Resource-Allocation Graph algorithm-&gt; DEADLOCK AVOIDANCE 通过画资源分配图，检查是否存在死锁，以及确定导致死锁的进程和资源，进而解除死锁 (avoidance) ; 也可以用于避免死锁（在分配前检查是否可能导致死锁） The graph represents the relationships between resources and processes in the system. 用资源分配图可以表示当前的资源和进程关系 常用于每个资源仅有1instance的情况（多个instance时，环路和死锁未必相关） V: P: P1,P2… (process list) R: R1,R2… (resource list) E: request edges ( process -&gt; resource ) assignment edges ( resource -&gt; process ) Judge deadlock by graph no circle -&gt; no deadlock 1 circle -&gt; 1 instance / resource type -&gt; deadlock -&gt;1 instance / … -&gt; possibility of deadlock upgraded resource-allocation graph: Each process must a priori claim maximum use claim edge 有向虚线：进程P可能请求资源R （P-&gt;R） request edge 实线（P-&gt;R） assignment edge 实线 （R-&gt;P） In other words, the request can be granted only if converting the request edge to an assignment edge does not result in the formation of a circle in the resource allocation graph. Safe mode &amp; safe sequenceSafe mode system check if allocation leaves the system in a safe mode to prevent from dead lock 在分配请求发生时检查是否存在安全队列以预防死锁 defination: 系统中每个进程都能够按照它所需的顺序获得资源，执行完自己的任务并释放资源，而不会发生死锁。 If Pi’s resource needs are not immediately available, then Pi can wait until all Pj have finished When all Pj are finished, Pi can obtain needed resources, execute, return allocated resources, and terminate When Pi terminates, Pi+1 can obtain its needed resources, and so on Otherwise, system is in unsafe state If a system is in safe state -&gt; no deadlocks If a system is in unsafe state -&gt; possibility of deadlock starvation 饥饿 … Avoidance -&gt; ensure that a system will never enter an unsafe state.Safe sequence eg: find a safe sequence with available resource = 3| |maximum needs|holds|needs||—|—|—|—||P0|10|5|5||P1|4|2|2||P2|9|2|7| Avai P1+ P1- P0+ P0- P2+ P2- 3 1 5 0 10 3 12 P1 -&gt; P0 -&gt; P2每一步寻找可运行的process，完成后释放process和它的所有资源。如果找不到可运行的process，则出现unsafe state。 The banker’s algorithm 适用于资源有mutiple instances的情况 Definationn = number of processesm = number of resources types. Available: Vector of length m. If available\\[j] = k, there are k instances of resource type Rj available Max: n x m matrix. If Max\\[i,j] = k, then process Pi may request at most k instances of resource type Rj Allocation: n x m matrix. If Allocation\\[i,j] = k then Pi is currently allocated k instances of Rj Need: n x m matrix. If Need\\[i,j] = k, then Pi may need k more instances of Rj to complete its task Need\\[i,j] = Max\\[i,j] – Allocation\\[i,j]** The algorithm work := available, finish[i] = false find i that finish[i] = false need[i] &lt;= work if i = -1, go to 4 work = work + allocation[i], finish[i] = true, go to 2 if finish[i] = true for all i -&gt; ok, else !ok Simulation+P1-&gt;[2,1,0]-&gt;-P1-&gt;[5,3,2]+P3-&gt;[5,2,1]-&gt;-P3-&gt;[7,4,3]+P0-&gt;[0,0,0]-&gt;-P0-&gt;[7,5,3]+P2-&gt;[1,5,3]-&gt;-P2-&gt;[10,5,5]+P4-&gt;[12,2,4]-&gt;-P4-&gt;[10,5,7] Sum up: deadlock handlingPREVENTIONrestrain the ways request can be madeshown in [deadlock characterization] AVOIDANCE入职检查Whenever a process requests a resource, the request is granted only if the allocation leaves the system in a safe state. Help system to add priori info Prepare for checking: each process declare max of resources needed Dynamically check if there’ll be circular-wait condition be defined by available/allocated resourvces, max demands of processes safe state checking (bank algo/…) ; circle check DETECTIONsimilar to avoidance RECOVERY precess termination 进程终结 abort one or more processes to break the circular wait abort all deadlock ones / one at a time until ok resource preemption 资源抢占 preempt some resources from one or more of the deadlocked processes selecting a victim / rollback 回滚 ATTENTION: starvation 内存与虚拟内存MMU (Memory Management Unit) Hardware component (通常作为一个主板模块与CPU和内存分别相连) 在CPU发生访问需求时，根据内存映射表将CPU中的逻辑内存地址转换成内存中的物理内存地址 每次开机，OS都会从硬盘中读取地址映射表，并将其存储到内存中的特定位置 OS会将这个位置，也就是地址映射表的基地址存储在MMU的 relocation register 重定位寄存器。 Memory Management 内存管理Allocation Table 内存分配表由于内存分配表的大小通常比较小，而且遍历它的开销相对较低，所以一般的内存管理方法都使用内存分配表来记录内存的分配情况，使OS可以快速查找到可用的内存块并将其分配给进程。 记录内存中分区的起始地址、大小、是否已分配等信息 可看作是一个逻辑上的表格，其中每个表项代表一块内存区域 由OS在启动时初始化，分配时动态更新 Contiguous memory allocation 连续式内存分配Defination 将可用的内存空间视为连续的地址空间 进程被分配的内存空间也必须是连续的物理内存空间。 Multiple-partition allocation 多区分配 一种典型的连续式内存分配 维护内存分配表（包含已分配分区和未分配 (holes) 分区的信息） Dynamic Storage-Allocation Problem 动态存储分配问题 First-fit Best-fit Allocate the smallest hole that is big enough must search entire list, unless ordered by size Produces the smallest leftover hole Worst-fit SimilarlyFirst-fit &amp; best-fit better than worst-fit in terms of **speed and storage 分配出去的空间释放后大小未必能够匹配后续需分配的内存大小，导致 内存碎片 (memory fragmentation) 形成。 内存碎片 memory fragmentation 内存中大量的零散、未被充分利用的小块空闲内存 过多碎片可能导致内存空间无法有效利用，也会增加分配内存的开销。 外部碎片 (external) total memory space exists to satisfy a request, but it is not contiguous 内部碎片 (internal) allocated memory may be slightly larger than requested memory allocating memory internal to a partition, but not being used -》 使用First fit算法来分配内存时，会发现对于N个块已经被分配，有0.5N个块被浪费在碎片上。其中1/3的碎片可能无法使用，这就是“50%规则” 解决方案 内存紧缩/重排 compaction/shuffle 效率问题 -&gt; 伙伴系统 允许不连续分配 noncontiguous memory allocation 内存的分页与分段 paging &amp; segmentation Buddy System 伙伴系统* 将内存分成大小相等的块，每个块都有一个大小的指数级别，例如2的幂次方 当分配内存时，伙伴系统会按照2的幂次方去寻找最合适的可用块 如果找到一个较大的块，它就会被拆分成两个较小的块，并将它们标记为伙伴块 当释放内存时，伙伴系统会将相邻的伙伴块合并成一个更大的块= 可以尽量减少传统连续分配模式产生的内存碎片 使用比较复杂的数据结构管理伙伴关系和未分配内存 Linux Non-contiguous memory allocation 非连续式内存分配 allow noncontiguous physical address space Paging 内存分页Defination FRAMES 框 -&gt; 物理内存切块 divide physical memory into fix-sized blocks size is power of 2, 512b - 16Mb keep track of all free frames PAGES 页 -&gt; 逻辑内存切块 divide logical memory into same sized blocks 运行方式 to run a program of N pages -&gt; find N free frames PAGE TABLE 页表 translate addresses (page id -&gt; frame id) (still have internal fragmentation) Implementation Define a logical address as \\ divided by CPU page number (p) the page’s index in page tables page offset (d) mapping to offset within that page (frame) Keep a page table PTBR: Page-table base register in CPU records the address of the table PTLR: Page-table length register in CPU indicates the length of the table Obviously, every data/instruction access requires 2 memory accesses (access the table and allocate the unit according to the table) Add a TLB to accelerate translation lookaside buffer record recent accessed table item HIT fast access MISS 内存缺页 load to TLB, try to hit next time EAT (Effective Access Time) Associative Lookup = ε time / unit Hi ration = α EAT = (1 + ε) α + (2 + ε)(1 – α) TLB scheme FIFO First-In, First-Out 记录页表项进入TLB的时间戳 将最早进入TLB的页面替换出去 LRU Least Recently Used 记录页表项在TLB中最后一次被访问的时间戳 将访问时间最早的页表项替换出去 Second-chance page replacement algorithm 给页表项附加一个引用位 reference bit（0/1） 当需要发生替换时，对于每个被遍历到的页表项： 如果引用位为1，则设置为0并检查下一个页面 每次替换都从上次结束的位置继续 如果引用位为0，则进行替换并初始化引用位为1 The realization of page table structure Hierarchical Page Tables 多层表将虚拟地址分成多个部分，每个部分都有一个表。 windows eg. 2-level paging table -&gt; forward-mapped page table 10-bit page num*2 + 12-bit offset Hashed Page Tables 哈希页表 虚拟页号在虚拟地址中被哈希到哈希表中。 FreeBSD, Solaris Inverted Page Tables 全局页表 由操作系统维护，用于所有进程的页表。 条目数等于主存中的帧数。 与传统的页表相比具有更小的内存占用（比较直接），但查找时间更长。 Linux Segmentation 内存分段Memory-management scheme that supports user view of memory 可以认为段是一种大小不固定的“页” Logical address defined as ( in paging scheme, we use ) Segment table 分段表 maps two-dimensional physical addresses each table entry has base contains the starting physical address where the segments reside in memory limit specifies the length of the segment Simularly keeping the Segment-Table Segment-table base register (STBR) segment table’s location in memory Segment-table length register (STLR) indicates number of segments used by a program: segment number s is legal if s &lt; STLR Segmentation and paging scheme Windows 大容量存储系统Disk 基础 HDD Overview Drives rotate at 60 to 250 times per second Transfer rate is rate at which data flows between drive and computer Positioning time (random-access time) is time to move disk arm to desired cylinder (seek time) and time for desired sector to rotate under the disk head (rotational latency) 柱面 (cylinder) &amp; 磁道（track） 一个盘片的同心圆轨道称为track，所有盘片上的Track组成的一个柱面状的物理结构程伟cylinder 在同一Cylinder上的所有track可以同时被磁头访问 按cylinder编号不按track编号 （SSD不存在这两个概念） 扇区 (sector) 一个盘片的同心圆轨道内的一个扇形区域 扇区0是第一个磁道的第一块扇区 每个track的扇区数不固定，与磁盘设计时的角速度有关 簇（cluster）： 一组相邻的扇区的集合 文件系统中的最小单位 块（block）： 由多个扇区组成 文件系统管理磁盘空间的基本单位（读写数据的基本单位）。 逻辑地址的编码 large 1-d arrays of logical blocks (smallest unit) is mapped into the sectors of the disk sequentially Mapping proceeds in order through that track, then the rest of the tracks in that cylinder, and then through the rest of the cylinders from outermost to innermost Difficulty in mapping from logical to physical address Except for bad sectors 操作系统检查坏块并在编码时排除 SSD 页（page）：页是SSD中最小的可读写单元，通常为4KB或8KB大小。 块（block）：类似HHD。由多个页构成。为了增大擦除时一次性操作的块的大小延长寿命，在SSD中通常更大，通常为128KB或256KB大小。（理由后面细说） Disk-Scheduling AlgorithmsIdle disk can immediately work on I/O requestBusy disk means work must be queued(Optimization algorithms only make sense when a queue exists) FCFS按queue处理 SSTFShortest Seek Time First selects the request with the minimum seek time from the current head position (当前最近) SCANThe disk arm starts at one end of the disk, and moves toward the other end,servicing requests until it gets to the other end of the disk, where the headmovement is reversed and service continues. C-SCANThe head moves from one end of the disk to the other, servicing requests as it goes. When it reaches the other end, it immediately returns to the beginning of the disk, without servicing any requests on the return trip. C-LOOKSimilar to C-SCAN, but doesn’t reach the two ends.Arm only goes as far as the last request in each direction, then reverses direction immediately, without first going all the way to the end of the disk-》 in C-XXXX , arm services always occur in one direction. when they are moving are the opposite direction, they ‘immediately returns‘. SSD vs HDDNonvolatile memory devices disk-drive like -&gt; solid-state disks (SSD) (Other forms include USB drives (thumb drive, flash drive), DRAM stick, and main storage in devices like smartphones ) Storage capacity / price capacity: HDD usually &gt; SSD magnetic disks (HDD) hold much more data. price : SDD usually &gt; HDD (per MB) Reliability SSD &gt; HDD SSDs have no moving parts (like magnetic disks and read/write heads) -&gt;less possible to damage ==Lifespan== SSD &lt;&lt; HDD -&gt; SSD need to be carefully managed (storage units have a certain erasing and writing life) -&gt; disk management LET’S TALK ABOUT IT LATER Speed SSD &gt;&gt; HDD No moving parts, so no seek time or rotational latency Bus speed SSD requires a direct connection to a high-speed bus (such as PCI) for maximum performance (while HDDs are not subject to this limitation) ==Disk management== SSDs need to implement complex flash controller algorithms, such as garbage collection, wear leveling, etc., to manage storage space. HDDs, on the other hand, require low-level formatting (physical formatting) and logical formatting (logical formatting) to create file systems and deal with problems such as bad blocks. LET’S TALK ABOUT IT LATER ==Space management== In HDD, the file system usually uses clusters (簇) to manage disk space, and the size of the cluster is usually fixed. In SSD, due to the complexity of its internal data management method, the file system usually needs to adopt different space management strategies, such as TRIM command and garbage collection (Garbage Collection), etc., to maintain the performance and lifespan of SSD. LET’S TALK ABOUT IT LATER Space &amp; Disk ManagementHDD -&gt; Dividing a disk into sectors that the disk controller can read and write Each sector can hold header information + data + error correction code (ECC) Usually 512b data but can be selectable OS needs to record its own data structures on the disk Part groups of cylinders, each treated as a logical disk Logical formatting or “making a file system” To increase efficiency most file systems group blocks into clusters Disk I/O done in blocks ; File I/O done in clusters Boot block initializes system The bootstrap is stored in ROM Bootstrap loader program stored in boot blocks of boot partition Methods such as sector sparing used to handle bad blocks MBR Boot code + partition table (contains pointer to boot partition) SSD Read and written in “page” increments (think sector) ==but can’t overwrite in place== Must first be erased, and erases happen in larger “block” increments 要修改或擦除一个页，需要先将整个块读取到内存中，然后进行修改或擦除，最后再将整个块写回SSD。(所以SSD的块常常比HHD大的多，以增大每次擦写的大小、减小擦写次数) Can only be erased a limited number of times before worn out ~ 100,000 Life span measured in drive writes per day (DWPD) A 1TB NAND drive with rating of 5DWPD is expected to have 5TB per day written within warrantee period without failing 块级别的操作对于SSD的性能和寿命管理是非常重要的。-》 NAND Flash Controller Algorithms With no overwrite, pages end up with mix of valid and invalid data. We need ways to manage them: flash translation layer (FTL) table (a part of NAND flash) Track which logical blocks are valid TRIM (a instruction involving SSD and OS) inform which logical blocks are invalid more flexibly and timely Garbage collection (GC) Allocates overprovisioning to provide working space for GC 垃圾回收是SSD内部的一种自动化操作，用于清理和整理闲置和无效的页。当文件被删除或修改时，SSD的页可能会变得闲置或无效，但这些页实际上仍然占据着宝贵的存储空间。垃圾回收操作会定期或在需要时将这些闲置和无效的页整理到一起，并执行擦除操作，以便可以重新分配给新的数据，从而提高SSD的存储效率。 Write Wear Leveling (均衡写入耗损) Each cell has lifespan, try to write equally to all cells 这可以通过在写入新数据时选择尽可能少使用写入次数较多的块，或将写入数据随机分布到多个块中来实现。 Disk Attachment Drive attached to computer via I/O bus Host controller in computer uses bus to talk to disk controller built into drive Busses vary (protocols vary) 接口协议规定了硬件设备之间的通信协议和通信方式，而数据总线BUS则是物理连接这些设备之间的通信通道。 including EIDE, ATA, SATA, USB, SCSI, Fiber Channel, SAS, Firewire… 家用计算机的CPU多使用PCI、SATA等接口协议，FC更多用于企业计算机和数据中心环境。 SCSI（Small Computer System Interface） 过去比较常见 a bus, up to 16 devices on one cable SCSI initiator 发起器 requests operation 发送操作请求 and SCSI targets 目标设备 perform tasks Each target can have up to 8 logical units (disks attached to device controller) FC （Fiber Channel） 光纤通道 a high-speed serial architecture Can be switched fabric with 24-bit address space – the basis of storage area networks (SANs 存储区域网络) in which many hosts attach to many storage units 通常用于需要大规模存储和高速数据传输的应用场景 RAID Redundant Arrays of Independent Disks (RAIDs) RAID– multiple disk drives provides reliability via redundancy Mirroring ( -&gt; a second copy) duplicate every disk Parity bit ( -&gt; error-correcting bit) Parallel access to multiple disk improves performance Bit-level striping split the bits of each byte across multiple disks block-level striping blocks of a file are striped across multiple disks RAID is arranged into seven or more different levels RAID 6: P + Q redundancy Reed-Solomon codes 2 bits of redundant data are stored for every 4 bits of data 在RAID6中，数据被分布式地存储在多个磁盘驱动器中，同时通过计算奇偶校验信息对数据进行冗余存储。RAID6采用两个奇偶校验盘（P和Q盘）来存储奇偶校验信息，从而实现了对两个磁盘驱动器的故障容忍。 交织分布奇偶校验（如RAID 5）和复制（如RAID 1）是两种不同的数据保护策略，它们在数据存储和容错方式上有以下区别： 假设有一个包含4个数据盘和1个奇偶校验盘的RAID 5阵列，其中数据盘分别标记为D1、D2、D3、D4，奇偶校验盘标记为P。当一个数据盘出现故障时，可以通过从其他数据盘和奇偶校验盘中恢复数据。例如，当D2数据盘出现故障时，需要从其他数据盘和奇偶校验盘中恢复D2上的数据。RAID 5使用异或（XOR）运算来生成奇偶校验信息，该运算具有可逆性，可以用于数据恢复。假设D1、D3和D4上的数据分别为A、B和C，而P上的奇偶校验信息为A XOR B XOR C。现在需要恢复D2上的数据B，可以通过执行以下步骤： 从D1、D3和D4中读取对应位置上的数据，得到A、B和C的值。 从奇偶校验盘P中读取对应位置上的奇偶校验信息，得到A XOR B XOR C的值。 通过对已知的A、B和C的值以及A XOR B XOR C的值执行异或运算，即 (A XOR B XOR C) XOR (A XOR C) = B，得到D2上的数据B的值。 将得到的B的值写入到替换后的新数据盘D2上，完成数据恢复。 这样，通过从其他数据盘和奇偶校验盘中恢复数据，可以在某个数据盘出现故障时保护数据的完整性，并维持RAID 5阵列的可靠性和可用性。 Network-Attached Storage Network-attached storage (NAS) is storage made available over a network rather than over a local connection (such as a bus) Remotely attaching to file systems Implemented via remote procedure calls (RPCs) between host and storage over typically TCP or UDP on IP network iSCSI protocol uses IP network to carry the SCSI protocol Remotely attaching to devices (blocks) -&gt; virtual disks Storage Area Network（SAN）存储区域网络 Common in large storage environments Multiple hosts attached to multiple storage arrays - flexible use high-speed buses，like Fibre Channel or iSCSI"},{"title":"算法与复杂性-CS2308","path":"/files/courseNotes/2022(2)/算法与复杂性.html","content":"参考资料来源：http://basics.sjtu.edu.cn/~chen/teaching/ALGO23/https://chat.openai.com/chat 前言： 独自理解英文非常痛苦，在很多方面请求了茶老师的帮助。茶老师虽然经常犯错和道歉，但是知识还是比我渊博得多（）不过，也难免在我的记录中保留了一些茶老师的错（这样你才知道我问的是茶老师）（故意地）。在笔记中，一般来说，中文的段落由我和茶老师总结，英文则来源于陈老师的PPT。 陈老师的ppt和课程安排非常完善，茶老师也在此基础上帮上了我很多，真的非常非常感谢。 Slides01 Basic arithmetic decimal representation / binary representation shares complexity of computing Slides02 Modular arithmeticoriginal Euclid’s algorithm 将两个输入的非负整数记为a和b，其中a大于等于b。 用b除以a，得到商q和余数r。即，b = aq + r。 如果余数r为0，则a是最大公约数，算法结束。 如果余数r不为0，则用原来的除数a替换被除数b，用余数r替换除数a。然后重复步骤2。这个过程一直持续到余数为0为止。最终，最后一次非零余数即为最大公约数。 gcd(a,b) (greatest common divisor) based on gcd(a,b) == gcd(a,a - b) extended Euclid’s algorithm除了计算最大公约数外，它还可以找到满足贝祖等式（Bézout’s identity）的两个整数x和y。贝祖等式是一个方程，形式为ax + by = gcd(a, b) 输入两个整数a和b，其中a大于等于b。 用原始欧几里得算法计算a和b的最大公约数gcd(a, b)。 在计算的过程中，记录每一步的商和余数。 从最后一步开始，用递归的方式向上计算x和y的值。 基本情况：最后一步的余数为0，此时x = 1，y = 0。 递归情况：根据贝祖等式，使用下一步的x和y计算当前步的x和y，直到回到第一步。 返回x和y作为结果。 Modular division theorem For any a mod N, a has a multiplicative inverse modulo N if and only if it is relatively prime to N (i.e., gcd(a; N) = 1).When this inverse exists, it can be found in time O(n3) by running the extended Euclid algorithm. ExampleWe wish to compute 11-1 mod 25:Using the extended Euclid algorithm,we find 15 · 25 - 34 · 11 = 1, thus -34 · 11 ≡ 1 mod 25 and -34 ≡ 16 mod 25.This resolves the issue of modular division: when working modulo N, we can divide by numbers relatively prime to N. And to actually carry out the division, we multiply by the inverse. Modular inverseWe say x is the multiplicative inverse of a modulo N if ax ≡ 1 mod N. Slides03 Primality TestFermat’s little theorem If p is prime, them for every $1\\le a&lt;p$$a^{p-1} \\equiv 1(\\bmod p)$ RSAencryption() &amp; decryption() （信息的加密和解密） Private-key schemeone-time pad 内容 - 约定一串等长字符 - 按位异或 - e(e(x)) = (x ⊕ r) ⊕ r = x ⊕ (r ⊕ r) = x ⊕ 0 = x Attention random R costly reused insecure x ⊕ z The Rivest-Shamir-Adelman (RSA) cryptosystemRSA是一种公钥密码系统，RSA算法基于数学上的大质数分解问题和模幂运算的原理。为了确保RSA的安全性，公钥 (Public Key, PK) 和私钥 (Secret Key, SK) 必须使用足够长的密钥长度，通常为2048位或更长。 在RSA中，每个用户都有一对密钥，即公钥(N,e)和私钥(N,d)。公钥是公开的。 加密：A使用B的公钥来加密消息以发送给B 解密：B使用自己的私钥来解密加密的消息 主要数学原理 选择两个大质数p和q，取N = p * q。 根据欧拉函数 φ(N) = (p-1) (q-1) 计算与φ(N)*互质的整数e，e称为公钥。(e常常取3，有较高的计算效率) 用 扩展欧几里得算法 计算 私钥d ，使得 d * e ≡ 1 (mod φ(N))。(也就是求逆元d) 将N和e组成公钥，将N和d组成私钥。 对于要加密的明文M，使用公钥进行加密，即计算出密文C = M^e (mod N)。 对于接收到的密文C，使用私钥进行解密，即计算出明文M = C^d (mod N)。 RSA算法的安全性基于质因数分解问题。因为要破解RSA加密算法，需要对N进行质因数分解，即找出p和q。但对于足够长的p和q，质因数分解是非常困难的。目前最好的算法也需要耗费大量的时间和计算资源。因此，使用足够长的密钥长度可以保证RSA算法的安全性。 关于算法 扩展欧几里得算法 *扩展欧几里得算法可以求出两个整数a和b的最大公约数gcd(a, b)，以及它们的一组整数解x和y，满足ax + by = gcd(a, b)。求得一组整数解x和y后，x即为a关于模n的逆元a^-1。 模幂算法 在RSA解密过程中，模幂运算是非常重要的一步。解密过程中需要计算密文C的d次方模N的结果，即计算 $C^d \\bmod N$。 通常使用快速幂算法（也称为模重复平方法）来计算模幂。 快速幂算法的基本思想是将指数d表示为二进制形式，然后按位计算幂的乘积，遇到1就将底数乘到当前的幂中，遇到0则将幂平方。 一个简单例子 A想要制作一对钥匙！他选择了5和11。 在RSA中，选取p=5和q=11，那么N=p*q=55，φ(N)=(p-1)*(q-1)=40。选取e=3，即gcd(e, φ(N))=1。3与40互质，e=3是合法的选择。 接下来计算私钥d，即试满足d*e ≡ 1 (mod φ(N))。根据扩展欧几里得算法，可以得到一组整数解x和y，使得xe + yφ(N) = gcd(e, φ(N))。将e=3和φ(N)=40代入上式，可以得到x_3 + y_40 = gcd(3, 40) = 1。 通过扩展欧几里得算法求解x和y的过程，可以得到x=-13，y=1。由于xe + yφ(N) = 1，所以x*e ≡ 1 (mod φ(N))。因此，私钥d=-13 mod 40 = 27。所以，公钥为(N, e)=(55, 3)，私钥为(N, d)=(55, 27)。 B想要给A发送信息！他想发送9。 假设B要向A发送数字9。首先，B需要使用A的公钥对数字9进行加密。具体步骤如下： 将数字9转换成二进制形式，得到1001。 使用A的公钥(N, e)=(55, 3)进行加密，计算出密文C=9^3 mod 55=34。 将密文34发送给A。 A接收到了B的信息准备解密 A使用自己的私钥对密文进行解密。 使用A的私钥(N, d)=(55, 27)进行解密，计算出明文$M=14^{27}\\bmod 55=9$。 将解密得到的明文9转换成十进制形式，得到原始的数字9。 （乐得，茶老师竟然觉得模运算算出来结果是34，我指出来它就疯狂道歉（（（茶老师啊—— Divide-and-Conquer Algorithms分而治之 MultiplicationKaratsuba // Input: positive integers x and y, in binary// Output: their product n = max(size of x, size of y) rounded as a power of 2. if n = 1 then return xy. xL; xR = leftmost n=2, rightmost n=2 bits of x yL; yR = leftmost n=2, rightmost n=2 bits of y P1 = multiply(xL; yL) P2 = multiply(xR; yR) P3 = multiply(xL + xR; yL + yR) return P1 × 2n + (P3 - P1 - P2) × 2n=2 + P2. 茶老师的翻译如下： 计算输入数字 x 和 y 的长度，并选择最大长度 n，使其成为2的幂。 如果 n=1，则直接返回 xy。 将 x 和 y 分别分成两个长度为 n/2 的数字 xL,xR 和 yL,yR。 递归地计算 P1 = xL × yL，P2 = xR × yR 和 P3 = (xL + xR) × (yL + yR)。 将 P1 × 2n + (P3 − P1 − P2) × 2n/2 + P2 作为结果返回。 步骤3-4是递归的核心部分，将原问题分解成较小的子问题。步骤5是组合的关键，将子问题的解组合成整个问题的解。 整个算法的时间复杂度为 $O(n log n)$ ，比传统的乘法算法的时间复杂度 $O(n^2)$ 更为优秀。然而，由于 Karatsuba 算法的常数较大，当 n 较小时，传统的乘法算法可能更快。 具体分析该算法的时间效能？ $T(n) = 3T(n=2) + O(n)$The algorithm’s recursive calls form a tree structure (The height of the tree is log2 n) . At the very top level, when $k = 0$, we need $O(n)$.At the bottom, when $k = log_2(n)$, it is $O(3^{log_2(n)}) = O(n^{log_2(3)}) \\approx O(n^{1.59})$ Recurrence relations主定理（Master Theorem）是计算分治算法时间复杂度的一种常用方法，通常用于解决具有递归形式的算法问题。 主定理给出了递归式 $T(n)=aT(n/b)+f(n)$ 的渐近解，其中 $a\\geq1$，$b&gt;1$，$f(n)$ 是一个渐进正的函数，$T(n)$ 表示问题规模为 $n$ 时算法的时间复杂度。 主定理的一般形式如下：若 $f(n)=O(n^{\\log_b a-\\epsilon})$，其中 $\\epsilon&gt;0$，则 $T(n)=\\Theta(n^{\\log_b a})$。若 $f(n)=\\Theta(n^{\\log_b a})$，则 $T(n)=\\Theta(n^{\\log_b a}\\log n)$。若 $f(n)=\\Omega(n^{\\log_b a+\\epsilon})$，其中 $\\epsilon&gt;0$，且对某个常数 $c&lt;1$，有 $af(n/b)\\leq cf(n)$，则 $T(n)=\\Theta(f(n))$。 Slides 10 最小覆盖This is the set cover problem. For each town x, let Sx be the set of towns within 30 miles of it. A school at x will essentially “cover” these other towns. How many sets Sx must be picked in order to cover all the towns in the county? Input: A set of elements B, sets S1, . . . , Sm ⊆ B Output: A selection of the S- whose union is B. Cost: Number of sets picked. A greedy solutionRepeat until all elements of B are covered: Pick the set S- with the largest number of uncovered elements. -&gt; optimal = $k$, greedy &lt;= $klnn$proof:$n_{t+1}&lt;=n_t-n_t/k$$n_t&lt;=n_t(1-1/k)^t$ Dynamic programmingDirected acyclic graphs可线性化图 Solutioninitialize all dist(·) values to ∞dist(s) = 0 for each v ∈ V \\ {s}, in linearized order do dist(v) = min(u,v)∈E {dist(u) + (u, v)} This algorithm is solving a collection of subproblems, \b {dist(u) | u ∈ V} 先修课排课 Longest increasing subsequencesfor j = 1 to n do L(j) = 1 + max {L(i) | (i, j) ∈ E}return max L(j) L(j) is the length of the longest path – the longest increasing subsequence – ending at j plus 1. Any path to node j must pass through one of its predecessors, and therefore L(j) is 1 plus the maximum L(·) value of these predecessors. If there are no edges into j, we take the maximum over the empty set, i.e., zero.The final answer is the largest L(j), since any ending position is allowed. 核心为问题分解 Edit distance字符串最小差 for - = 0 to m E(i, 0) = - for j = 1 to n E(0, j) = j for - = 1 to m for j = 1 to n E(i, j) = min(1 + E(- − 1, j), 1 + E(i, j − 1), diff(i, j) + E(- − 1, j − 1) )return E(m, n) The over running time is O(m · n). Slides11 Linear programmingLP function Interger linear programming! -&gt; an important but very hard problem variants of lp turn max to min -&gt; $\\times -1$ turn inequality to equation -&gt; $…+s = b, s &gt;= 0$ turn equality to inequality -&gt; $ax = b$ -&gt; $ax &lt;= b$ and $ax &gt;= b$ x is unrestricted -&gt; x+, x- &gt;= 0, replace x by x+-x- standartd form We can reduce any LP (maximization or minimization, with both inequalities and equations, and with both nonnegative and unrestricted variables) into an the variables are all nonnegative, the constraints are all equations, the objective function is to be minimized Flows in networksCapture the flow-increasing chances in: $c{uv} - f{uv}, \\,if (u,v) \\in E\\,and\\,f{uv} &lt; c{uv}$ $f{vu}, \\,if (v,u) \\in E\\,and\\,f{uv} &gt; 0$It proceeds in iterations, each time explicitly constructing $G_f$, finding a suitable s-t path in $G_f$ by using, say, a linear-time breadth-first search, and halting if there is no longer any such path along which flow can be increased. 就实现而言，相当于每次操作为： 找到一条s-t路径 取该路径的最大流量f 对该路径的每条边，更新管道流量为c-f，并为该边的反向边+f（如果不存在，则创建）直到出现可划分含s点的部分没有指向另一部分的边 Bipartite matchingThis matchmaking game can be reduced to the maximum-flow problem, and thereby to linear programming! Create a new source node s with outgoing edges to all the boys; a new sink node t with incoming edges from all the girls; and direct all the edges in the original bipartite graph from boy to girl. Finally, give every edge a capacity of 1 DualityZero-sum games$\\max {\\mathrm{x}} \\min {\\mathrm{y}} \\sum{i, j} G{i j} x{i} y{j}=\\min {\\mathbf{y}} \\max {\\mathrm{x}} \\sum{i, j} G{i j} x{i} y{j}$ The best each player can do is to play completely randomly, with an expected payoff of zero. if both play optimally, then it doesn’t hurt a player to announce his or her strategy in advance Slides12 Simplex algorithm基本思想：在不同的相邻交点间移动（线性规划的顶点定理：最值在交点和线段上取得） 从一个基本可行解开始，通过交替移动基变量和非基变量来逐步逼近最优解。每次移动的过程被称为一次迭代。在每次迭代中，选择一个非基变量作为入基变量，同时选择一个基变量作为出基变量。 通过一系列计算，得到一个新的基本可行解。 时间复杂度：At most (m+n)Cn ，其中n指n维向量空间，m指m个不等式约束 Postscript: circuit evaluation利用LP快速计算逻辑网 Slide 13 NP-Complete problems We will show that for some problems efficient algorithms are unlikely to exist Algorithms will be used to transform one problem to another （==reductions==）. Search problemsThe quest for efficient algorithms is about finding clever ways to bypass exhaustive search."},{"title":"现代操作系统2-CS2310","path":"/files/courseNotes/2022(2)/现代操作系统2.html","content":"Slides8 MemoryMMU relocation register CPU -(Logical Addr)&gt; MMU -(Physical Address)&gt; memory Memory ManagementContiguous memory allocation Multiple-partition allocation When a process arrives, it is allocated memory from a hole large enough to accommodate it Process exiting frees its partition, adjacent free partitions combined Operating system maintains information about: a) allocated partitions b) free partitions (hole)Dynamic Storage-Allocation Problem First-fit Best-fit Allocate the smallest hole that is big enough must search entire list, unless ordered by size Produces the smallest leftover hole Worst-fit SimilarlyFirst-fit &amp; best-fit better than worst-fit in terms of speed and storage utilization. Fragmentation External Fragmentation – total memory space exists to satisfy a request,but it is not contiguous Internal Fragmentation allocated memory may be slightly larger than requested memory; this size difference is memory internal to a partition, but not being used First fit analysis reveals that given N blocks allocated, another 0.5 N blocks lost to fragmentation 1/3 may be unusable -&gt; 50-percent rule A solution : Compaction -&gt; reduce external fragmentation shuffle memory possible only if relocation is dynamic, done at execution time Another solution : Permit noncontiguous memory allocation -&gt; paging &amp; segmentationNon-contiguous memory allocationDefination allow noncontiguous physical address space divide physical memory into fix-sized blocks —FRAMES size is power of 2, 512b - 16Mb keep track of all free frames divide logical memory into same sized blocks —PAGES to run a program of N pages -&gt; find N free frames maintain a page table to translate addresses(still have internal fragmentation)-&gt; P -&gt; F translatorImplement Address generated by CPU is divided into: Page number (p) used as an index into a page table, which contains base address of each page in physical memory Page offset (d) combined with base address to define the physicalmemory address that is sent to the memory unitPage table is kept in main memory Page-table base register (PTBR) points to the page table Page-table length register (PTLR) indicates size of the page table In this scheme every data/instruction access requires two memoryaccesses-&gt; associative memory or translation lookaside buffers (TLBs) hit -&gt; fast access miss -&gt; load to TLB Effective Access Time (EAT) Associative Lookup = ε time unit Hi ration = α EAT = (1 + ε) α + (2 + ε)(1 – α) Page table structureHierarchical Page Tables eg. 2-level paging table -&gt; forward-mapped page table 10-bit page num*2 + 12-bit offsetHashed Page TablesInverted Page TablesまとめHierarchical Page Tables，Hashed Page Tables和Inverted Page Tables都是操作系统中用于将虚拟地址映射到物理地址的数据结构。Hierarchical Page Tables是一种多层表，将虚拟地址分成多个部分，每个部分都有一个表。Hashed Page Tables是一种哈希页表，虚拟页号在虚拟地址中被哈希到哈希表中。Inverted Page Tables是一种全局页表，由操作系统维护，用于所有进程。在Inverted Page Tables中，条目数等于主存中的帧数。与传统的页表相比，Inverted Page Tables具有更小的内存占用，但查找时间更长。这些数据结构在许多操作系统中都有使用。例如，Linux使用了Inverted Page Tables，而Windows使用了Hierarchical Page Tables。Hashed Page Tables也被许多操作系统使用，例如FreeBSD和Solaris。SegmentationMemory-management scheme that supports user view of memoryLogical address consists of a two tuple: Segment table – maps two-dimensional physical addresses; each table entry has: base: contains the starting physical address where the segmentsreside in memory limit: specifies the length of the segment Segment-table base register (STBR) -&gt; segment table’s location in memory Segment-table length register (STLR) indicates number of segmentsused by a program; segment number s is legal if s &lt; STLRSlides9 Virtual Memory Virtual Address Space Enables sparse address spaces with holes left for growth, dynamically linked libraries, etc easily shared during fork() COW(Copy-on-write) Lazy Swapper (Pager) ：never swaps a page into memory unless page willbe needed Valid-Invalid Bit each table entry associates with a ~ bit V -&gt; memory resident ({address} v) , i -&gt; not-in-memory ({\\ i}) entry is i -&gt; page fault Page Fault if there is a reference to a page and the page is not in memory (i), thereference will trap to operating system Operating system looks at page table to decide: Invalid reference -&gt; abort / Just not in memory Get empty frame Swap page into frame via scheduled disk operation Reset tables to indicate page now in memory (Set validation bit = v) Restart the instruction that caused the page fault-&gt; what if there’s no Free Frame? Page replacementan algorithm which will result in minimum number of page faults Find the location of the desired page on disk Find a free frame: If there is a free frame, use it If there is no free frame, use a page replacement algorithm to select avictim frame Write victim frame to disk if dirty (Use modify (dirty) bit to reduce overhead of page transfers) Bring the desired page into the (newly) free frame; update the page andframe tables Continue the process by restarting the instruction that caused the trap How to choose ‘desired pages’ : Page-Replacement Algorithms FIFO Slides10 Mass-Storage SystemsDisk stucture -&gt; addressed as large 1-d arrays of logical blocks (smallest unit) The 1-dimensional array of logical blocks is mapped into the sectors of the disk sequentially Sector 0 is the first sector of the first track on the outermost cylinder Mapping proceeds in order through that track, then the rest of the tracks in that cylinder, and then through the rest of the cylinders from outermost to innermost Difficulty in mapping from logical to physical address: Except for bad sectors Non-constant # of sectors per track via constant angular velocityOverview of Mass Storage Structure Magnetic disks provide bulk of secondary storage of modern computers Drives rotate at 60 to 250 times per second Transfer rate is rate at which data flows between drive and computer Positioning time (random-access time) is time to move disk arm to desired cylinder (seek time) and time for desired sector to rotate under the disk head (rotational latency)Disk-Scheduling AlgorithmsIdle disk can immediately work on I/O request, busy disk means work mustbe queued (Optimization algorithms only make sense when a queue exists) FCFS按queue处理 SSTFShortest Seek Time First selects the request with the minimum seek time from the current head position (当前最近) SCANThe disk arm starts at one end of the disk, and moves toward the other end,servicing requests until it gets to the other end of the disk, where the headmovement is reversed and service continues. C-SCANThe head moves from one end of the disk to the other, servicing requests as it goes. When it reaches the other end, it immediately returns to the beginning of the disk, without servicing any requests on the return trip. C-LOOKSimilar to C-SCAN, but doesn’t reach the two ends.Arm only goes as far as the last request in each direction, then reverses direction immediately, without first going all the way to the end of the disk-》 in C-XXXX , arm services always occur in one direction. when they are moving are the opposite direction, they ‘immediately returns‘. SSD vs HDDNonvolatile memory devices disk-drive like -&gt; solid-state disks (SSD) (Other forms include USB drives (thumb drive, flash drive), DRAM stick, and main storage in devices like smartphones ) Storage capacity / price capacity: HDD usually &gt; SSD magnetic disks (HDD) hold much more data. price : SDD usually &gt; HDD (per MB) Reliability SSD &gt; HDD SSDs have no moving parts (like magnetic disks and read/write heads) -&gt;less possible to damage ==Lifespan== SSD &lt;&lt; HDD -&gt; SSD need to be carefully managed (storage units have a certain erasing and writing life) -&gt; disk management LET’S TALK ABOUT IT LATER Speed SSD &gt;&gt; HDD No moving parts, so no seek time or rotational latency Bus speed SSD requires a direct connection to a high-speed bus (such as PCI) for maximum performance (while HDDs are not subject to this limitation) ==Disk management== SSDs need to implement complex flash controller algorithms, such as garbage collection, wear leveling, etc., to manage storage space. HDDs, on the other hand, require low-level formatting (physical formatting) and logical formatting (logical formatting) to create file systems and deal with problems such as bad blocks. LET’S TALK ABOUT IT LATER ==Space management== In HDD, the file system usually uses clusters (簇) to manage disk space, and the size of the cluster is usually fixed. In SSD, due to the complexity of its internal data management method, the file system usually needs to adopt different space management strategies, such as TRIM command and garbage collection (Garbage Collection), etc., to maintain the performance and lifespan of SSD. LET’S TALK ABOUT IT LATERSpace &amp; Disk Management More About Clusters, Blocks and Tracks …HDD 簇（cluster）：簇是一组相邻的扇区（sector）的集合，是文件系统中的最小单位。 块（block）：块是磁盘上用于存储数据的逻辑单位，通常由多个扇区组成。块是文件系统管理磁盘空间的基本单位（读写数据的基本单位）。 磁道（track）：磁道是磁盘上的一个圆形轨道，由多个扇区组成。磁道是磁盘上进行数据读写的基本单位，磁头（head）在磁道上移动，可以读取或写入扇区中的数据。（只属于HDD的物理概念，SSD不存在这个概念）SSD 页（page）：页是SSD中最小的可读写单元，通常为4KB或8KB大小。 块（block）类似HHD。由多个页构成。为了增大擦除时一次性操作的块的大小延长寿命，在SSD中通常更大，通常为128KB或256KB大小。（理由后面细说） HDD -&gt; Dividing a disk into sectors that the disk controller can read and write Each sector can hold header information + data + error correction code (ECC) Usually 512b data but can be selectable OS needs to record its own data structures on the disk Part groups of cylinders, each treated as a logical disk Logical formatting or “making a file system” To increase efficiency most file systems group blocks into clusters Disk I/O done in blocks ; File I/O done in clusters Boot block initializes system The bootstrap is stored in ROM Bootstrap loader program stored in boot blocks of boot partition Methods such as sector sparing used to handle bad blocks MBR Boot code + partition table (contains pointer to boot partition) SSD Read and written in “page” increments (think sector) ==but can’t overwrite in place== Must first be erased, and erases happen in larger “block” increments 要修改或擦除一个页，需要先将整个块读取到内存中，然后进行修改或擦除，最后再将整个块写回SSD。(所以SSD的块常常比HHD大的多，以增大每次擦写的大小、减小擦写次数) Can only be erased a limited number of times before worn out ~ 100,000 Life span measured in drive writes per day (DWPD) A 1TB NAND drive with rating of 5DWPD is expected to have 5TB per day written within warrantee period without failing 块级别的操作对于SSD的性能和寿命管理是非常重要的。-》 NAND Flash Controller Algorithms With no overwrite, pages end up with mix of valid and invalid data. We need ways to manage them: flash translation layer (FTL) table (a part of NAND flash) Track which logical blocks are valid TRIM (a instruction involving SSD and OS) inform which logical blocks are invalid more flexibly and timely Garbage collection (GC) Allocates overprovisioning to provide working space for GC 垃圾回收是SSD内部的一种自动化操作，用于清理和整理闲置和无效的页。当文件被删除或修改时，SSD的页可能会变得闲置或无效，但这些页实际上仍然占据着宝贵的存储空间。垃圾回收操作会定期或在需要时将这些闲置和无效的页整理到一起，并执行擦除操作，以便可以重新分配给新的数据，从而提高SSD的存储效率。 Write Wear Leveling (均衡写入耗损) Each cell has lifespan, try to write equally to all cells 这可以通过在写入新数据时选择尽可能少使用写入次数较多的块，或将写入数据随机分布到多个块中来实现。 Disk Attachment Drive attached to computer via I/O bus Host controller in computer uses bus to talk to disk controller built into drive Busses vary (protocols vary) 接口协议规定了硬件设备之间的通信协议和通信方式，而数据总线BUS则是物理连接这些设备之间的通信通道。 including EIDE, ATA, SATA, USB, SCSI, Fiber Channel, SAS, Firewire… 家用计算机的CPU多使用PCI、SATA等接口协议，FC更多用于企业计算机和数据中心环境。 SCSI（Small Computer System Interface） 过去比较常见 a bus, up to 16 devices on one cable SCSI initiator 发起器 requests operation 发送操作请求 and SCSI targets 目标设备 perform tasks Each target can have up to 8 logical units (disks attached to device controller) FC （Fiber Channel） 光纤通道 a high-speed serial architecture Can be switched fabric with 24-bit address space – the basis of storage area networks (SANs 存储区域网络) in which many hosts attach to many storage units 通常用于需要大规模存储和高速数据传输的应用场景 RAID Redundant Arrays of Independent Disks (RAIDs) RAID– multiple disk drives provides reliability via redundancy Mirroring ( -&gt; a second copy) duplicate every disk Parity bit ( -&gt; error-correcting bit) Parallel access to multiple disk improves performance Bit-level striping split the bits of each byte across multiple disks block-level striping blocks of a file are striped across multiple disks RAID is arranged into seven or more different levels RAID 6: P + Q redundancy Reed-Solomon codes 2 bits of redundant data are stored for every 4 bits of data 在RAID6中，数据被分布式地存储在多个磁盘驱动器中，同时通过计算奇偶校验信息对数据进行冗余存储。RAID6采用两个奇偶校验盘（P和Q盘）来存储奇偶校验信息，从而实现了对两个磁盘驱动器的故障容忍。 交织分布奇偶校验（如RAID 5）和复制（如RAID 1）是两种不同的数据保护策略，它们在数据存储和容错方式上有以下区别： 存储方式：交织分布奇偶校验将奇偶校验信息分布存储在多个数据盘中，与原始数据分散存储在不同的盘上，从而实现数据和奇偶校验信息的分离存储。而复制方式则是将数据完全复制到多个独立的盘上，从而实现数据的冗余存储。 存储效率：交织分布奇偶校验在存储效率方面较为高效，因为它只需要使用一个额外的奇偶校验盘来存储校验信息，而原始数据可以充分利用所有的数据盘进行存储，从而提供了较高的存储容量。而复制方式则需要将数据完全复制到多个盘上，因此存储效率较低，通常只能提供50%的存储容量。 容错能力：交织分布奇偶校验和复制方式在容错能力上有所不同。交织分布奇偶校验可以容忍单个数据盘的故障，通过从其他数据盘和奇偶校验盘中恢复数据。而复制方式可以容忍多个数据盘的故障，因为数据被完全复制到多个盘上，只要其中一个副本可用，数据就可以被访问。 性能：交织分布奇偶校验和复制方式在性能方面也有所不同。交织分布奇偶校验在读性能上通常比较高，因为可以并行地从多个数据盘读取数据。但在写性能上可能受到奇偶校验盘的限制，因为写操作需要同时更新数据和奇偶校验信息。而复制方式在读性能上可能较低，因为需要从多个副本中选择一个进行读取，但在写性能上通常较高，因为数据只需要写入一个副本。 假设有一个包含4个数据盘和1个奇偶校验盘的RAID 5阵列，其中数据盘分别标记为D1、D2、D3、D4，奇偶校验盘标记为P。当一个数据盘出现故障时，可以通过从其他数据盘和奇偶校验盘中恢复数据。例如，当D2数据盘出现故障时，需要从其他数据盘和奇偶校验盘中恢复D2上的数据。RAID 5使用异或（XOR）运算来生成奇偶校验信息，该运算具有可逆性，可以用于数据恢复。假设D1、D3和D4上的数据分别为A、B和C，而P上的奇偶校验信息为A XOR B XOR C。现在需要恢复D2上的数据B，可以通过执行以下步骤： 从D1、D3和D4中读取对应位置上的数据，得到A、B和C的值。 从奇偶校验盘P中读取对应位置上的奇偶校验信息，得到A XOR B XOR C的值。 通过对已知的A、B和C的值以及A XOR B XOR C的值执行异或运算，即 (A XOR B XOR C) XOR (A XOR C) = B，得到D2上的数据B的值。 将得到的B的值写入到替换后的新数据盘D2上，完成数据恢复。 这样，通过从其他数据盘和奇偶校验盘中恢复数据，可以在某个数据盘出现故障时保护数据的完整性，并维持RAID 5阵列的可靠性和可用性。 Network-Attached Storage Network-attached storage (NAS) is storage made available over a network rather than over a local connection (such as a bus) Remotely attaching to file systems Implemented via remote procedure calls (RPCs) between host and storage over typically TCP or UDP on IP network iSCSI protocol uses IP network to carry the SCSI protocol Remotely attaching to devices (blocks) -&gt; virtual disks Storage Area Network（SAN）存储区域网络 - Common in large storage environments - Multiple hosts attached to multiple storage arrays - flexible - use high-speed buses，like Fibre Channel or iSCSI Slides11 File SystemFileA file is a named collection of related information that is recorded onsecondary storage. Attributes Name Identifier - unique tag(num) identifies file within file sys Type Text Source/object programs Executable programs Database records Graphic images Multimedia Location pointer to file location on device Size Protection controls who can do reading, writing, executing Time, Date, User identification Information about files are kept in the directory structure, which ismaintained on the disk File operations Create Write Read Reposition within file Delete Truncate The other operations can be implemented by the primitive ones. Open filesSeveral pieces of data are needed to manage open files. Open-file table tracks open files File pointer pointer to last read/write location, per process that has the file open File-open count counter of number of times a file is opened allow removal of data from open-file table when last process closes it Disk location of the file stores data access information Access rights provides per-process access mode information Protection: decide access rights File owner/creator should be able to control: what can be done by whom Types of access Read Write Execute Append Delete List Three classes of users owner, group, public (in unix/linux)（windows: owner, group, others -&gt; different names) you can define the right by: chgrp G game g is a unique group name, you attach it to the file chmod 761 game 7 for owner, 6 for group, 1 for public Access methods Sequential access read/write next reset Direct access read/write n (n = relative block/byte number) position to n read/write next Disk Structure Disk can be subdivided into partitions 分区 (minidisks, slices) Disks/partitions can be RAID protected against failure Disks/partitions can be used raw raw: without a file system, or formatted with a file system Entity 实体 containing file system known as a volume 卷 Each volume tracks file system’s info in device directory 设备目录 or volume table of contents 卷目录 File DirectoryOrganize the Directory (Logically) to Obtain Efficiency – locating a file quickly Naming – convenient to users Two users can have same name for different files The same file can have several different names Grouping – logical grouping of files by properties, (e.g., all Java programs, all games, …) Single-Level Directory A single directory for all users Efficiency problem Naming problem Protection of users’ private files Grouping problem Two-Level Directory Separate directory for each user Can have the same file name for different user A little bit more efficient searching Path name No grouping capability Tree-Stuctured DirectoryAcyclic-Graph Directories Have shared subdirectories and files** Two different names (aliasing) New directory entry type Link – another name (pointer) to an existing file Resolve the link – follow pointer to locate the file If dict deletes count -&gt; dangling pointer Solutions Backpointers, so we can delete all pointers Entry-hold-count solution General Graph Directory File Allocation MethodsAn allocation method refers to how disk blocks are allocated for files Contiguous allocation Linked allocation Indexed allocation Contiguous Allocation 连续分配 each file occupies a set of contiguous blocks Simple starting location (block #) length (number of blocks) Best performance in most cases Problems： Finding space for file Knowing file size External fragmentation 外部碎片 need for compaction off-line (downtime) or on-line 需要离线（停机）整理碎片 Linked AllocationEach file is a linked list of disk blocks: blocks may be scatteredanywhere on the disk each file is a linked list of blocks Each block a pointer to next block file ends at nil pointer No external fragmentation Free space management system called when new block needed Improve efficiency by clustering blocks into groups but increases internal fragmentation Problem Reliability Locating a block can take many I/Os and disk seeks File-Allocation Table (FAT) Beginning of volume has a table, indexed by block number Records allocation information and status of file blocks or clusters Occupied Uses a linked list structure to link the occupied file blocks or clusters Unallocated Marked with corresponding status flags Much like a linked list, but faster on disk and cacheable New block allocation simple DOS / Windows FAT vs linked allocation 存储方式 FAT文件系统 将整个文件的分配情况记录在文件分配表中 一次性读取整个文件的所有文件块地址到队列中，从而更好地进行访问规划 这对于机械硬盘等需要顺序访问且对等待队列的优化敏感的存储设备来说尤为重要 链式分配文件系统 逐个读取文件块，并且每个文件块只记录下一个文件块的位置信息。 需要不断地从磁盘读取下一个文件块的位置 如何找空格子 都需要遍历获取已占用的格子的信息 FAT：查询文件分配表直到找到未分配的块 linked allocation：从文件系统的起始位置开始，沿着链表遍历已占用的文件块，直到找到一个未占用的文件块 这时，FAT就显著比linked allocation快 Indexed AllocationEach file has its own index block(s) of pointers to its data blocks Random access Without external fragmentation Need index table I-node management I-nodes have limited size, so we need mutiple I-nodes linked -&gt; EXAMPLE Suppose a file system is constructed using blocks of 32 bytes. A pointer needs 4 bytes. The I-node structure is as follows (word, value): num content # 0 permission word 1 direct block linked to content directly 2 direct block 3 direct block 4 direct block 5 direct block 6 single-indirect linked to another block 7 double-indirect linked to a block which each 8 bytes points to a such unit Assume that free blocks are allocated in logical order starting with block 11. Also it has been determined that blocks 17 and 32 are bad and cannot be allocated. - Draw a block diagram showing the structure of the I-node and the blocks that are allocated for Original file size of 3 blocks (IN THE 1ST NODE) Adding 4 blocks (single-indirect is enough) Adding 17 blocks (need double-indirect) 3+4blocks (4 in first I-node and 3 in single-indirect) 3+4+17blocks (4 in first I-node, 8 in single-indirect,11 in double-indirect ) QuizSuppose a file system is constructed using blocks of 32 bytes. A pointerneeds 4 bytes. The I-node structure is as follows (word, value):num|content—|—0|permission word1|file size2|direct block3|direct block4|direct block5|single-indirect6|double-indirect7|triple-indirect Assume that free blocks are allocated in logical order starting with block 100. Also it has been determined that blocks 107, 108, 109, and 112 are bad and cannot be allocated. Draw a block diagram showing the structure of the I-node and the blocks that are allocated for Original file size of 3 blocks Adding 7 blocks Adding 24 blocks Adding 64 blocks Slides12 I/O SystemI/O Hardware Incredible variety of I/O devices Storage devices (disks, tapes) Transmission devices (network interface, Bluetooth) Human-interface devices (screen, keyboard, mouse, audio in and out) Common concepts – signals from I/O devices interface with computer Port 端口 connection point for device Bus – a set of wires and a strictly defined protocol Daisy chain 链式连接 （PC -&gt; device A -&gt; device B -&gt; device C…) Shared direct access 共享直接访问 I/O设备共用数据总线 Controller (host adapter 主机适配器) electronics that operate port, bus, device PCIE example Hardware structure registers place data/addr/commands Addressing &amp; instruction system Memory mapped I/O share address space with computer’s memory r/w I/O just like memory no special commands Isolated I/O seperate address space need I/O &amp; memory select lines special commands (以下段落内容与计算机组成重复) I/O systemwhen cpu issues I/O request, cpu may have to wait for response? (low efficiency) -&gt; INTERRUPTS -&gt; use interrupt handler to free cpu Checked by processor after each instruction Interrupt handler receives interrupts Nonmaskable reserved for events such as unrecoverable memory errors Maskable can be ignored or delayed, for device controllers to request service Interrupt vector to dispatch interrupt to correct handler Context switch at start and end Interrupt chaining Based on priority Programmed I/Othe CPU directly controls I/O hardwareCpu: issues request continuously check response read and write Interrupt-Driven I/Ofree CPU from I/O event Cpu: issue request be interrupted when I/O module is ok check read status and read, and write to memory Direct Memory Access (DMA)free CPU from I/O event &amp; data writing Cpu: tells DMA the request DMA interrupts Cpu when OK, and tells Cpu Interactionwith I/O Device Programmed I/O Interrupt-Driven I/O Direct Memory Access waiting for the device software(instructions on cpu) hardware hardware transfer device data to mem software software hardware Slides13 Virtual MachinesOverview Fundamental idea abstract hardware of a single computer into several different execution environments Similar to layered approach But layer creates virtual system (virtual machine, or VM) on which operation systems or applications can run Several components Host 宿主机 underlying hardware system where VM runs Virtual machine manager (VMM) 虚拟机管理器 / hypervisor (hyper-V) 虚拟化监控程序 creates and runs virtual machines by providing interface that is identical to the host (except in the case of paravirtualization 部分虚拟化) Guest 客户机 process provided with virtual copy 虚拟副本 of the host usually an operating system Single physical machine can run multiple operating systems concurrently 同时, each in its own virtual machine Slides14 Distributed System StructuresSlides15 Distributed System Systems"},{"title":"现代操作系统CS2310 （附）虚拟机和分布式","path":"/files/courseNotes/2022(2)/现代操作系统3.html","content":"虚拟机Overview Fundamental idea abstract hardware of a single computer into several different execution environments Similar to layered approach But layer creates virtual system (virtual machine, or VM) on which operation systems or applications can run Several components Host 宿主机 underlying hardware system where VM runs Virtual machine manager (VMM) 虚拟机管理器 / hypervisor (hyper-V) 虚拟化监控程序 creates and runs virtual machines by providing interface that is identical to the host (except in the case of paravirtualization 部分虚拟化) Guest 客户机 process provided with virtual copy 虚拟副本 of the host usually an operating system Single physical machine can run multiple operating systems concurrently 同时, each in its own virtual machine 分布式系统 Distributed System分布式系统结构Motivation 动机在分布式系统中，多个计算机节点（node）协同工作以完成某项任务。这种方式比单个计算机处理大规模问题更高效。因此，分布式系统在大规模计算和数据处理方面有着广泛的应用。 分布式系统是由松散耦合的处理器通过通信网络相互连接而成的集合。 处理器 也称为节点/计算机/机器/主机等 站点 Site 指处理器的位置 好处 资源共享 Resource sharing 在远程站点共享和打印文件 在分布式数据库中处理信息 使用远程专用硬件设备 计算速度提升 Computation speedup 负载均衡 load sharing 可靠性 检测和从站点故障中恢复，功能转移，重新整合失败的站点 通信 消息传递 Example 中心的格子代表整个网络，表示分布式系统的总体框架 三类站点接入网络 Site A “server” 站点上有一个服务器 它可以为其他站点提供服务 Site B “client” 站点上有一个客户端 它可以向服务器请求服务 Site A 和 Site B 可以互相通信。 Site C “resources” 有一些资源，如硬件设备、数据库等 Site C 与其他站点没有直接的连接，但可以通过网络来访问其中的资源 网络操作系统 vs 分布式操作系统网络操作系统主要是为了方便用户在多个计算机之间进行远程访问和操作，而分布式操作系统则是整合了多个计算机的系统资源，让它们像一个系统一样工作，能够实现负载均衡、资源共享、容错等功能。两者的目标和实现方式都有很大的差异。 网络操作系统 用户知道有多个计算机。显式地访问不同计算机的资源，可以通过以下方式实现： 远程登录到适当的远程计算机（telnet、ssh） 远程桌面（Microsoft Windows） 通过文件传输协议（FTP）机制从远程计算机传输数据到本地计算机 分布式操作系统 用户不知道有多个计算机 访问远程资源类似于访问本地资源 数据迁移 通过传输整个文件或仅传输立即任务所需的文件部分来传输数据 计算迁移 在系统中传输计算而不是数据 进程迁移 在不同站点执行整个进程或进程的部分 负载平衡 在网络中分配进程以平衡工作负载 计算加速 子进程可以在不同站点同时运行 硬件优先 进程执行可能需要专门的处理器 软件优先 所需软件可能仅在特定站点可用 数据访问 在不同站点运行进程时，访问相应数据的方法可能不同 Network Structure 网络结构（从这里开始全是计算机网络的课程内容……不愧是你SJTU（。。。）） 本地区域网络 Local-Area Network（LAN） 设计用于覆盖小范围地理区域。 多路访问总线、环形或星形网络 速度约为10-100兆比特/秒，甚至千兆比特/秒 广播快速且便宜 节点 通常是工作站和/或个人计算机 几个（通常是一个或两个）大型机 广域网 Wide-Area Network（ WAN） 链接地理上分离的站点 通过远距离线路进行点对点连接（通常是从电话公司租用） 速度约为1.544-45兆比特/秒 广播通常需要多个消息 节点 通常有高比例的大型机 mainframes 网络拓扑 Network Topology网络拓扑结构 系统中的站点可以以多种方式进行物理连接，可以根据以下标准进行比较： 安装成本 - 将系统中的各个站点连接起来的成本有多高？ 通信成本 - 从站点A发送消息到站点B需要多长时间？ 可靠性 - 如果系统中的链接或站点发生故障，是否仍然可以相互通信？ 不同的拓扑结构可用图形表示，其节点对应于站点 从节点A到节点B的边缘对应于两个站点之间的直接连接 分布式系统需要一个底层的网络基础架构来支持节点间的通信。网络结构包括网络硬件和软件组件。 Network Topology（网络拓扑） 网络拓扑指的是计算机网络中连接节点的方式。常见的网络拓扑包括总线、环、星型、树形、网状等。 Communication Structure（通信结构） 通信结构是指节点间数据传输的方式。常见的通信结构包括客户端-服务器结构、对等结构、多播结构等。 Communication Protocols（通信协议） 通信协议是指节点间通信所遵循的规则。常见的通信协议包括TCP/IP协议、HTTP协议、FTP协议等。 Robustness（健壮性） 分布式系统需要具备健壮性，即在节点故障、网络故障等不可避免的情况下能够继续运行。为实现健壮性，分布式系统需要具备一些特性，例如冗余、容错性等。 Design Issues（设计问题） 设计分布式系统时需要考虑一些问题，例如数据一致性、同步、并发等。 An Example: Networking（案例：网络） 网络是一个典型的分布式系统，它由多个节点组成，并通过网络协议实现节点间通信。网络的设计需要考虑节点的安全性、带宽管理等问题。 分布式文件系统基础DFS 的结构是由服务、服务器和客户端三个组成部分构成的，其中客户端接口应该是透明的，使得用户可以像访问本地文件一样访问远程文件，提高了文件共享和管理的效率。 Service 运行在一个或多个计算机上的软件实体，向预先未知的客户端提供特定类型的功能。 Server运行在单个计算机上的服务软件，负责提供服务。 Client可以使用一组操作调用服务的进程，形成客户端接口 Client interface。对于文件服务的客户端接口由一组原始文件操作（创建、删除、读取、写入等）组成。 DFS 的客户端接口应该是透明 transparent的，即不应区分本地文件和远程文件。 指用户可以像访问本地文件一样访问远程文件，而不必关心文件实际存储在在哪个服务器、哪个位置。 通过透明的 DFS，用户可以访问整个分布式系统中的文件，而不必关心它们存储在哪里。 DFS 通常由多个服务器组成，这些服务器分别处理文件存储和管理、数据备份、安全性、性能等方面的任务。此外，DFS 还支持数据冗余和备份，以提高系统的可靠性和容错性。 命名 Naming定义：逻辑对象与物理对象之间的映射关系 mapping -&gt; 多级映射 Multilevel mapping 对文件的抽象隐藏了文件实际存储在磁盘上的细节 因此需要实现： 从名称到标识符Name to identifier， 从标识符到块和位置 Identifier to blocks and locations (inode)的映射 对于一个文件存在多个副本的情况，映射将变得更加复杂 对于在多个站点复制的文件，映射会返回该文件副本的位置集合，多个副本的存在以及它们的位置都是被隐藏的。 命名结构目标 位置透明性 Location transparency 文件名不揭示文件的物理存储位置 （用户不需要知道文件存储在哪个服务器上，就能通过文件名来访问该文件） 位置独立性 Location independence 文件名不需要在文件的物理存储位置发生变化时进行更改 （用户在访问文件时，不受文件实际存储位置的影响） 命名方法 &lt;主机名,本地名&gt; 保证了唯一的系统范围内名称 不支持位置独立性&amp;位置透明性。 目录树 directory tree 将远程目录附加到本地目录构成连贯的目录树 只有已经挂载的远程目录可以被透明地访问 UNIX 组件文件系统的完全集成 total integration of the component file systems 一个全局名称结构跨越系统中的所有文件 如果某个服务器不可用，某些不同机器上的目录也会变得不可用 比较复杂，支持位置独立性和位置透明性 AFS 远程文件访问与缓存Remote File Access &amp; Cache 可以通过远程过程调用（RPC）支持远程文件访问 缓存 在缓存中保留最近访问的磁盘块处理重复访问相同信息 如果需要的数据不在缓存中，从服务器端获取一份数据的副本，然后在缓存副本上执行访问操作 文件有一个主副本存储在服务器上，但文件的（部分）副本分散在不同的缓存中 缓存一致性问题 Cache-consistency problem 保持缓存副本与主文件的一致性-&gt; 这种远程文件访问机制有时也被称为网络虚拟内存 使用磁盘/主存进行缓存？ 磁盘 可靠 恢复期间，缓存的数据仍保留在磁盘上，无需再次获取 主存 允许工作站无磁盘，节省成本 数据访问更快 更大的内存可以提高性能 服务器缓存通常在主存中，不管用户缓存的位置在哪里，使用主存缓存可以为服务器和用户提供单一的缓存机制 缓存更新策略 Cache Update Policy 写穿（Write-through） 将数据放置在任何缓存中后立即通过到磁盘上 可靠性高，但性能差 延迟写（Delayed-write 或 Write Back） 修改写入缓存，稍后再写入服务器 写入操作快速完成，但有些数据可能在写回之前被覆盖，因此根本不需要写回 可靠性差；未写入的数据将在用户机器崩溃时丢失 变体1：定期扫描缓存，并刷新自上次扫描以来已被修改的块 变体2：在关闭文件时写回，将数据写回服务器 对于长时间打开且经常修改的文件最佳 AFS 一致性 Consistency本地缓存的数据是否与主副本一致？ 客户端主动检查 Client-initiated approach 客户端启动有效性检查 服务器检查本地数据是否与主副本一致 有效性检查validity check和访问性能access performance之间进行权衡 服务器主动检查Server-initiated approach 服务器为每个客户端记录（部分）它缓存的文件 当服务器检测到潜在的不一致时，必须采取措施 缓存和远程服务机制比较 缓存机制能够高效地处理许多远程访问，因为本地缓存可以快速响应大多数远程访问，而仅偶尔需要访问服务器。 可以减少服务器负载和网络流量。 可以提高可扩展性。 远程服务机制需要处理每一个远程访问，导致网络流量、服务器负载和性能开销的增加。 在缓存中，对于写访问较少的情况下表现更好。 频繁写操作会导致解决缓存一致性问题的重大开销。 在具有本地磁盘或大容量主存储器的机器上执行时，可以从缓存中受益。 对于无磁盘、小内存容量机器上的远程访问，应该使用远程服务方法。 在缓存中，较低层的机器接口与上层用户接口不同。 在远程服务中，机器接口反映了本地用户文件系统接口。 Stateful File Service 状态文件服务 状态服务机制 客户端打开一个文件 服务器从其磁盘中获取有关文件的信息，将其存储在内存中，并为客户端提供对于客户端和打开文件唯一的连接标识符 标识符在之后的访问中使用，直到会话结束 服务器必须收回不再活动的客户端使用的主存空间 性能 较少的磁盘访问 状态服务器知道文件是否以顺序访问的方式打开，因此可以预读下一个块 无状态文件服务器 Stateless File Server 通过使每个请求自包含避免状态信息 每个请求标识文件和文件位置 无需通过打开和关闭操作建立和终止连接 区别 失败恢复 有状态的服务器在崩溃时会失去所有易失性状态 通过基于与客户端对话的恢复协议恢复状态，或中止崩溃发生时正在进行的操作 服务器需要知道客户端故障，以便回收为记录崩溃客户端进程状态而分配的空间（孤儿检测和消除） 使用无状态服务器，服务器失败和恢复的影响几乎是不可察觉的 新的重生服务器可以回答自包含请求而无需任何困难 使用健壮的无状态服务的惩罚 较长的请求消息 较慢的请求处理 对 DFS 设计施加额外的限制 某些环境需要状态服务 使用服务器发起的缓存验证的服务器无法提供无状态服务，因为它维护记录哪个客户端缓存了哪个文件的记录 UNIX 使用文件描述符和隐式偏移是固有的有状态的；服务器必须维护映射文件描述符到 inode 的表，并存储文件中的当前偏移量 文件复制 File Replication 同一文件的副本存储在相互独立的机器上 提高可用性并缩短服务时间 命名方案 将复制文件名映射到特定副本 复制的存在对上层不可见 副本必须通过不同的低级名称互相区分 但有时候为了性能目的，文件复制机制对用户是可见的，如Lucas 更新 文件的副本表示同一逻辑实体 对任何副本的更新必须反映在所有其他副本上 需求复制 Demand replication 读取非本地副本会导致它在本地缓存，从而生成新的非主副本"},{"title":"计算机系统结构-CS2305","path":"/files/courseNotes/2022(2)/计算机系统结构.html","content":"数表示整数正/反/补补：取反+1（负数比整数多一个） sign/unsigned$[x] = x \\ge 0 \\, ? \\, x : (2^{n+1} + x)$$[x+y] = [x] + [y]$ 位&amp;|^~ 扩展0扩展/符号位扩展 截断int i = 32768; // 0x00008000hshort si = (short) i; // 0x8000hint j = si; // 0xFFFF8000H -32768 左移 sll 抛弃最高位 可能发生溢出 右移 逻辑右移：左补0 srl 算术右移：左补符号 sra 溢出 符号位：{+} + {+} -&gt; {-} ，{-} + {-} -&gt; {+} CarryIn[N-1] XOR CarryOut[N-1] 整数乘法 乘一位左移一位 模拟手算 不存在==补码乘法== 原码乘法器（先转原码，乘算，再转补码） Booth算法 原理：将乘法转换为对2^n的加法、 C语言：抛弃前w位，保留后w位 无论2个w位数字表示无符号数还是补码，截断后得到的w位竭股肱都是在正确的 无符号乘法和有符号乘法共用乘法部件 移位等效：$u &lt;&lt; k$ 总等效于 $u \\times 2^k$ 对无符号和有符号数都有效 速度快，编译器会自动优化 溢出防范 int x,y; x = 65535; // 0000 FFFFHy = x * x; // FFFE 0001H -&gt; -131071 int ele_cnt = 2^20 + 1, ele_size = 4096 = 2^12;int* array = (int*) malloc(ele_cnt * ele_size); // ans = 2^12 溢出 小数浮点数的表示S + E + M （规格化位0.1xxxx） $N = (-1)^S \\times M \\times R^E$ S 符号位 - 正负 M 尾数 - 纯小数 E 阶数 （浮点数的指数） 是整数 计算机二进制取基R = 2 13.125 = 0.1101001 * 2^100 阶码多 -&gt; 范围大，尾数多 -&gt; 精度高 16位浮点 4位阶码+12位尾数含符号位 IEEE754浮点数$(-1)^s \\times 1.m \\times 2^{e-127}$ 规格化为1.xxxx，把1缺省存储，尾数范围加一位 float32: 约7位decimal小数（24尾数位） $2\\times 10^{-38} &lt; N &lt; 2.0 \\times 10^{38}$ double64: 约15位decimal小数（53尾数位） $2\\times 10^{-308} &lt; N &lt; 2.0 \\times 10^{308}$ 先比较符号位，负数符号位是1，之后可以和unsigned integer一样比较大小 计算： 对阶 尾数相加 规格化检查 舍入 溢出检测 浮点运算不是精确的 和大很多的数相加的时候会丢失比较小的数（可表示尾数的位数有限） （对阶时阶码差的绝对值&gt;25） 舍入 最近 判断后面的位数构成的数是否&gt;100…0 ？ 负向 &lt;- 截断 朝0 double/float -&gt; int 可能溢出 发生0方向舍入 (int)3.3/1.1 = 2 不要用\\==判断，而是fabs(3.0-a)&gt;0.00001 数据存储大/小数端 大：最低字节存储在高地址*这种存储是以字节单位的 字对齐 对齐/非对齐 MIPS基础Mips指令结构 结构 注释 #注释 .* .data:.word:.text: 寄存器0 $zero 常量0 （The Constant Value 0） 1 $at 汇编器临时变量 [a]temp2-3 $v0-$v1 函数返回结果、表达式值 value returned [0-1]4-7 $a0-$a3 函数调用时传递的参数 arguments [0-3] 8-15 $t0-$t7 临时变量 Temporaries [0-9]16-23* $s0-$s7 需要保存的临时变量 [Save]Temp [0-7]24-25 $t8-$t9 临时变量 Temporaries26-27 $k0-$k1 为操作系统内核保留 [Kernel]Temp [0-1] 28 $gp 全局指针 Global Pointer29 $sp 栈指针 Stack Pointer30* $fp 结构指针/桢指针 Frame Pointer 31* $ra 返回地址 Return Address # 常常用来存储code段指令地址以供函数等返回 寄存器使用规范 被调用函数应该保存的： GP SP FP（指针28-30，RA不保存） S0-S7 需要保存的临时变量 由主调函数保存的： a1-a3 参数寄存器 （arguments） ra t0-t9 临时寄存器 基础指令不含立即数（R Type）{operation} {value}, {operand1}, {operand2(if exists)} 含立即数（I Type）{operation} {value}, (%immediate){operand} 状态转移 (J Type){operation} {target} 赋取值(I - Type)lw — load wordsw — save word 算术加 add addi —int addu —unsigned int addui —unsigned + immediate 减 sub, subu 与/或/或非 and, andi or, ori nor 左/右移 (R) sll —shift left logic srl eg. sll $t2, $s0, 8 （逻辑移位，空出位置清零） Go Tobne — go to if not equalbeq — go to if equal J %PC’ or {Label}JR {$x} JAL %PC’ or {Label} 转移并链接 Jump and link 将下一条指令的地址,即PC+4保存在寄存器 $ra 中，从而当过程返回时可以链接到当前指令的下一条指令。 伪指令* only the assembler gets to use $at subu {}, {}, {}mov {dst},{src}la dst,label (load address)li dst, imm (load immediate) 堆栈利用$SP完成 addi $sp, $sp, -4 # 移动指针 （push s0）sw $s0, 0($sp) # S0入栈(保存s0的值)add $t0, $a0, $a1 # t0 = a0 + a1add $t1, $a2, $a3 sub $s0, $t0, $t1add $v0, $s0, $zero # MOV v0 s0lw $s0, 0($sp) # 恢复s0addi $sp, $sp, 4 # 恢复栈顶指针 （pop s0）jr $ra int f; f = (g + h) - (i + j); return f; 处理器设计设计处理器的五个步骤 分析指令系统，得出对数据通路的需求 选择数据通路上合适的组件 连接组件构成数据通路 分析每一条指令的实现，以确定控制信号 集成控制信号，完成控制逻辑 单周期处理器基本元件 读状态单元的内容-&gt; 通过组合逻辑电路实现指令的功能-&gt; 将结果写入一个或多个状态单元 每周期更新一次状态单元，是否更新需要显式信号寄存器、存储器在时钟边沿来到、写允许信号有效时更新状态（下一个周期写入） 状态单元：寄存器文件 CLK（时钟输入）：时钟边沿触发状态转换 32个寄存器 两个32位输出： busA 、 busB 一个32位输入： busW 寄存器选通 RA（5位）：选通RA指定的寄存器 RB （5位）：选通RB指定的寄存器 读操作，看做一个组合电路模块的实现 RA 、 RB 有效 =&gt; busA 、 busB 有效 RW（5位）： 选通Rw指定的寄存器 写操作： CLK边沿触发 当Write Enable 为1时，将busW 端口上的数据写入Rw指定的寄存器 状态单元：存储器 时钟输入 (CLK) 改变存储器状态需要时钟边沿触发 存储器总线 32位数据输入总线: Data In 32位数据输出总线: Data Out 读写操作 读操作，看做一个组合电路模块的实现 一定时间内完成从“地址信号有效” （Address） =&gt;“数据输出” Data Out 写操作：时序电路 CLK边沿触发 Write Enable = 1: 将Data In的输入写入Address选中的那个字 数据通路上的其它单元组合逻辑单元 32位加法器 3-8译码器 ALU 多路选择器 MUX 数据通路连接取指令 收到CLK信号 -&gt;把PC值发送给指令存储器 -&gt;把PC值发送给加法器，加法器将发出PC+4信号 这个信号可能接入其它组件，最后输入寄存器的并不一定是PC+4 指令译码 读寄存器 指令中的寄存器地址连接到RA和RB 从寄存器文件读，输出到BusA和BusB 控制信号 信号名称 无效(=0)时的作用 有效(=1)时的作用 RegDst 写寄存器在寄存器文件中的目标寄存器的编号来自于rt字段 写寄存器在寄存器文件中的目标寄存器的编号来自于rd字段 RegWrite 无 写数据输入的值，写入到目标寄存器编号（rt或者rd）选择的通用寄存器 ALUSrc ALU的第二个操作数来自于寄存器 ALU的第二个操作数来自于立即数 MemWrite 无 将地址输入指定位置的存储器内容替换为写数据输入的值 MemtoReg 送往寄存器文件写数据输入的值来自于ALU的输出 送往寄存器文件写数据输入的值来自于数据存储器的输出 ExtOP 16位立即数零扩展到32位 16位立即数带符号扩展到32位 Branch 选择PC+4作为PC输入端 是一条应该转移的分支指令 Jump 不选择Jump目标地址，而是选择PC+4或者条件转移目标地址，作为PC输入端 是一条应该转移的分支指令，选择Jump目标地址作为PC输入端 相关性与冒险冒险： 结构冒险 硬件资源相关性 数据冒险 数据依赖性 控制冒险 转移指令引起，需要根据指令的结果决定下一步 结构冒险指令和数据 方案1：插入空指令 方案2：指令存储器和数据存储器相互独立 寄存器文件的读写设置相互独立的读写口，写在前半周期完成，读在后半周期完成 数据冒险写后读数据冒险 需要修改目标寄存器内容，尚未写入，而新指令需要读取该寄存器 “读存储器-使用 ” 冒险 目标寄存器需要读入内容，尚未写入，而新指令需要读取该寄存器 软件解决：插入空指令 硬件解决：流水线停顿前向传递（forwarding） 不等写回寄存器，就将产生的结果直接传送到当前周期需要结果的功能单元 (例如： ALU)的输入端 不能解决读存储器冒险 需要一个周期停顿（等待读取指令完成DM） 控制冒险流水线遇到分支（转移）指令和其它改变PC值的指令时，会引起流水线的停顿例如无条件转移（j, jal, jr) 和 条件转移 (beq, bne) Jump: flush 清空IF/ID段中的指令 转移控制槽（编译器和处理器的约定） -&gt; 解决方案：转移预测静态：程序执行前预测 动态：程序执行时预测 高速缓存CPU register -&gt; [SRAM -&gt; DRAM] ==内存== -&gt; [SSD -&gt; 磁盘/光盘] ==外存== cache 存储器（ Cache memories ） 在处理器附近增加一个小容量快速存储器(cache) 基于SRAM，由硬件自动管理 cache基本思想: 频繁访问的数据块存储在cache中 CPU 首先在cache中查找想访问的数据，而不是直接访问主存 我们希望被访问数据存放在cache中 局部性原理 locality 时间局部性 最近访问的项目，在不久的将来将会被访问 空间局部性 与当前项目地址邻近的项目很可能会同时被访问 基本概念 块 一般为多个字 （空间局部性） 命中Hit / 失效Miss 需要访问的元素所在块是否被存储在cache中 Miss： 从内存中取出该块 放置在cache中 放置策略 替换策略 命中率h 平均访问时间 $t_a=ht_c+(1-h)t_m$ 关键问题 如何判断数据是否在cache中数据查找 Data Identification 如何查找数据位置地址映射 Address Mapping cache满后如何处理替换策略 Placement Policy 保持cache和memory一致性写入策略 Write Policy 地址映射直接 (direct mapped) Main address Tag Bits Index Bits Offset Bits / 区编号（upper） 区索引 块内偏移 数据块大小 Block_Size = 2^Offset_Bits缓存 Cache_Size = Block_Size * Cache_Entries ( = 2^Index_Bits) * Valid Bit-&gt; each tag entry has an indicator to show if it’s valid ==主存分区 （区号tag bits），每一个区索引（index bits）对应缓存块的一行，比较tag确认Hit/Miss== 优点 地址变换速度快，一对一映射 替换算法简单、容易实现 缺点 容易冲突，cache利用率低 命中率低 全相联 (fully-associated)组相联 (set-associated)主存地址 = Tag + 组 + 块内偏移-》Cache地址 = 路 + 组 + 块内偏移 直接-》组相联-》全相连 每组可存一个tag / 每组可以存多个tag（数量=路数） / 共一组，可以存很多的tag（tag是全局的） 写策略 Cache命中的基础上 写直达法 Write-through 直接向内存中写入数据 写入cache的同时写入memory 写回法 Write-back 推迟对内存的写入直到数据所在缓存的行被替换 添加dirty bit（页面重写标志位） 只写入cache，被替换时修改 Cahce失效的基础上 按写分配 Write-allocate cache读入失效行 与write-back搭配 不按写分配 直接向内存写入，不读入缓存 与write-through搭配 策略总结 写直达+不按写分配法 (Write-through + No-write-allocate) 安全性更高 写回法+按写分配法 (Write-back + Write-allocate) 速度更快 替换策略（在现代操作系统讲过） 随机替换 先进先出FIFO 近期最少使用LRU 伪LRU Clock NMRU Cache友好的代码eg. C语言的数组元素是以行为主顺序分配的，同一行的元素被分配在连续的内存空间中 -&gt; 利用了空间局部性"},{"title":"高级数据结构-SE2322","path":"/files/courseNotes/2022(2)/高级数据结构.html","content":"前言：不是我的专业课，是SE好友的专业课，好奇故浅尝一下。 Lec1 Skiplist An element NIL is allocated and given a key greater than any legal key. All levels of all skip lists are terminated with NIL. A new list is initialized so that the level of the list is equal to 1 and all forward pointers of the list’s header point to NIL 查找：由粗到细 = 由高到低 分层次，相互耦合的多列表： $S_0, … S_h$ 顶层$S_0$ 底层$S_h$ 每个节点最多拥有4个引用 横向为层level：prev(), next() （头尾哨兵） 纵向称塔tower：above(), below() LSM算法 LSM模型利用批量写入解决了随机写入的问题，虽然牺牲了部分读的性能，但是大大提高了写的性能。"},{"title":"人工智能-CS3317","path":"/files/courseNotes/2023(1)/人工智能（B类）.html","content":"Part 1 Concept 人工智能（AI， Artificial Intelligence） 的定义 课件 lecture1 第 4 页： 人工设计程序， 让机器可以像人一样智慧地行动 Views of AI Views of AI fall into four categories:Thinking humanly / rationallyActing humanly / rationally The textbook advocates ==”acting rationally”== Thinking humanly -&gt; cognitive modeling 1960s “cognitive revolution”: informationprocessing psychology now distinct from AI Acting humanly -&gt; Turing Test 目的： 设计测试以验证计算机是否真的具有智能 ==Rational Agent 理性的智能体==: For each possible percept sequence, a rational agent should select an action that is expected to maximize its performance measure, given the evidence provided by the percept sequence and whatever built-in knowledge the agent has. An agent is ==autonomous 自主的== if its behavior is determined by ==its own experience== (with ability to learn and adapt) e.g 下列关于 AI 的表述，正确的是:==A. ==从长远角度来看，AI 发展的目标是让机器能够像人类一样行为，甚至比人类能做得更好B. 智能体(agent)的自主性(autonomous)指的是按照人类设计的程序自动化地完成任务==C. ==在图灵测试中，知识(knowledge)、推理能力(reasoning)、语言理解能力(language understanding)、学习能力(learning)是 AI系统的主要组成部分D. 理性的智能体(rational agent)能够突破计算资源的限制，做到完美的理性化(perfect rationality ) Part 2 SearchingProblem-solving agents States of the world are considered as wholes, with no internal structure visible to the problem-solving algorithms Problem formulation 建模A problem is defined by four items: initial state e.g., “at Arad“ actions or successor function S(x) = set of action–state pairs e.g., S(Arad) = {, … } goal test, can be explicit, e.g., x = “at Bucharest” implicit, e.g., Checkmate(x) path cost (additive) e.g., sum of distances, number of actions executed, etc. c(x,a,y) is the step cost, assumed to be ≥ 0 A solution is a sequence of actions leading from the initial state to a goal state Uniformed search strategies 无信息搜索https://zhuanlan.zhihu.com/p/187283548 DFS和DLS找到目标节点即停止，故不符合最优性和完备性。 BFS: 按层次逐步扩展，遍历整个图，找到目标节点或者证明无解。 Uniform Cost Search (UCS): UCS仅考虑实际花费的路径代价，不使用任何启发式函数。 它以代价最小的顺序扩展节点，确保找到的解是代价最小的解。 -&gt; 使用启发式函数则发展为==A*搜索==。 DFS -&gt; DLS -&gt; IDS: DFS从起始节点开始，沿着图的深度方向尽可能深地探索。 DLS在DFS的基础上，限制深度优先搜索的深度，防止无限深度的问题。 IDS在DLS的基础上，不断增加深度限制来达到BFS和DFS的综合效果。 考虑使用深度受限的 DFS 算法(Depth-limited search)来搜索目标状态 S。假设目标状态 S 所在的层深度为 d，限制的搜索深度为l，那么以下说法正确的是==A. ==如果 l&gt;d，那么该算法是完备的(complete)B. 如果 l&lt;d，那么该算法是完备的C. 如果将深度的 DFS 算法改为迭代加深算法（Iterative deepening)，初始迭代深度 l&lt;d，那么该算法是不完备的==D. ==如果将深度的 DFS 算法改为选代加深算法，初始迭代深度如果 l&lt;d，那么该算法是完备的 Informed search strategies 启发式搜索Greedy best-first search 贪婪搜索use an evaluation function f(n) for each node→ Expand most promising paths Evaluation function f(n) = h(n) = estimate of cost from n to goal (heuristic) 不符合最优性和完备性。 A* search Evaluation function Avoid Expanding Expensive Pathes f(n) = g(n) + h(n) g(n) = cost so far to reach n f(n) = estimated total cost of path through n to goal Heuristic functionAdmissibleAn admissible heuristic never ==overestimates== the cost to reach the goal: $h(n) \\le h^(n)$ （$h^(n)$ 为真实开销） e.g 对于当前问题而言，如果f与g都是满足可接受性(admissible)的启发函数(heuristics)，那么以下函数中，哪些选项也一定满足可接受性?==A. max (f, g) ====B. min (f, g) ==C. (fg)^0.5 + 1==D. (fg)^0.5 - 1== ConsistentA heuristic is consistent if for every node n, every successor n’of n generated by any action a, then $h(n) \\le c(n,a,n’)+h(n’)$ $f(n)$ is non-decreasing along any path. 对于 A* 算法，如果启发式函数 h(n) 满足一致性（也称为“单调性”或“单调递增性”），那么在搜索树中的每条路径上，子节点的 f 值不会小于其父节点的 f 值。 Local search algorithms 局部搜索interested in the solution state but not in the path to that goal关注当前状态及其邻近状态，而不是系统性地探索整个搜索空间。 2 key advantages: use very little memory find reasonable solutions in large or infinite (continuous) state spaces. 爬山法 Hill-Climbing过程： 初始状态： 选择一个初始状态。 邻近状态： 根据问题的操作或移动规则，找到当前状态的邻近状态。 评估： 评估邻近状态的质量。 移动： 移动到具有更好评估的邻近状态。 迭代： 重复上述步骤直到达到局部最优解或无法移动。 问题： 局部最优解： 爬山法可能会陷入局部最优解而无法找到全局最优解。 平原问题： 如果在当前状态的所有邻近状态中都没有更好的解，算法可能会停滞在平原。 模拟退火 Simulated annealing“退火”的目的： 模拟退火算法是对爬山法的改良，其目的是通过引入一定的随机性来跳出局部最优解，以更有可能找到全局最优解。 过程： 初始温度： 设定初始温度，表示算法接受较差解的概率。 邻近状态： 根据问题的操作或移动规则，找到当前状态的邻近状态successor。 评估： 评估邻近状态的质量。 移动： 移动到邻近状态，即使质量较差，以一定概率接受较差解。 温度下降： 通过降低温度，逐渐降低接受较差解的概率。 迭代： 重复上述步骤直到达到一定条件（如温度足够低）。 选择“坏”移动的概率与哪些因素有关： 温度： 初始时，温度较高，接受较差解的概率较大，随着迭代过程温度逐渐降低，接受较差解的概率减小。 遗传算法 Genetic algorithms定义： 遗传算法是一种基于生物遗传学原理的优化算法，通过模拟自然选择、交叉和变异的过程来搜索问题的解空间。 步骤和目的： 初始化种群： 随机生成初始种群，每个个体表示一个可能的解。 选择 Selection： 根据个体的适应度，选择一部分个体作为父代。 交叉 Crossover： 对选定的父代进行交叉操作，生成子代。 变异 Mutation： 对子代进行变异操作，引入一定程度的随机性。 评估： 评估种群中每个个体的适应度。 进化： 重复选择、交叉、变异步骤，直到满足停止条件（达到最大迭代次数或找到满意解）。 通过模拟进化过程，希望通过适应度高的个体在种群中传递有利的特征，逐渐优化整个种群，以找到问题的解。 e.g 关于遗传算法 (genetic algorithm)，下列说法正确的有:A. 遗传算法属于一种局部搜索 (local search) 算法==B. ==当选代次数达到预设的上界或种群 (population)的适应度(fitness) 达到期望值后，可以结束遗传算法==C. ==在算法中，我们会根据个体的适应度选择产生子集，然后用子集中的个体产生”后代(offspring)==D. ==交叉(crossover)的目的是产生”后代”，进行搜索状态的转移 对抗搜索Iterative Definition: Each player should choose the best action leading to the highest utility for it assuming both players will choose the best actions afterwards. https://www.bilibili.com/video/BV1v94y1r7F8 1. MiniMax 算法Two player : MAX and MINTask : find a “best” move for MAXAssume that MAX moves first, and that the two playersmove alternately. MAX node nodes at even-numbered depths correspond to positions in which it is MAX’s move next MIN node nodes at odd-numbered depths correspond to positions in which it is MIN’s move next 流程： 建立决策树： 从当前局面开始，建立一棵完整的对抗搜索树，其中每个节点表示一个游戏状态，每个边表示一步合法的移动。 评估叶节点： 对于树中的叶节点，使用评估函数（evaluation function）进行评估，得到一个估值，表示该节点的局面对于当前玩家的好坏程度。 递归传递值： 从树的底部开始，逐层向上递归传递估值，玩家轮流选择最大或最小值，以反映对手的最佳选择和己方的最佳应对。 最终决策： 在根节点选择具有最高估值的动作，作为最终的决策。 Keypoints： 最佳动作假设： Mini-Max算法假设每个玩家都会选择使其得分最大化（最佳动作）或最小化（对手最佳动作）的动作。 复杂性处理： 对于Mini-max树规模太大的问题，可以通过深度上和宽度上的简化来处理。-&gt; DLS和Alpha-beta剪枝 Properties Complete? Yes (if tree is finite) Optimal? Yes (against an optimal opponent) Time complexity? O(bm) (b-legal moves; m- max tree depth) Space complexity? O(bm) (depth-first exploration) 2. 深度上的简化：Depth-limited searchFor many problems, you do not need a full contingent plan at the very beginning of the game. 关键点： Depth-limited search是对MiniMax的深度上的简化，即限制搜索的深度。对于未探索到的叶节点，需要定义一个evaluation function来估计局面好坏。 Evaluation function should order the terminal states in the same way as the true utility function; the computation must not take too long! for nonterminal states, the evaluation function should be strongly correlated with the actual chances of winning. Eg. Tic-tac-toe If p is not a winning for either player, e(p) = (no. of complete rows, columns, or diagonals that are still open for MAX) - (no. of complete rows, columns, or diagonals that are still open for MIN) 3. 宽度上的简化：Alpha-beta 剪枝Compute the correct decision without looking at every node (consider the bounds of the minimax value) Alpha和Beta的作用： Alpha： 用于保存当前节点的最大值。 Beta： 用于保存当前节点的最小值。 比较节点与 alpha、beta 值的关系： 节点值大于等于 beta： 剪枝，因为对手不会选择这个节点，它已经不会影响当前节点的值。 节点值小于等于 alpha： 剪枝，因为当前玩家不会选择这个节点，它已经不会影响当前节点的值。 节点值介于 alpha 和 beta 之间： 更新 alpha 或 beta 的值。 在Max层，alpha是一个下界；在Min层，beta是一个上界。 Key points The MAX player will only update the value of α. The MIN player will only update the value of β. While backtracking the tree, the node values will be passed to upper nodes instead of values of α and β. Only pass the α, β values to the child nodes. Properties Pruning does not affect the final result Effectiveness depends on the ordering of successors With “perfect ordering,” time complexity = O(bm/2)→ doubles depth of searchCSP问题Standard search formulation (incremental) States are defined by the values assigned so far Initial state: the empty assignment { } Successor function: assign a value to an unassigned variable that does not conflict with current assignment→ fail if no legal assignments Goal test: the current assignment is complete This is the same for all CSPs Every solution appears at depth n with n variables→ use depth-first search Path is irrelevant, so can also use complete-state formulation $b = (n - l )d$ at depth $l$, hence $n! ·d^n$ leaves Backtracking search DFS for CSPs with single-variable assignments the basic uninformed algorithm for CSPs Only need to consider assignments to a single variable at each node ( b = d ) There are $n! ·d^n$ leaves, $d^n$ possible complete assignments. Backtracking search = DFS + two improvements Idea 1: One variable at a time Variable assignments are commutative \\[WA = red then NT = green] same as \\[NT = green then WA = red] Only need to consider assign value to a single variable at each step Idea 2: Check constraints as you go Consider only values which do not conflict previous assignments May need some computation to check the constraints “Incremental goal test” Which variable should be assigned next？ Most constrained variable: choose the variable with the fewest legal values a.k.a. minimum remaining values (MRV) heuristic Most constraining variable (Tie-breaker): choose the variable with the most constraints on remaining variables the degree heuristic Given a variable, choose the least constraining value: The one that rules out the fewest values in the remaining variables 首先选择 most constrained variable， minimum remaining values，如有多个这样的变量，再根据 most constraining variable Forward checking 前向检查 Idea: Keep track of remaining legal values for unassigned variables Terminate search when any variable has no legal values Limitation: Arc consistency 弧一致性（弧相容性） X →Y is consistent iff for every value x of X there is some allowed y The problem: It makes the current variable arc-consistent, but doesn’t look ahead and make all the other variables arc-consistent e.g 在一个 CSP 问题中，我们需要满足的要求为 $x+3&gt;y$，其中x 属于 $x\\in{0,1,3}$，而$y\\in{3,4,5}$，那么以下关于弧相容性(arc consistency)的说法中，正确的是: A.弧x-&gt;y与弧y-&gt;x满足弧相容性B.弧x-&gt;y与弧y-&gt;x都不满足弧相容性C.弧x-&gt;y满足弧相容性，但弧y-&gt;x不满足弧相容性==D.弧y-&gt;x满足弧相容性，但弧x-&gt;y不满足弧相容性== Arc-3一种用于处理约束满足问题的算法，它的目标是通过维护弧一致性（arc-consistency）来降低搜索空间。AC-3是一种全局的推理算法，与前向检测相比，它更注重全局的一致性。 算法步骤： 初始化队列： 将所有约束的弧添加到一个队列中。 循环处理队列： 从队列中取出一个约束弧（arc）。 对于弧起点的变量的每个可能取值，检查是否存在与该值冲突的其他值。如果存在冲突，则将该值==从弧起点的定义域中移除==。 如果某个变量的定义域发生变化，将==邻居变量指向该变量的约束弧==添加到队列中，进一步迭代邻居变量的约束弧的定义域。 判定一致性： 如果某个变量的定义域为空，表示出现了不一致，算法中止，进行回溯。 如果所有变量的定义域都不为空，表示系统是一致的，可以继续进行搜索。 AC-3的优势和特点： 全局一致性： AC-3通过在整个问题的约束图上进行推理，更全局地维护弧一致性，有助于减小搜索空间。 提前检测不一致性： 与前向检测不同，AC-3在推理的过程中能够更早地检测到不一致性，因为它考虑了整个约束网络的信息。 减少搜索空间： 通过及时地削减变量的定义域，AC-3有助于在搜索之前减小问题的规模，提高解决问题的效率。 适用于约束满足问题： AC-3主要用于处理约束满足问题，其中变量之间存在约束关系。 Part3 Logical AgentPropositional Logic ModelsLogic in general ==Logics== are formal languages for representing information such that conclusions can be drawn ==Syntax 语法== defines the sentences in the language ==Semantics 语义== define the “meaning” of sentences; i.e., define truth of a sentence in a world E.g., the language of arithmeticEntailment Entailment means that one thing follows from another: $KB \\models A$Entailment is a relationship between sentences (i.e., syntax) that is based on semantics. Inference: Proofs A proof is a demonstration of entailment between $\\alpha$ and $\\beta$ Method 1: model-checking For every possible world, if $\\alpha$ is true make sure that is $\\beta$ true too OK for propositional logic (finitely many worlds); not easy for first-order logic Method 2: theorem-proving Search for a sequence of proof steps (applications of inference rules) leading from $\\alpha$ to $\\beta$ E.g., from $P \\wedge (P \\Rightarrow Q)$, infer Q by Modus Ponens Properties Sound algorithm: everything it claims to prove is in fact entailed Complete algorithm: every sentence that is entailed can be proved UncertaintyProbability先验概率（Prior Probability）: 先验概率是在考虑任何新证据或信息之前，对事件的概率进行的初始估计。它基于以往的知识、经验或主观判断。数学上表示为P(A)，其中A是事件。 条件概率（Conditional Probability）: 条件概率是指在给定另一个事件发生的条件下，某一事件发生的概率。表示为P(A|B)，读作“A在给定B的条件下发生的概率”，其中A和B是两个事件。 条件概率可以通过以下公式计算：$P(A|B) = \\frac{P(A \\cap B)}{P(B)}$ 后验概率（Posterior Probability）: 后验概率是在考虑了新的观测数据或证据之后，对事件的概率进行重新估计。它是先验概率与新观测数据相结合得出的概率。在贝叶斯统计学中，后验概率是通过使用贝叶斯定理计算得到的。 $P(A|B) = \\frac{P(B|A) \\cdot P(A)}{P(B)}$ 其中： $P(A|B)$ 是后验概率，表示在观测到B的情况下A的概率。 $P(B|A)$ 是条件概率，表示在A的情况下观测到B的概率。 $P(A)$ 是先验概率，表示在没有新观测数据的情况下A的概率。 $P(B)$ 是用于归一化的边际概率，表示B的概率。 e.g 有C1和C2两个城市，它们的人口比例为 1:3。根据今年疾病发生率的统计结果，C1城 市污染严重，居民患癌症的比率为 0.1%，而 C2 城市的居民患癌症的比率为 0.02%。现在医院接诊了一名癌症患者，该患者来自 C1 市的率为？ 62.5% 联合概率（Joint Probability）: 联合概率是指两个或多个事件同时发生的概率。假设有两个事件A和B，它们的联合概率表示为P(A and B)，表示同时发生A和B的概率。联合概率的计算通常使用乘法规则： $P(A \\cap B) = P(A) \\cdot P(B|A)$ 其中，$P(B|A)$表示在事件A发生的条件下，事件B发生的条件概率。 条件独立定义（Conditional Independence）: 两个事件A和B在给定另一个事件C的条件下是独立的，如果满足以下条件： $P(A \\cap B | C) = P(A | C) \\cdot P(B | C)$ 这表示在给定事件C的情况下，事件A和事件B的联合概率等于它们各自的条件概率的乘积。如果这个等式成立，我们称A和B在给定C的条件下是条件独立的。 朴素贝叶斯 Naive Bayes朴素贝叶斯是一种基于贝叶斯定理的分类算法。它的”朴素”体现在对于特征之间的条件独立性的假设，即在给定类别的条件下，每个特征都是相互独立的。这个假设是朴素贝叶斯算法的核心，使得计算条件概率变得简化。 $P(\\text{Cause},\\text{Effect}1, … ,\\text{Effect}_n) = P(Cause) \\prod{i}^{ }P(\\text{Effect}_i|Cause)$ 朴素贝叶斯分类过程： 建立模型： 基于训练数据，计算各个类别的先验概率 $P(C_i)$ 和每个特征在各个类别下的条件概率 $P(X_j | C_i)$。 输入测试数据： 对于给定的测试数据，计算它属于每个类别的后验概率。 选择类别： 选择具有最高后验概率的类别作为最终的分类结果。 Probabilistic ReasoningBayesian networks贝叶斯网络（Bayesian Network），也称为信念网络（Belief Network）或概率图模型，是一种用于表示变量之间条件依赖关系的图结构。它使用有向无环图（DAG）来表示变量之间的依赖关系，其中节点表示随机变量，边表示变量之间的依赖关系。 具体来说，贝叶斯网络包含两个主要组成部分： 节点（Nodes）： 节点表示随机变量，每个节点代表一个特定的事件或状态。 边（Edges）： 有向边表示变量之间的条件依赖关系。如果节点A有一条指向节点B的边，就表示在给定节点A的情况下，节点B发生的概率可能会受到影响。 每个节点都有一个条件概率表（Conditional Probability Table，CPT），描述了该节点在给定其父节点的条件下的概率分布。 因子分解定理（Node Given Its Parents）: 在贝叶斯网络中，因子分解定理是指一个节点在给定其父节点的条件下，可以被分解为一个条件概率表的乘积。这定理表达了节点和其父节点之间的联合概率分布的关系。 对于一个节点X和其父节点集合Pa(X)，有： $P(X, Pa(X)) = P(X | Pa(X)) \\cdot P(Pa(X))$ 其中： $P(X, Pa(X))$ 表示节点X和其父节点集合Pa(X)的联合概率分布。 $P(X | Pa(X))$ 表示节点X在给定其父节点集合Pa(X)的条件下的概率分布。 $P(Pa(X))$ 表示父节点集合Pa(X)的概率分布。 这个因子分解定理允许贝叶斯网络中的联合概率分布可以通过对每个节点的条件概率表进行分解和组合来计算，使得网络的表示更为紧凑且易于处理。 Conditional Independence 复杂网络参考 Bayesian SamplingHW3. Prob2 用于从贝叶斯网络中抽样的方法。 先验采样（Prior Sampling）过程： 从网络的先验概率分布中对每个节点进行采样，得到一个样本。 概率计算： 根据每个节点的先验概率表进行采样。 拒绝采样（Rejection Sampling）过程： 对每个节点进行先验采样。 根据观测数据，决定是否接受该样本。 拒绝操作： 如果样本不符合观测数据，拒绝该样本。 似然采样（Likelihood Weighting）过程： 对观测变量赋值。 从网络的条件概率分布中对每个非观测节点进行采样，同时计算权重。 根据观测数据的似然性对样本进行加权。 概率计算： 对非观测节点按照条件概率表进行采样，同时计算相应的权重。 权重计算：$w = w \\times P(\\text | \\text)$ 吉布斯采样（Gibbs Sampling）过程： 初始化所有节点的值。 随机选择一个节点，根据其条件概率表采样新值。 重复步骤2，直到达到收敛条件。 何时采样： 在每次迭代中，只采样一个节点，而不是整个样本。 证据变量处理： 如果节点是观测节点，则保持其值不变。 采样哪些节点： 在每次迭代中，只采样一个节点，其他节点保持不变。 条件概率计算： 对于每个节点，根据其条件概率表和当前其他节点的值计算条件概率。 贝叶斯采样方法根据具体的网络结构和需要的样本，选择适合的方法。各种方法的选择会受到计算效率和样本质量的影响。 Markov blanket在概率图模型中，马尔可夫毯 Markov Blanket 是一个节点的最小邻居集，给定其马尔可夫毯的信息，该节点与其他所有节点条件独立。 换句话说，马尔可夫毯是一组节点，这组节点的信息足以使给定节点在图中的其他节点的信息条件下变得独立。 马尔可夫毯的定义： 对于一个图模型中的节点X，其马尔可夫毯定义为==所有与X有边连接的节点，以及所有与X的邻居节点相邻的节点==。形式化地表示，节点X的马尔可夫毯记为 $\\text{MB}(X)$，满足： $\\text{MB}(X) = \\text{Pa}(X) \\cup \\text{Children}(X) \\cup \\text{Pa}(\\text{Children}(X)) \\setminus {X}$ 马尔可夫毯包含以下节点： 节点X的父节点（$\\text{Pa}(X)$）。（父亲） 节点X的子节点（$\\text{Children}(X)$）。（儿子） 节点X的所有子节点的父节点（$\\text{Pa}(\\text{Children}(X))$）。（配偶） 上述节点集合中去掉节点X本身（$\\setminus {X}$）。 马尔可夫毯的概念对于贝叶斯网络和马尔可夫网络等概率图模型的推断过程非常重要，因为它提供了一种局部结构，通过它，我们可以捕捉到一个节点在给定其马尔可夫毯的条件下的独立性。 Probabilistic Reasoning over TimeHidden Markov Model (HMM)马尔贝夫链 状态空间 States Space 无记忆性 Memorylessness P(S_t|S_{t-1},S_{t-2},S_{t-3},\\dots)=P(S_t|S_{t-1}) 转移矩阵 Transition Matrix -&gt; 稳态分布 Stable Distribution 遍历性 -&gt; 唯一稳态 常返性 recurrent 存在返回路径 非周期性 两两连通 HMM建模（Hidden Markov Model）HMM是一种用于建模时序数据的概率图模型。它包含两个主要组成部分：隐状态序列和观测序列。 隐状态序列（Hidden States）： 表示系统内部不可见的状态。在每个时刻，系统处于一个隐状态，但我们无法直接观测到它。 观测序列（Observations）： 表示在每个时刻我们可以直接观测到的数据。 状态转移概率（Transition Probabilities）： $p(yt|y{t-1})$ 描述在不同时刻隐状态之间的转移概率。 发射概率（Emission Probabilities）： $p(x_t|y_t)$ 描述在每个时刻从隐状态到观测状态的概率。 初始概率分布（Initial Probabilities）： $p(y_1)$ 描述在第一个时刻系统处于每个隐状态的概率。 2. 评价 HMM 中某个序列出现的概率：前向、后向算法：前向算法（Forward Algorithm）：用于计算给定观测序列的概率。通过动态规划，从序列的开始到当前时刻，逐步计算到达当前状态的所有路径的概率之和。 后向算法（Backward Algorithm）：与前向算法相反，从序列的结束到当前时刻，逐步计算从当前状态到达序列末尾的所有路径的概率之和。 前向算法和后向算法的综合结果可以用于计算给定观测序列的整体概率，即联合概率 $P(Observations | Model)$。 维特比算法 Viterbi Algorithm用于解码给定观测序列对应的最可能的隐状态序列。 该算法利用动态规划，计算每个时刻的最可能的状态路径，最终找到使得整体概率最大的隐状态序列。 维特比算法的基本步骤包括初始化、递推、终结。通过在每个时刻选择最大概率的状态路径，算法找到整体观测序列对应的最可能的隐状态序列。 Part4 Machine learningBasic KnowledgeClassification无监督学习（Unsupervised Learning）在无监督学习中，模型从==未标记==的数据中学习模式和结构。主要任务包括聚类（Clustering）和降维（Dimensionality Reduction）。 在聚类中，模型试图将数据分为具有相似特征的组，而在降维中，模型试图减少数据的特征维度。 有监督学习（Supervised Learning）在有监督学习中，模型从标记的训练数据中学习，其中每个样本都有一个对应的标签或输出。主要任务包括分类（Classification）和回归（Regression）。在分类中，模型试图预测样本属于哪个类别，而在回归中，模型试图预测一个连续的数值。 强化学习（Reinforcement Learning）在强化学习中，模型（代理）通过与环境的交互学习，以获得最大的累积奖励。模型通过尝试不同的行动来学习最佳策略，而环境则通过奖励或惩罚来提供反馈。 过拟合、欠拟合过拟合（Overfitting）过拟合指模型在训练集上表现良好，但在未见过的新数据上表现差。过拟合通常是因为模型过于复杂，过分适应训练数据中的噪声和细节。 欠拟合（Underfitting）欠拟合指模型无法在训练集上学到足够的模式，导致在训练集和测试集上都表现不佳。通常是因为模型过于简单，不能很好地捕捉数据中的复杂关系。 分类和回归分类（Classification）Discrete label一种有监督学习任务，其中模型预测输入数据属于预定义的类别中的哪一个。==输出是离散的==，通常表示类别标签。例如，垃圾邮件过滤是一个二分类问题，其中类别可以是”垃圾邮件”或”非垃圾邮件”。 回归（Regression）Continuous label一种有监督学习任务，==输出是连续的数值==。模型预测的是输入数据的数值或标签。例如，房价预测是一个回归问题，其中模型预测的是房屋的价格，这是一个连续的数值。 Linear Model线性回归$f_{w,b}(x)=\\sum_iw_ix_i+b$ 代价函数通常采用均方误差（Mean Squared Error，MSE）来衡量预测值与真实值之间的差异。代价函数 $J(\\theta)$ 的定义如下： $J(\\theta) = \\frac{1}{2m} \\sum{i=1}^{m} (h\\theta(x^{(i)}) - y^{(i)})^2$ 其中： $m$ 是训练样本数量。 $h_\\theta(x^{(i)})$ 是模型对第 $i$ 个样本的预测值。 $y^{(i)}$ 是第 $i$ 个样本的真实值。 $\\theta$ 是模型的参数向量。 求解方式直接法 Normal Equation 通过解正规方程（Normal Equation）来直接求解最小化代价函数的参数 $\\theta$。正规方程的解为： $\\theta = (X^T X)^{-1} X^T y$ 其中，$X$ 是包含所有样本特征的矩阵，$y$ 是包含所有样本真实值的向量。 梯度下降法 通过梯度下降法迭代地更新参数 $\\theta$，使代价函数 $J(\\theta)$ 达到最小值。梯度下降法的更新规则为： $\\theta_j := \\theta_j - \\alpha \\frac{\\partial}{\\partial \\theta_j} J(\\theta)$ 其中，$\\alpha$ 是学习率，$\\frac{\\partial}{\\partial \\theta_j} J(\\theta)$ 是代价函数对参数 $\\theta_j$ 的偏导数。 正则化 Regularization正则化：防止过拟合的技术。通常通过在损失函数中添加一个正则化项来实现。 L1 正则化（Lasso） 目标：最小化代价函数的同时，加上 $\\lambda$ 乘以参数向量 $\\theta$ 的绝对值之和。 代价函数：$J(\\theta) = \\text{MSE}(\\theta) + \\lambda \\sum_{i=1}^{n} |\\theta_i|$ 其中，$\\theta$ 是模型的参数，$\\text{MSE}(\\theta)$ 是均方误差损失，$\\lambda$ 是正则化强度。 适合用于==稀疏特征选择==，可以精确地将某些特征的权重缩减至零。 L2 正则化（Ridge Regression） 目标：最小化代价函数的同时，加上 $\\lambda$ 乘以参数向量 $\\theta$ 的平方和。 代价函数：$J(\\theta) = \\text{MSE}(\\theta) + \\lambda \\sum_{i=1}^{n} \\theta_i^2$ 其中，$\\theta$ 是模型的参数，$\\text{MSE}(\\theta)$ 是均方误差损失，$\\lambda$ 是正则化强度。 使所有参数都变得较小，但不精确地等于零，对所有特征的权重进行==平滑处理==，从而防止某些参数对模型的影响过大。 正则化的作用 防止过度拟合： 正则化通过限制模型的复杂度，减少模型对训练数据的过度拟合，提高在未见过的数据上的泛化能力。 特征选择： L1 正则化的效果是使得一些特征的权重精确地等于零，因此可以用于特征选择，排除对模型贡献较小的特征。 稳定模型： 使模型的参数更加稳定，减少参数值的大幅波动，有助于提高模型的鲁棒性。 Logistic Regression 逻辑回归$f_{w,b}(x)=\\sigma(\\sum_iw_ix_i+b)$ $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ ModelingLogistic Regression对输入特征进行加权线性组合，然后使用Logistic函数对结果进行概率映射。它建模的是样本属于正类别的后验概率 $P(y=1 | x;\\theta)$。 Logistic Regression是一种用于二分类问题的线性分类模型。通过使用Logistic函数（也称为Sigmoid函数）将线性组合的结果映射到一个[0, 1]的范围（在线性回归后加了一个sigmoid函数），表示样本属于正类别的概率，将==线性回归==变成一个==0~1输出==的分类问题。 求解方法 MLE通过最大似然估计（Maximum Likelihood Estimation，MLE）来求解模型的参数 $\\theta$。 对于二分类问题，Logistic Regression的似然函数为： $L(\\theta) = \\prod_{i=1}^{m} P(y^{(i)} | x^{(i)};\\theta)^{y^{(i)}} \\cdot (1 - P(y^{(i)} | x^{(i)};\\theta))^{1 - y^{(i)}}$ 其中 $P(y | x;\\theta)$ 是通过Logistic函数计算的样本属于正类别的概率。最大化似然函数等价于最小化其负对数似然（Negative Log-Likelihood）：$J(\\theta) = -\\frac{1}{m} \\sum_{i=1}^{m} [y^{(i)} \\log(P(y^{(i)} | x^{(i)};\\theta)) + (1 - y^{(i)}) \\log(1 - P(y^{(i)} | x^{(i)};\\theta))]$ 其中 $P(y | x;\\theta)$ 为 Logistic 函数。 求解方法通常使用梯度下降法。 $g(z) = \\frac{1}{1 + e^{-z}}$ 的导数为 $g’(z) = g(z)(1 - g(z))$。 Bayesian LearningMLE 和 MAP 在估计参数时的区别最大似然估计（Maximum Likelihood Estimation, MLE） Target： Choose 𝜃 that maximizes the probability of observed data Estimation： $\\hat{\\theta}{MLE} = \\arg \\max{\\theta} P(D|\\theta) = \\arg \\max_{\\theta} \\theta^{\\alpha_H}(1-\\theta)^{\\alpha_T}$。 Solution： 最大化似然函数 特点： As n → infinity, prior is “forgotten” ; But, for small sample size, prior is important! 最大后验估计（Maximum A Posterior Estimation, MAP） Target： Choose 𝜃 that maximizes the probability of given observed data and prior belief Estimation： $\\hat{\\theta}{MAP} = \\arg \\max{\\theta} P(\\theta|D) = \\arg \\max_{\\theta}\\frac{P(D|\\theta) \\cdot P(\\theta)}{P(D)}$ Solution： 最大化后验概率。 Bayes Optimal ClassifierBayes 分类器基于贝叶斯定理，通过计算给定观测数据的后验概率来进行分类。对于两个类别 $C_1$ 和 $C_2$，给定观测数据 $X$，贝叶斯分类器选择具有最大后验概率的类别： $P(C_i | X) = \\frac{P(X | C_i) \\cdot P(C_i)}{P(X)}$ 其中，$P(X)$ 是一个常量，对于分类决策没有影响，因此可以简化为： $P(C_i | X) \\propto P(X | C_i) \\cdot P(C_i)$ Bayes 分类器选择具有最大后验概率的类别，即： $\\hat{y} = \\arg \\max_{i} P(C_i | X)$ 对比1）线性回归要求变量服从==正态分布==，逻辑回归对变量分布没有要求。2）线性回归要求因变量是==连续性数值变量==，逻辑回归要求因变量是==分类型变量==。3）线性回归要求自变量和因变量呈==线性关系==，逻辑回归不要求自变量和因变量呈线性关系4）逻辑回归是分析因变量==取某个值的概率与自变量==的关系，而线性回归是==直接分析因变量与自变量==的关系 朴素贝叶斯分类器，条件独立性假设朴素贝叶斯分类器朴素贝叶斯分类器是一种基于贝叶斯定理的分类算法，假设特征在给定类别的条件下是独立的。这是一个强假设，通常被称为条件独立性假设。 Optimal predictor （Bayes classifier) : $f^*=\\arg\\min_{f}P(f(x) eq Y)$ Equivalently, $f^{*}(x)=\\arg \\max _{Y=y} P(Y=y \\mid X=x)$ 条件独立性假设假设特征 $X_1, X_2, \\ldots, X_n$ 在给定类别 $C$ 的条件下是独立的，即： $P(X_1, X_2, \\ldots, X_n | C) = P(X_1 | C) \\cdot P(X_2 | C) \\cdot \\ldots \\cdot P(X_n | C)$ 这使得朴素贝叶斯分类器的计算变得简单，因为可以通过计算每个特征在给定类别下的概率来估计整个观测数据的后验概率。 生成模型与判别模型的区别生成模型生成模型试图对数据的生成过程进行建模，即学习类别的联合概率分布 $P(X, Y)$。生成模型可以通过学习类别的条件概率分布 $P(X | Y)$ 和先验概率分布 $P(Y)$ 来生成新的数据。 判别模型判别模型关注的是对观测数据进行分类的决策边界，即学习决策函数 $Y = f(X)$。判别模型直接学习类别之间的决策边界，而不是对数据的生成过程进行建模。 区别 生成模型： 学习数据的生成过程，可以用于生成新的样本。 判别模型： 学习类别之间的决策边界，关注分类问题。 朴素贝叶斯分类器通常被归类为==生成模型==，因为它试图学习类别的生成过程。相比之下，逻辑回归和支持向量机等算法通常被归类为判别模型，因为它们关注的是决策边界而不是数据的生成过程。 Support Vector Machine 支持向量机根本思想： Maximizing margin （lec10 第 13、 14 页） 支持向量机（Support Vector Machine，SVM）之所以被视为自带正则化项，与其优化目标和决策边界的特性有关。在支持向量机中，存在一个关键的超参数 $C$，它控制了对误分类的惩罚程度。这个超参数 $C$ 在 SVM 的优化问题中起到了类似于正则化强度的作用。 SVM 的优化目标SVM 的优化目标是找到一个最大间隔的决策边界，并通过最小化误分类点来优化模型。具体而言，SVM 的优化目标可以表示为： $\\min{w, b} \\frac{1}{2} ||w||^2 + C \\sum{i=1}^{m} \\max(0, 1 - y_i(w \\cdot x_i + b))$ 其中： $w$ 是权重向量。 $b$ 是偏置项。 $C$ 是一个正则化超参数。 $||w||^2$ 表示权重向量的 L2 范数。 $y_i$ 是第 $i$ 个样本的真实标签。 $x_i$ 是第 $i$ 个样本的特征向量。 正则化效应 间隔最大化： SVM 的优化目标的第一项 $\\frac{1}{2} ||w||^2$ 表示最大化决策边界的间隔，使得模型更加泛化。 误分类惩罚： 通过 $\\sum_{i=1}^{m} \\max(0, 1 - y_i(w \\cdot x_i + b))$ 项，对误分类的点进行了惩罚。这一项的大小受到 $C$ 的调节，当 $C$ 较大时，对误分类的惩罚较重，模型更倾向于拟合训练数据，可能导致过拟合；而当 $C$ 较小时，对误分类的惩罚较轻，模型更倾向于寻找更大的间隔，从而提高泛化性能。 通过调节超参数 $C$，可以在最大间隔和对误分类点的惩罚之间找到平衡，实现对模型的正则化。较大的 $C$ 值会导致更少的误分类但可能产生较小的间隔，而较小的 $C$ 值则可能允许更大的间隔但可能容忍更多的误分类。这种权衡使得 SVM 在一定程度上自带正则化项，帮助控制模型的复杂度，避免过度拟合。 硬间隔 SVM（Hard Margin SVM）硬间隔支持向量机是 SVM 的一种形式，其中决策边界被要求完全不允许任何训练点出现在边界之内。硬间隔 SVM 适用于训练数据是线性可分的情况，即存在一个超平面能够完美地将不同类别的样本分开。 硬间隔 SVM 的优化目标是最大化两类样本点到决策边界的间隔，同时满足所有样本点都在正确的一侧，不允许出现分类错误。 软间隔 SVM（Soft Margin SVM）软间隔支持向量机是为了处理训练数据不是线性可分的情况而提出的。在实际应用中，数据可能包含噪声或异常点，硬间隔 SVM 对这些数据非常敏感。因此，软间隔 SVM 允许一些样本出现在决策边界的错误一侧，并引入了松弛因子（slack variable）来衡量分类错误的程度。 e.g 以下关于 SVM 的描述中，错误的项是?==A、==硬间隔(hard margin)：如果训练数据是线性可分的，我们可以选择两个平行的超平面来分隔这两类数据，使得超平面之间的距离尽可能大。B、硬间隔：如果训练数据是线性可分的，我们可以选择两个平行的超平面来分隔这两类数据，使得超平面之间的距离尽可能小。C、软间隔(soft margin)：不允许有数据点位于超平面的错误一侧以及边距和超平面的正确一侧之间。==D、==软间隔：允许一些数据点停留在超平面的错误一侧，以及边距和超平面的正确一侧之间。 松弛因子和 Hinge Loss松弛因子（Slack Variable）松弛因子是软间隔 SVM 中引入的变量，用于度量每个样本点是否违反了间隔要求。对于每个样本点，引入一个松弛因子，表示其允许偏离正确一侧的程度。优化目标包含最小化松弛因子的部分，以平衡最大化间隔和最小化分类错误之间的关系。 Hinge LossHinge Loss 是用于衡量分类错误的损失函数，通常与松弛因子一起使用。 对于第 $i$ 个样本点，其 Hinge Loss 定义为：$\\max(0, 1 - y_i \\cdot f(x_i))$ 其中 $y_i$ 是样本的真实标签，$f(x_i)$ 是样本点到决策边界的距离。Hinge Loss 为正表示分类错误，为零表示分类正确。 支持向量支持向量是指在 SVM 中==用于定义决策边界的训练样本点==。 在硬间隔 SVM 中，支持向量是那些恰好落在边界上的点，而在软间隔 SVM 中，支持向量可能是那些位于间隔错误一侧或在边界上的点。支持向量对决策边界的位置具有关键性的影响。 5. 对偶问题和 Kernel Trick对偶问题将原始的优化问题转换为对偶问题的好处是可以更有效地使用核技巧，同时在某些情况下可以简化计算。对偶问题的解通常包含一个称为拉格朗日乘子（Lagrange Multiplier）的变量，每个训练样本对应一个拉格朗日乘子。 Kernel Trick核技巧是通过将原始特征空间映射到高维空间，而无需显式计算映射后的特征向量，从而在计算中引入非线性性。核函数定义了在原始特征空间中计算两个样本点之间的内积，即 $K(x_i, x_j) = \\phi(x_i)^T \\cdot \\phi(x_j)$。 常用的核函数包括线性核、多项式核、高斯核（RBF核）等。通过使用核函数，可以在不显式计算高维特征向量的情况下，将 SVM 扩展到非线性问题。 NN感知机感知机是一种简单的神经网络结构，包含输入层和输出层，没有隐藏层。它可以用于二分类问题。感知机的关键特点是其决策边界是线性的。它通过学习权重和偏置项，对输入进行线性加权求和，然后通过激活函数（通常是阶跃函数）进行输出。 多层感知机多层感知机（MLP）包含输入层、一个或多个隐藏层以及输出层。每一层都由多个神经元组成，每个神经元都与前一层的所有神经元连接，权重和偏置项用于调整连接强度。 由于多层感知机具有隐藏层，它能够学习非线性关系。通过引入非线性激活函数（如ReLU、Sigmoid或Tanh），神经网络可以捕捉和学习输入之间更为复杂的关系，从而解决非线性问题。 反向传播算法的基本思想反向传播算法反向传播（Backpropagation）是训练神经网络的一种常用算法。其基本思想是通过将网络的输出与真实标签之间的误差反向传播回网络，调整网络参数以最小化误差。 基本步骤 前向传播（Forward Propagation）： 将输入数据通过网络进行正向传播，计算每一层的输出。 计算误差（Compute Loss）： 计算网络输出与真实标签之间的误差。 反向传播（Backward Propagation）： 将误差反向传播回网络，计算每个参数对误差的贡献。 更新参数（Update Parameters）： 使用梯度下降等优化算法，更新网络参数以减小误差。 梯度下降梯度下降是优化算法的一种，用于最小化损失函数。在反向传播中，计算每个参数对损失函数的梯度，然后更新参数以减小梯度。这样的迭代过程将逐渐使网络收敛到局部最小值，使得网络的输出更接近真实标签。 激活函数的导数在反向传播中，需要计算每个神经元的梯度，而这通常涉及到激活函数的导数。不同的激活函数有不同的导数计算方式，例如，Sigmoid 函数的导数可以通过 Sigmoid 函数的输出直接计算。 强化学习（1） 马尔可夫决策过程（MDP）的定义（Lec13 第 13 页）， value/utility 的定义， policy的定义（2） 理解 value iteration 和 policy iteration 的计算过程。 Value iteration 的计算（公式在P29，课堂上讲了个例子 P30-31）； Policy iteration 的计算（P71） 马尔可夫决策过程（MDP）MDP 的定义马尔可夫决策过程是强化学习问题的数学建模框架，它包括以下要素： 状态空间 $S$： 描述问题中所有可能的状态的集合。 动作空间 $A$： 描述智能体可以采取的所有可能动作的集合。 转移概率 $P$： 描述在某个状态下执行某个动作后，下一个状态的概率分布。 奖励函数 $R$： 描述在某个状态执行某个动作后，智能体所获得的即时奖励。 折扣因子 $\\gamma$： 描述未来奖励的衰减因子。 Value/Utility 和 Policy 的定义 Value/Utility $V(s)$： 表示从状态 $s$ 出发，按照某个策略执行动作，累计获得的期望累积奖励。 Policy $\\pi$： 表示在每个状态下选择的动作策略。可以是确定性策略，也可以是随机策略。 Value Iteration 和 Policy IterationValue Iteration 的计算过程Value Iteration 是一种动态规划算法，用于找到最优策略和最优值函数。其计算过程如下： 初始化值函数 $V(s)$： 将所有状态的值初始化为零或随机值。 迭代更新： 对于每个状态 $s$，计算新的值函数 $V’(s)$：$V’(s) = \\maxa \\left( R(s, a) + \\gamma \\sum{s’} P(s’ | s, a) \\cdot V(s’) \\right)$ 更新值函数：$V(s) \\leftarrow V’(s)$ 重复迭代直到收敛。 Policy Iteration 的计算过程Policy Iteration 通过交替进行策略评估和策略改进来找到最优策略。其计算过程如下： 初始化策略 $\\pi$： 可以是任意初始策略。 策略评估： 使用当前策略 $\\pi$ 进行值函数的评估，得到值函数 $V^\\pi$：$V^\\pi(s) = R(s, \\pi(s)) + \\gamma \\sum_{s’} P(s’ | s, \\pi(s)) \\cdot V^\\pi(s’)$ 策略改进： 在每个状态 $s$ 上选择使得下一个状态的值更大的动作 $a$：$\\pi’(s) = \\arg \\maxa \\left( R(s, a) + \\gamma \\sum{s’} P(s’ | s, a) \\cdot V^\\pi(s’) \\right)$ 更新策略：$\\pi \\leftarrow \\pi’$ 重复策略评估和策略改进直到策略不再变化。 用神经网络进行强化学习神经网络在强化学习中可以用于近似值函数或策略函数。具体而言，可以使用深度 Q 网络（DQN）来近似状态-动作值函数，也可以使用策略梯度方法来近似策略函数。这样的神经网络可以通过与环境的交互进行训练，以逐步提高其在任务中的性能。"},{"title":"密码学与信息安全基础-CS3314","path":"/files/courseNotes/2023(1)/密码学与信息安全基础.html","content":"计算机安全概况 密码理论与技术 经典加密技术 常用密码算法 保密通信技术 公钥密码算法 消息认证和Hash函数 认证协议 网络安全实践 认证服务 IP/Web安全 安全邮件Lec1 序论-计算机安全概况 安全定义 安全性(security)是一种抵御可能的风险和威胁的能力，而我们只关心由于人为因素所产生的风险和威胁。 威胁（threats）是对安全的潜在破坏。这种破坏不一定要实际发生才成为威胁。 攻击(attack)是可能导致破坏的行为，行为人被称为攻击者。 信息安全涉及到信息的保密性(confidentiality)、完整性 (integrity)、认证性（数据来源的可靠性） (Authenticity)、不可否认性(Non-repudiation)、可控性(controllability) 安全性是绝对的，还是和其它因素相关联的？ 安全防护安全服务 安全策略与安全机制 提供安全服务（securityrelated services） 使得系统安全得到保护而免受威胁 制定安全策略（security policy） 安全策略能辨识威胁，并定义出能够确保系统安全的条件 (是对允许什么、禁止什么的规定) * 策略可以是==非技术的==，如在改口令前要求身份认证； 策略常需要技术无法实施的过程性操作。 完善安全机制（security mechanisms） 负责检测和预防攻击，以及从攻击中成功地恢复工作(实施安全策略的一种方法、工具或者规程 ) 安全模型 网络安全模型 访问控制安全模型 密码学理论与技术 Lec2 古典加密技术 密码系统的组成 五元组，对称与非对称密码 密码分析中的统计方法 主要的密码攻击类型 古典密码方法 代换密码 置换密码密码学基本概念 密码系统的完备性基础 \\begin{aligned} C = E(P, K_1) \\\\ P = D(C, K_2) \\end{aligned}C（CyperText 密文） P（Plaintext 原文） 密码系统的构成 密码系统是一个五元组$(M, C, K, E( ) , D( ) )$ 满足下列条件： M是可能明文的有限集（明文空间） C是可能密文的有限集（密文空间） K是一切可能密钥构成的有限集（密钥空间） 密码分析：穷举/强力/分析（以下为分析法） 唯密文攻击 从已知的密文中恢复出明文或密钥； 已知明文攻击 从已知密文和一些明文-密文对中分析明文； 选择明文攻击 可选定任意明文-密文对进行攻击； 选择密文攻击 分析者能选择不同的被加密的密文，并能得到对应的解密的明文（主要用于公钥算法） Kerckhoff假设 一个密码系统的安全性都应该基于密钥的安全性，而不是基于算法的细节的安全性 原因 容易保存 容易分享 防止反向工程 容易更换 结论：公开的密码学设计 更多的实践检验 更容易发现漏洞 避免反向工程的危害 利于构建标准 信息论基础 信息就是排除不确定性 概率越小的事件，信息量越大 密码体制的分类 单钥体制（对称密码体制） $K_1 = K_2$ 系统的保密性大于密钥的保密性。 高速加解密 双钥体制（公钥密码体制） $K_1 eq K_2$ eg. 流密码 易更换 无条件安全（完善保密 unconditional secure） 无论有多少可以使用的密文，都不足以唯一确定由该体制善生密文所对应的明文。 在惟密文攻击条件下，如果一个密码系统其密文和铭文之间的相互信息为0，即 $I(M;C) = 0$，则该系统为完善保密的。 其必要条件为$H(K) \\ge H(M)$ 计算安全（computational secure） 破译密码的代价超过了密文信息的价值 破译密码的时间超出了密文信息的有效生命周期 古典密码技术 代换(Substitution) 明文字母替换为其它字母、数字和符号 换位/置换(Transposition) 对明文字母的某种置换取得一种类型完全不同的映射 基于代换技术的古典密码体制Caesar 移位代换 穷举可解 算法已知 密钥空间仅25个元素（25种偏移量） 明文可读 -&gt; 移位密码 =&gt; ==安全密码体制的密钥空间必须足够大== 单表代换密码 对于密钥穷搜索无效 但由于语言的统计特性，依然不安全 字母的使用频率是不同的 字母组合的使用频率也是不同的 -&gt; 仿射密码 特殊情形的代换密码 $E(x) = ax + b(mod 26), a,b \\in Z_{26}$ 密钥空间 12*26 解密 乘法逆元 $x=a^{-1}(y-b)(\\mod m)$ 单表代换的弱点: 明文的统计特性（语法和明文结构）原样地传递给了密文中! 多表代换密码Playfair将明文中双字母音节作为一个单元，并将其转换为密文的双字母音节 加密规则 预处理明文: 两个字母一组；若两个字母一样，则填充某个固定字母，重分组； 如： Balloon —》 ba lx lo on 一组中的两字母同行，则每个字母用该行的后一字母替代； 一组中的两字母同列，则每个字母用该列的后一字母替代； 非同行同列字母替代，用对角的两个字母替代 分析 26× 26种双字母组合，对单字母判断困难 频率分析变得困难：双字母频率统计规律弱于单字母 Hill一次加密多个字符，多表代换m个连续明文字母被m个密文字母代替。由m个线性方程决定替代方法。 使用矩阵的逆进行解密即可。 优点：完全掩盖单字母频率特性（双字母，三字母。。。）。 可以抵抗已知密文攻击 缺点：不能抵抗已知明文攻击 当K为m×m矩阵，则获取m条（明文，密文）对，就可能获得密钥 Vigenère Cipher 使用多个单字母替换表, 因此一个字母可以被多个字母替换; 密钥的每一个字符确定加解密使用哪个字母表； 密钥的第i个字母表示使用第i个字母表； 依次使用每个字母表； 密钥周期使用。 （每隔r的整数倍，出现单表代换。） 密码分析：Kasiski方法 猜测r的可能值（利用密文中重复字符间距的最大公约数） 测试r是否为密钥长度 分割子序列并计算重合指数（是否接近0.065） 一次一密 OneTimePad 来源于Vernam密码，基于二进制数据 密钥管理困难 安全性来自随机性 不可破译 密钥长度至少和待加密明文一样长 可扩展（可篡改） 基于置换技术的古典密码体制 置换密码 打乱明文字母的顺序 栅栏加密 密文以对角线顺序写为几行，并按顺序读出来。 换位技术 明文携程矩阵块，再按列读出，但是打乱列顺序 -》 对简单的换位：将密文直接写为矩阵块，再推证列的次序 乘积密码 连续使用几种密码来增加破译的困难性 转轮机 Roter Machine 原理：非常复杂多变的代换密码（无perm） 方式：使用一系列的圆筒（每个圆筒是一个多表替换），每个圆筒相当于给出一个周期为26的多表代换算法 隐写术 严格来说，并不是加密 隐藏消息的存在 使用长消息作为代价来隐藏少量的信息 eg. IoT-SmartConfig 利用wifi中的802.11协议信息的长度分段来传递信息 结论 本章涉及的全部密码体制除OTP以外都是不安全的 此处的“安全”指：唯密文攻击/计算安全 OTP在唯密文攻击下无条件安全 2TP是不安全的 以Ad-Hoc的方式，或者以“简单方法”，不可能设计出安全的密码体制 Simple and dirty的体制是不可行的 充足密钥空间准则： 密钥空间的大小必须足以防止穷搜索攻击。这是一个必要而非充分条件 设计安全的密码是一个困难的工作 Lec3-4 常用密码算法 分组密码相关概念 Feistel类密码 DES算法的主要构成 对DES的主要评价 分组密码的设计准则与应用模式 三重DES（构造、特点） IDEA算法（构造、特点） AES算法（构造、特点） SM4算法（构造、特点） 对称加密流密码按位/字节连续、顺序地处理 首先产生一个密钥流，常常采用逐比特/字节异或 Vigenere, Vernam密码 和OTP的安全性比较？ OTP：P.S. K密钥>=P明文 Steam Cipher：C.S. K密钥\\&lt;P明文 分组密码对明文信息分组/块、按组逐一处理 可以看作极大长度字符（64bit或更多）的代换 理想分组密码 均匀随机选取所有可逆变换 对于单个分组，可以达到理想的安全性 不具有可压缩性 SPN密码Substitution Permutation Network 代换-置换网络 Shannon S盒子+P盒子 目的： 混淆 使得密钥和密文的统计关系尽可能复杂 扩散 使得明文的统计特征消散在密文中 初步做法：CDPConfusion Diffusion Paradigm S-box和P-box即密钥k 进一步的做法：SPN 公开/固定S-box和P-box 取而代之使用密钥策略，主密钥推出轮密钥 Feistel密码 使用基于可逆的乘积密码的思想来逼近简单代换函数 一种特殊的SPN 每组分为两半，执行多轮迭代 代换作用于左半，代换后左右两半进行置换 DES算法 DES的单轮变换 分组长度：64bit 密钥长度：56bit，实际上密钥为64bit，不过有8bit为奇偶校验位 子密钥长度：48bit 扩展置换：32bit到48bit S盒：有8个S盒，每个S盒进6bit出4bit。每个S盒对应一个4*16的矩阵，进入S盒的2bit决定行，4bit决定列，行列决定的那个元素就是S盒的输出 轮函数$F$：消息$R(32bit)$作为第一个输入，子密钥$K(48bit)$作为第二个输入，产生长度为32bit 对第一个参数$R$，利用扩展函数扩展成48bit的$E(R)$ 计算$E(R) \\bigoplus K$，结果记作8个6bit $B=b_1b_2b_3b_4b_5b_6$ 使用8个S-box，$S_1S_2…S_8$，每个S盒可以看作是一个固定的4*16矩阵 $b_1b_6$决定行数$r$，$b_2b_3b_4b_5$决定列数$c$ 最后$P$为固定置换 密钥编排算法： $PC-1$：56bit置换 $LS1$：移位操作，移多少位由轮数决定。比如，第1、2、9、16轮移动1bit，其余移动2bit $PC-2$：压缩置换，56bit到48bit。将前28bit中的24bit置换，并去掉9、18、22、25位；将后28bit中的24bit置换，并去掉35、38、43、54位 可以列出16张表对应16轮中使用的密钥，表中的元素表示48bit的子密钥使用了56bit密钥中的哪些位 DES的核心是S-box，除此之外的计算是线性的。在实际使用中，可以采用双重DES与三重DES。其中， 双重$DES$：在加密之后，再用另一个密钥进行加密。但它易受中间者攻击，与DES的安全性无明显区别。 三重$DES$：先用一个密钥加密，再用另一个密钥解密，然后再用第一个密钥加密$C=E{k1}(D{k2}(E_{k1}(P)))$，解密时使用对应密钥解密即可，密钥长度达到112bit（可以防范中间者攻击） IDEA可以对抗差分密码攻击，非S-P盒类型 分组长度64bit，密钥长度128bit，同一算法既可加密又可解密 IDEA的“混淆”和“扩散”设计原则来自三种运算： 逐位异或 模$2^{16}$的整数加 模$2^{16}+1$的整数乘 子密钥16bit 子密钥编排算法：52个16bit的子密钥从128bit的密钥中生成 前8个子密钥直接从密钥中取出 对密钥进行25bit的循环左移，接下来的密钥就从中取出 IDEA的解密： 加解密实质上没有区别，但使用不同的密钥 解密密钥从加密密钥中导出 AESRijindael的轮函数每一轮迭代的结构都一样，由下述4个不同的变换构成，只是最后一轮省略了列混合变换 字节替换：对数据的每一字节应用一个非线性变换——应用一个替代表，表中纵向的x取自状态矩阵中高4bit，横向的y取自低4bit 行移位：对每一行的字节循环重新排序 列混合：对矩阵的列应用一个线性变换——将状态的每一列视为$GF(2^8)$上的多项式$S(x)$，然后乘以固定多项式$a(x)$，并$mod \\; x^4+1$ 轮密钥加：把轮密钥混合到中间数据——对状态和每轮的子密钥进行简单的异或操作 当密钥长度分别为：128、192、256bit时，分别要加密10、12、14轮，且第一次轮密钥加也要用到一轮子密钥。比如，对于AES-128来说，共需要$128 \\times 11=1408bit$ 的密钥 子密钥生成： SM4Lec5 分组码应用模式与伪随机数 分组密码常见工作模式及各自优缺点 电码本模式 密文分组链接模式 输出反馈模式 密文反馈模式 计数器模式 伪随机数 与真随机数的区别 评价标准 典型生成方式ECB (Electronic CodeBook) 弱点：对各个明文组的加密相互独立 多个数据组缺乏安全性（可交换） CBC (Cipher Block Chaining) 消息分块后通过加密进行连接 将上一密文组与新的铭文组异或后再进行加密和链接 适用于大量数据的加密和认证 即使只有一个Block不同也会使得后继Block的加密结果完全不同 最后一个消息分组如小于64Bit，需要填充 方法一：NULL 方法二：写入填充个数 需要初始向量IV 不可以通过历史信息推测出下一个初始向量 必须随机选择！ 如果攻击者获得了IV，可通过预先改变IV的一些位使得接收者的明文中部分位被取反 解决方法：在发送消息前用ECB保护IV 解密： 对每个块分别解密并与上一个块的密文进行异或，可以并行解密CFB (Cipher FeedBack)* OFB (Output FeedBack) 加密函数的输出被反馈回到移位寄存器作为下一次的输入而非密文单元 密钥流可以提前运算，但是该类型密钥流（FB密钥流）不能够并行计算。 优点 传输过程中，比特差错不会扩散 可以预计算分组，流加密时不需停顿 缺点 对抗消息流篡改攻击的能力弱于CFB：若对密文取反，则解密后的明文也取反 可以看作是一次一密的变形（Vernam密码） 所以绝对不能重复使用相同的密钥序列和IV 发送方和接收方必须同步 CTR (Counter) 与OFB相似处：明文与分组的输出异或得到密文。 与OFB的差异：分组加密的输入是计数 对每个明文，必须使用不同的分组密钥和计算器值（绝不重用） 优点 高效 可以并行处理多块明文密文 可以预计算 good for bursty high speed links 随机访问：密文的第i个分组可以随机访问，不需知道前面i-1个密文组（比较： CBC） 可证安全：是CPA安全的 前提：使用了真正的随机数生成器，且每个计数器值绝不重用 缺点 密钥、计数器值绝不能重用 分组码应用模式小结https://zhuanlan.zhihu.com/p/520658724 ECB电码本 -&gt; Basic mode除ECB以外的模式中，解密均需要初始值（IV/CTR）。初始值必须随机选择。 C** -&gt; 在下一个明文块加密时使用上一个块的密文结果 CBC Block chaining 意为分组链接，不支持流加密 但是有一定程度的差错扩散。 五个模式中，仅CBC才用了先异或后加密的方式，其它均为先加密后异或。（即密文是明文经过一定处理后异或得到的结果） CFB cypher feedback，把密文的移位作为了下一个块的加密参数，计算得到密钥后与明文异或。 *FB -&gt; 每次加解密时加密函数使用了不同的参数值，这依赖于上一个块的某些步骤 CFB 新的块加密参数来源于上一个块的密文的移位 OFB 新的块加密参数依赖于上一个块的块加密参数的加密结果 加密均不能并行，不过OFB的密钥流可以提前分离计算。 均可以并行解密。 CTR 计数器 与OFB均产生密钥流。与OFB不同在于没有FB过程，块加密参数来源于计数器的自增。 因为计数器的增加是独立的，所以可以随机加解密、并行加解密。 使用密钥流的方法均不会有差错扩散。 模式名称 可流加密？ 可并行加解密？ 有差错扩散？ ECB（Electronic Codebook） 否 是 否 CBC（Cipher Block Chaining） 否 否（解密可并行） 是 CFB（Cipher Feedback） 是 否（解密可并行） 是 OFB（Output Feedback） 是 否 否（密钥流） CTR (Counter) 是 是 否（密钥流） 随机数 随机数的用途 认证方案(nonce) 会话密钥的产生 RSA公开密钥加密算法中密钥的产生 检验随机程度的两个准则 均匀分布：出现概率大致相等 独立性 不可预测性 可以证明， PRG的安全性与不可预测性是等价的 伪随机数产生器 (C++ 的RND) 线性同余法 m 模数 m&gt;0 a 乘数 $0 \\le a&lt;m$ c 增量 $0 \\le c&lt;m$ $X_0$ 初始值 $0 \\le X_0&lt;m$ 一般将m选为一个给定的计算机所能表示的最多非负整数 此方法受到很彻底的测验 攻击方法 若知道a, c, m，则由一个随机数可以知道后继随机数 即使只知道使用该算法，且知道了四个连续随机数，形成三个线性同余式，就可恢复a, c, m 结论：一旦知道序列的一小部分，不可预测程度就变得很差 用分组密码产生的随机数BBS产生器 (Blum整数) 基于公钥算法，是现在广泛使用的安全随机数产生方法 选择两个大素数，满足 𝑝 ≡ 𝑞 ≡ 3 (mod 4) $𝑁 = 𝑝𝑞$ 选择𝑠与𝑁互素 $X_0 = s^2 mod N$ 输出： $𝑋𝑖 = (𝑋{𝑖-1})^2 mod 𝑁$ $𝐵𝑖 = 𝑋𝑖 mod 2$ 优点 在续位测试下，满足不可预测性： 不存在多项式时间算法，在给定序列的前k位输入时，以不可忽略的概率预测出第k＋1位 安全性基于分解大整数N的困难性 给定任意已知bit仍满足不可预测性 缺点 很慢，因为𝑁必须很大 对密码学应用而言太慢了，仅适用于密钥生成 Lec6 保密通信Lec7 消息认证和Hash函数（认证性） 消息认证的定义 三类认证函数各自的特点及作用 Hash函数的特点，及三大性质 MAC与对称加密的区别， MAC的使用方式消息认证和认证函数 三类产生认证符的函数消息加密（常规加密，对称）：属于对称加密（仅A和B共享密钥K），提供保密和一定程度的认证，但不提供签名（发送者可以否认报文，接收者可以伪造报文）消息加密（公钥密码，非对称）：发送方用接收方的公钥加密信息，接收方用私钥解密，该方案不提供认证；发送方也可以先用自己的密钥加密以提供认证，然后使用接收方公钥加密提供保密性，但这样效率不高 报文加密：以整个报文的密文为认证码 作用： 主要目标是保护报文的隐私和机密性，确保未经授权的用户无法理解报文内容。 过程： 将整个报文使用加密算法和密钥进行转换，生成密文。只有知道正确密钥的接收方才能解密并还原原始报文。 注意： 报文加密通常不直接提供完整性验证或身份认证。它专注于隐藏报文内容，而不涉及验证报文是否被篡改。 报文认证码（MAC）：以一个报文的公共函数和用于产生一个定长值的密钥作为认证符 作用： 用于验证报文的完整性和真实性，确保报文在传输过程中没有被篡改，并且是由合法发送方生成的。 过程： 使用一个密钥和某个报文认证码算法，对整个报文进行转换生成一个固定长度的认证码。接收方使用相同的密钥和算法来验证认证码。 注意： MAC结合了报文内容和密钥，因此只有知道密钥的人才能正确生成和验证认证码。 散列函数：一个将任意长度的报文映射为定长的散列值的公共函数，以散列值作为认证符 作用： 用于生成报文的摘要，通常用于完整性验证和防止篡改。散列函数将任意长度的输入映射为固定长度的输出。 过程： 报文经过散列函数处理，生成散列值，这个散列值可以看作是报文的“指纹”或“摘要”。 注意： 散列函数通常是公共函数，不需要密钥。虽然它不能提供身份认证，但在验证报文完整性方面很有用，因为即使报文发生微小变化，散列值也会显著改变。 综合使用这些机制可以构建更强大的安全系统。例如，常见的做法是将报文先进行加密以保护隐私，然后使用MAC或散列函数来验证完整性。 报文加密对称加密用户A为发信方，用户B为接收方。用户B接收到信息后，通过解密来判决信息是否来自A，信息是否是完整的，有无窜扰。对称加密与认证的关系 A向B发送: $E_K (M)$ 提供保密(仅A和B共享密钥K) 提供一定程度的认证 仅来自A 传输中不会被更改 需要某种结构或冗余，以识别合法明文 不提供签名 接收者可以伪造报文 发送者可以否认报文 公钥加密 散列函数 散列函数是将任意长度的消息映射成一个较短的定长输出消息的函数. 形式: h = H(M), M是变长的消息，h是定长的散列值. 散列函数的目的是为文件、报文或其它的分组数据产生数字指纹 不同的称呼 散列函数 杂凑函数 消息摘要函数 哈希(hash)函数 适用范围 H能用于任何大小的数据分组; H产生定长输出; 数学性质 对任意给定的x, H(x)要相对易于计算,使得软硬件实现都实际可行; 单向性：对任意给定的码h, 寻求x使得H(x)=h在计算上是不可行的; 弱抗碰撞性：任意给定消息x, 寻求不等于x的y, 使得H(y)= H(x)在计算上不可行 强抗碰撞性：寻求对任何的(x,y)对使得H(x)=H(y)在计算上不可行 对输出长度为m的Hash函数，值$2^m/2$决定了该Hash函数抗穷举攻击的能力 散列函数的算法 简单散列算法 容易碰撞，但是可以用于模式匹配 安全散列算法 MD系列 SHA系列 MD5算法 步骤1：添加填充位(一个1 和若干个0)。在消息的最后添加适当的填充位使得数据位的长度满足$length \\times 448 (mod\\, 512)$ 步骤2：添加长度。原始消息长度（二进制位的个数），用64位表示。如果长度超过264位，则仅取最低64位，即mod 264。到此为止，我们已经得到一个长度为512位的整倍数的消息。可以表示为L个512位的数据块： Y0,Y1,…,YL-1。 其长度为L512 bits。令N=L16,则长度为N个32位的字。令M[0…N-1]表示以字为单位的消息表示。 步骤3：初始化MD缓冲区。一个128位MD缓冲区用以保存中间和最终散列函数的结果。它可以表示为4个32位的寄存器(A,B,C,D)。寄存器初始化为以下的16进制值。使用低端格式存储。 步骤4：处理消息块（512位 = 16个32位字）。一个压缩函数是本算法的核心(HMD5)。它包括4轮处理。四轮处理具有相似的结构,但每次使用不同的基本逻辑函数，记为F,G,H,I。每一轮以当前的512位数据块(Yq)和128位缓冲值ABCD作为输入，并修改缓冲值的内容。每次使用64元素表T[1…64]中的四分之一 T表，由sin 函数构造而成。 T的第i个元素表示为T[i]，其值等于$2^{32}\\times abs(sin(i))$,其中i是弧度。由于abs(sin(i))是一个0到1之间的数， T的每一个元素是一个可以表示成32位的整数。T表提供了随机化的32位模板， 消除了在输入数据中的任何规律性的特征 步骤5：输出结果。所有L个512位数据块处理完毕后，最后的结果就是128位消息摘要 消息认证码 MAC认证码（MAC），也称密码校验和，对选定消息使用一个密钥产生一个短小的定长数据分组，并将它附加在消息中，提供认证功能。接收方将收到的MAC与计算得出的MAC相比较，若一致则可以判断消息未被更改且来自发送者（前提是只有收发方知道密钥） 消息认证码的用法： 提供认证 提供保密+认证（先认证，再加密） 提供认证+保密（先加密，再认证） Lec9-10 公钥系统 计算困难性 可计算，计算复杂度， P-NP-NPC问题 公钥密码概念 单向函数 离散对数 单向陷门函数 背包公钥密码 RSA公钥密码 参数选取 简单的分析 涉及的数论 欧拉函数 Fermat定理 素数测试 基于离散对数的密码 Diffie-Hellman密钥交换 ElGamal公钥加密算法 椭圆曲线 椭圆曲线密码ECDSA 公钥系统的安全问题 中间人攻击问题计算困难性 计算复杂性 可计算性： 涉及问题是否可以通过算法来解决。 计算复杂度： 衡量解决问题所需的计算资源，通常以时间和空间为度量。 P-NP-NPC问题 P问题： 可在多项式时间内解决的问题。 NP问题： 可在多项式时间内验证给定解的问题。 NPC问题（NP完全问题）： 一旦找到了任何NP问题的多项式时间解法，就能将其应用到所有NP问题。 公钥密码概念公钥密码系统的要求 每个用户可以方便快捷地产生自己的公私钥对(SK ,PK) 方便快捷地利用公钥PK 对某个消息M 进行加密： C = E_{P_K}[M] 如果拥有私钥SK可以方便快捷地对某个密文进行解密： M = D_{S_K}[C] 对于其他人: 已知公钥$P_K$ 不能得出私钥$S_K$； 已知公钥$P_K$ 和密文$C$，不能得出明文$M$； 单向函数给定x，计算y=f (x)是容易的；给定y, 计算x使y=f (x)是困难的 离散对数问题： 计算 $a^x \\mod p = b$ 中的 $x$。 单向陷门函数 容易计算，但难以逆向计算，即给定 $f(x)$ 很容易，但给定 $f(x)$ 求解 $x$ 难。背包公钥密码 RSA公钥密码参数选取 大素数的选择： 关键参数为两个大素数 $p$ 和 $q$，其乘积 $n = pq$ 极难分解。简单的分析 公钥：$(n, e)$ 私钥：$(n, d)$ 加密：$c \\equiv m^e \\mod n$ 解密：$m \\equiv c^d \\mod n$涉及的数论 欧拉函数 $\\phi(n)$ 表示小于等于 $n$ 且与 $n$ 互质的正整数个数。Fermat定理 如果 $p$ 是素数，那么对于任意 $a$，$a^{p-1} \\equiv 1 \\mod p$。素数测试 判断一个数是否为素数的算法，如Miller-Rabin测试。 基于离散对数的密码Diffie-Hellman密钥协商允许两个远程方在不共享密钥的情况下协商出一个共享密钥，基于离散对数问题的难解性。 是公钥体制的思想来源，但其本身不是公钥加密算法 是基于公钥的密钥分配算法 不可以被用于交换任意消息（不是加密算法） 而是用于建立一对密钥 仅交互双方知道密钥 密钥的值依赖于双方参与者的公开信息和私有信息 安全性依赖于离散对数问题的困难性 步骤 初始化 用户得到全局参数 大素数p 模p的原根g 各个用户（如： Alice）生成各自的公私钥对 选择私钥：正整数 $x_A&lt; p$ 计算公钥：$y{A} \\equiv g^{x{A}}(\\bmod p)$ 各个用户公开自己的公钥 密钥交换 适用于参与者为2个的情形（双方密钥交换），假设参与者为Alice和Bob Alice用自己的私钥和Bob的公钥计算 Bob用自己的私钥和Alice的公钥计算 则有y_{A} \\equiv g^{x_{A}}(\\bmod p)\\begin{array}{l} K \\equiv y_{B}^{x_{A}}(\\bmod p) \\quad K^{\\prime} \\equiv y_{A}^{x_{B}}(\\bmod p) \\\\ K \\equiv y_{B}^{x_{A}} \\equiv\\left(g^{x_{B}}\\right)^{x_{A}} \\equiv\\left(g^{x_{A}}\\right)^{x_{B}} \\equiv K^{\\prime}(\\bmod p) \\\\ K=K^{\\prime} \\end{array} 中间人攻击 身份与公钥无绑定关系导致的 ElGamal公钥加密算法 概要： 使用离散对数问题作为基础，提供了一种基于公钥的加密系统，适用于安全的密钥交换和加密通信。 椭圆曲线密码在相同安全程度要求下，所需要的密钥规模要小得多 ECDSA 概要： 使用椭圆曲线上的数学问题，如椭圆曲线上的离散对数问题，作为基础，用于数字签名，提供了与传统RSA等算法相比更高效的加密和签名性能。 SM2符号约定KDF()：代表用输入计算出一个给定长度的随机数H()：代表用输入计算出哈希(散列)函数值所有指数运算都在椭圆曲线群上进行 具体过程 密钥生成 选择私钥$x$, 计算公钥$\\mathrm{g}^{x}$ 加密算法 选择随机数$k$ 计算公钥$C_1=g^k$ 计算$KDF( ( \\mathrm{g} ^{x}) ^{k})$ 计算$C_{2}=KDF( ( \\mathrm{g} ^{x}) ^{k}) \\oplus M$ 使用KDF算法以公钥$g^x$的k次作为种子计算随机数，与消息异或得到加密值 计算$C_{3}= H( C_2, M)$ 使用哈希算法作为$C_2|M$的消息认证 密文$C{=}C{1}\\left|C{2}\\right|C_{3}$ 将公钥、加密值和消息认证值连接作为密文 解密算法 计算 $M= C_2\\oplus KDF( (C_1) ^{\\mathrm{x}})$ 不需要计算随机数k，而是直接利用C_1部分 私钥为x，计算$C_1^x$，作为种子得到其KDF随机数 与第二部分$C_2$异或得到解密消息 验证 $C_{3}= H(C_2, M)$ 是否成立 通过哈希算法检验$C_2|M$的消息认证 若成立，输出$M$为解密结果；否则报错并退出 正确性检验\\begin{align} M & = D(E(M)) \\\\ & = D(C_1,C_2) \\\\ & = C_2\\oplus KDF( (C_1) ^{\\mathrm{x}}) \\\\ & = (KDF( ( \\mathrm{g} ^{x}) ^{k}) \\oplus M)\\oplus KDF( (g^k) ^{\\mathrm{x}})\\\\ & = M \\end{align}Lec11 数字签名 数字签名及其作用，数字签名的特征（不可伪造） 直接数字签名原理 RSA， DSS， SM2签名方案 公钥的分配途径（特别是公钥证书）数字签名的安全模型 数字签名体制包含下列6个部分： 消息空间$M$：需要签名的所有消息的集合 签名空间$S$：所有可能签名的结果 密钥空间$K$：签名与验证需要的所有可能的私钥/公钥对的集合 密钥生成算法$Gen$ 签名算法$Sign$ 验证算法$Verify$ RSA签名方案基础Ver 公钥$pk = (n,e)$，私钥$sk = d$ 用$d=sk$ 进行加密获得密文$S=M^d \\mod n$ 给定$M||S$ 可由 $M = S^e \\mod n$ 验证 -&gt; 存在问题 签名的存在性伪造：$M^d \\times M^d = M^{2d},M’ = M \\times r^e$ 长文件 -&gt; 分组签名？（实际上签名的是文件的Hash值） 实用Ver 公钥$pk = (n,e)$，私钥$sk = d$，H为密码学安全的Hash函数 签名过程： 需签名的文件M为任意长度 $M’ = H(M), 0&lt;M’&lt;n$ 签名 $S=(M’)^d\\mod n$ 验证过程 给定$M||S$ 可由 $H(M) = S^e \\mod n$ 验证 PKCS1 签名 H：抗碰撞Hash，长度为$h$， 要求$ℎ &lt; 𝑡 - 88$ DI： DigestInfo，是对Hash函数H的编码 FF：填充，使得加上 $H(m)$ 后的长度正好是 $t$ bit 对D用RSA签名 为何要填充至固定长度？ 避免 $𝐻(𝑚1) = 𝑝1, 𝐻(𝑚2) = 𝑝_2,且𝐻(𝑚3) = 𝑃{1}𝑃_{2}$ 的ChosenMessage-Attack DSS签名H: 哈希函数 p: 素数，其中素数的范围应大于2048bits, 比如2189， 二进制写为100010001101， 就是12bits。q: 质数p满足$p|(q-1)$g: $g = h^{(p-1)/q} \\mod p, 1 &lt; h &lt; p-1$x: 随机生成的私钥, 0 &lt; x &lt; py: $y = g^x \\mod p$, 公钥为$(p,q,g,y）$ k: 随机选择数, 范围同样是 $0 &lt; k &lt; p$ 签名过程$r = g^k \\mod p \\mod q$$s = k^{-1} (H(m) + x r ) \\mod q$$(r,s)$组成数字签名 验证过程$w = s^{-1} \\mod q$$a = H(M) \\times w \\mod q, b = r \\times w \\mod q$$v = g^{a}y^{b} \\mod p\\mod q$通过$v?= r$来验证 正确性证明要证$v = r$， 只需证明$g^{u_1} \\cdot y ^ {u_2} \\equiv g^k \\pmod p$ $\\because g^q \\equiv 1 \\pmod p$$\\therefore \\forall n \\in N, g^n \\equiv g^{n \\bmod q} \\pmod p$$\\because y = g^x \\bmod p$ \\begin{align*} \\therefore g^{a} \\cdot y^{b} & = g^{a} \\cdot g^{x \\cdot b} \\pmod p\\\\ & = g^{a + x \\cdot b} \\pmod p\\\\ &= g^{(H(m) + xr) \\cdot w \\bmod q} \\pmod p\\\\ &= g^{\\frac{H(m) + xr}{H(m_0) + xr}\\cdot k \\bmod q} \\pmod p \\end{align*}$m == m_0 \\iff g^{\\frac{H(m) + xr}{H(m_0) + xr}\\cdot k \\bmod q} \\bmod p = g^k \\bmod p \\iff v == r$ 即$m == m_0 \\iff v == r$ ，验证函数成立。 公钥分配公钥加密和签名算法的问题 密钥如何管理？ 公钥的前提：公开自己的密钥 难点：不能轻易接受其他人的公钥 特点：关键不在于加密，而是认证 Hash函数的安全性？ 不安全的Hash函数直接导致签名不安全 公钥授权 A发送带时间戳的消息给公钥管理员，请求B当前公钥; 管理员用自己的私钥签名一条消息（含B的公钥、 A的请求、原始时间戳）给A， A可确认消息来自管理员; A保存B的公钥，生成一个挑战（临时交互号） B用1-2步的方法从公钥管理员处得到A的公钥 对A的挑战形成响应，并对A形成新挑战（N2） A响应B的挑战 公钥证书 由Kohnfelder提出 思想：通信各方使用证书来交换密钥，而不是通过公钥管理员 安全性与从公钥管理员处获得的密钥的可靠性相同 证书由证书管理员产生 包含公钥和其他信息 发给拥有相应私钥的通信方 通信一方通过传递证书将公钥传给另一方 其他人可以验证证书确实是由证书管理员产生的 要求 任何人都可以读取证书并确定证书拥有者的姓名和公钥 任何人可验证证书是真实的 任何人可验证证书是新鲜的（加入时间戳，时间一到更新公钥） 只有证书管理员才能产生和更新证书 效果：类似信用卡 Lec12 网络认证服务Identification， Kerberos与X.509认证服务 Identification身份认证及可能攻击形式 身份认证协议的成员：证明人 VS. 验证人 之间的交互协议 证明人Prover：有一个秘密钥（secret key，简写sk）用于向验证人证明自己的身份 验证人Verifier：有相应的验证密钥（verification key，简写vk）用于验证证明人的说法 可能的攻击形式 直接攻击：攻击者不能窃听，除开公开信息外一无所知 （电子门禁） 窃听攻击：攻击者可以窃听到证明人和验证人之间的一次或多次交互（无线车钥匙） 主动攻击：攻击者利用交互过程来假冒证明人/验证人（ATM，在线银行） 身份认证协议基本组成 密钥生成算法：输出验证密钥vk，秘密钥sk 证明算法： 证明人使用sk产生证明 验证算法： 验证人使用vk验证证明人的输出。 验证通过输出Accept 否则输出Reject 基于口令（Password）的身份认证字典攻击：来源于人类使用的口令往往不是随机的 在线字典攻击 在线针对一个ID使用可能的口令进行穷举，可以根据口令可能的概率来提高攻击成功率；也可根据一个高概率口令来穷举ID。对抗方法为阶梯式提高服务器响应时间。 离线字典攻击 攻击者攻破login服务器，获得口令数据库，针对ID依据H(pw)尝试计算pw 带预处理的离线字典攻击： 攻击者可预先针对全部可能的口令计算出Hash值，再根据收到的验证密钥进行对比 如何提高字典攻击的难度？ 加公开盐（public salt） sk=pw， vk=H(pw, salt)，扩大字典尺寸 提高预处理字典攻击的难度（salt空间应该足够大） 加秘密盐（secret salt） sk=pw, vk=(salt, H(pw, salt, pepper)) pepper很短但不包含在文件中，因此服务器也需要进行一定的穷举，才能完成验证 提高离线字典攻击难度，且没有增加用户的记忆难度 使用慢hash函数 H(d)(x)=H(H(H…H(x))) 使用者“几乎”无感， 离线字典攻击者难度大大提升 典型算法是PBKDF2 使用需要高存储代价的hash函数（Memory hard hash) 直观上说，算法需要保存很多中间步骤，从而消耗memory，降低并行硬件攻击 一次口令认证 基于一次口令（One time Password）的身份认证 （抵御窃听攻击） 窃听攻击模型：攻击者可以窃听到证明人和验证人之间的交互。并试图利用窃听的结果来假冒证明人 在窃听攻击下，原始基于口令的身份认证无效 一次口令：每次协议运行后，口令均更新 一个简单的例子： 证明人和验证人有同样的k，证明人每次用k加密一个验证人知道的counter值给验证人（随后counter自加1），加密的结果看作一次口令. 需要同步：使用时间窗 挑战响应协议 主动攻击模型：攻击者先模拟成验证人，并与拥有sk的证明人交互（并发或者顺序）；再利用交互的结果，试图向真正的验证人（拥有vk）假冒成合法证明人。 主动攻击下，一次口令认证失效 实现方式 利用消息认证码： vk = s k= MAC Key；验证人随机选择挑战m，证明人发出的响应信息是密钥和挑战的一个Mac值 利用签名：实现非秘密vk的挑战响应身份认证 KerberosX.509 X.509 是关于证书结构和认证协议的一种重要标准，并被广泛使用。 X.509 是基于公钥密码体制和数字签名的服务。 版本(Version)： 区分合法证书的不同版本，默认设置为1。如果存在发行商唯一标识或主体唯一标识，则版本号为2；如果存在一个或多个扩展，则版本号为3。 序列号(Serial number)： 一个整数，在CA中唯一标识证书。 签名算法标识(Signature algorithm identifier)： 带参数的、用于给证书签名的算法，由于此信息在证书尾部的域Signature中还会出现，这里很少含该信息。 发行商名字(Issue name)： X.509中创建、签名证书的认证中心CA的名字。 有效期(Period of validity)： 包含两个日期，即证书的生效日期和终止日期。 证书主体名(Subject name): 获得证书的用户名，证明拥有相应私钥的主体是公钥的所有者。 Lec13 IP/Web安全❖应用层： SET/SHTTP❖传输层： SSL/TLS❖网络层： IPSec ❖了解安全Web安全的需求❖了解SSL协议的基本构成，并熟悉 SSL握手协议❖了解有SSL协议的应用 自己动手使用配置有关SSL的应用❖熟悉 IPSec security framework AH, ESP key management &amp; Oakley/ISAKMP❖了解有哪些IPSec应用的低端产品 自己尝试去使用、配置 SSL概况 协议分为两层 上层： SSL握手协议、 SSL修改密文协议、 SSL告警协议 底层： SSL记录协议 SSL记录协议 建立在可靠的传输协议(如TCP)之上 它提供连接安全性，有两个特点 保密性，使用了对称加密算法 完整性，使用HMAC算法 用来封装高层的协议 SSL握手协议 客户和服务器之间相互认证 协商加密算法和密钥 它提供连接安全性，有三个特点 身份认证，至少对一方实现认证，也可以是双向认证 协商得到的共享密钥是安全的，中间人不能够知道 协商过程是可靠 SSL不强制要求双向的认证 SSL过程SSL（Secure Sockets Layer）的三次握手是建立安全连接的过程，用于确保通信的机密性和完整性。SSL已经被其后继标准TLS（Transport Layer Security）所取代，但两者的三次握手过程基本相同。 以下是SSL/TLS的三次握手过程： 客户端Hello（ClientHello）： 客户端向服务器发送一个ClientHello消息，其中包含以下信息： 支持的SSL/TLS协议版本。 一个随机数，用于生成后续的密钥。 支持的加密算法和压缩方法。 服务器Hello（ServerHello）： 服务器选择一个与客户端支持的协议版本、加密算法和压缩方法相匹配的配置，并向客户端发送一个ServerHello消息，其中包含以下信息： 选定的SSL/TLS协议版本。 一个随机数，用于生成后续的密钥。 服务器选择的加密算法和压缩方法。 服务器证书（Server Certificate）和密钥交换消息： 服务器发送包含数字证书的Server Certificate消息，证书中包含服务器的公钥。该证书由数字签名机构（CA）签发，用于验证服务器身份。 如果服务器要求客户端提供证书，服务器还可以发送一个CertificateRequest消息。 服务器发送一个ServerKeyExchange消息，用于密钥协商，具体内容取决于使用的密钥交换方法。 完成服务器Hello（ServerHelloDone）： 服务器发送一个ServerHelloDone消息，表示握手消息的结束。 客户端证书和密钥交换消息（可选）： 如果服务器要求客户端提供证书，客户端会发送一个包含数字证书的ClientCertificate消息。 客户端还可能发送一个ClientKeyExchange消息，包含用于密钥协商的信息。 握手完成（Finished）： 客户端和服务器分别计算握手消息的hash值，使用之前交换的随机数和密钥，然后将这个hash值发送给对方。 一旦接收到对方的握手消息hash值，双方可以验证握手的完整性，确认安全连接已建立。 握手完成后，SSL/TLS连接就建立完成，可以进行加密的通信了。 这个三次握手过程确保了通信的安全性，防止中间人攻击，同时协商双方能够支持的加密算法和其他参数。在握手完成后，客户端和服务器将共享密钥，用于保障后续通信的机密性。 Lec14 安全邮件电子邮件的主要协议 Mail User Agent (MUA) 接受用户输入的指令，将邮件传送至信件传输代理 或通过pop/imap将信件从传输代理服务器取到本机上 常见的有foxmail， outlook express等邮件客户程序 Mail Transfer Agent (MTA) 翻译邮件地址并选择最传佳路径转发邮件, 激活传输代理程序 Simple Mail Transfer Protocol (SMTP): 基于TCP的端到端协议, 邮件从客户机&lt;—&gt;服务器， (RFC 821) POP和IMAP：通称为消息存储MS Post Office Protocol,用户的MTA和服务器通讯并下载邮件 Internet Message Access Protocol,在Client端管理Server上的邮箱 Mail Delivery Agent (MDA) 邮件投递代理，把邮件放到用户的邮箱（MS）里 例如： Sendmail本身并不处理邮件投递，由邮件投递代理或邮差来投递包括UUCP投递代理、 TCP投递代理、本地投递代理 PGP身份认证 发送方 产生消息M 用SHA-1对M生成一个160位的散列码H 用发送者的私钥对H签名，并与M连接 接收方 用发送者的公钥验证并恢复散列码H 对消息M生成一个新的散列码，与H比较。如果一致，则消息M被鉴别。 保密 发送方 生成消息M并为该消息生成一个随机数作为会话密钥 用会话密钥加密M 用接收者的公钥加密会话密钥并与消息M结合 接收方 用自己的私钥解密恢复会话密钥 用会话密钥解密恢复消息M PGP采用CAST-128(或IDEA或3DES)、 64位CFB方式。一次性密钥，单向分发，公钥算法保护。 公开密钥算法的长度决定安全性RSA(768~3072)、 DSS(1024) 两种服务都需要时， 发送者先用自己的私钥签名， 然后用会话密钥加密，再用接收者的公钥加密会话密钥。 一个用户有多个公钥/私钥对时，接收者如何知道发送者是用了哪个公钥来加密会话密钥？ 将公钥与消息一起传送。 将一个标识符与一个公钥关联。对一个用户来说做到一一对应。 定义KeyID 包括64个有效位： (KUa mod 2^64) KeyID同样也需要PGP数字签名。 信任关系尽管PGP没有包含任何建立认证权威机构或建立信任体系的规格说明，但它提供了一个利用信任关系的手段，将信任与公钥关联，利用信任信息。 Key legitimacy field：表明PGP将信任这是一个对该用户是合法的公钥；信任级别越高，这个userID对这个密钥的绑定越强。这个字段是由PGP计算的。 每一个签名与一个signature trust field关联，表明这个PGP用户对签名人对公钥签名的信任程度。 Key legitimacy field 是由多个signature trust field 导出的。 Owner trust field：表明该公钥被信任用于签名其它公钥证书的信任程度。这一级别的信任是由用户给出的。 S/MIMES/MIME更象商用或组织使用的工业标准，而PGP更面向个体用户选用。"},{"title":"CS3311 计算机网络","path":"/files/courseNotes/2023(1)/计算机网络.html","content":"王道烤盐 ch1 计网体系结构计算机网络概述 组成部分 工作方式 边缘部分 用户直接使用 C/S client-server * B/S: brower-server P2P 核心部分 功能组成 通信子网 资源子网 性能指标 速率，带宽，吞吐量 时延 发送/传输~，传播~，排队~，处理~ 时延带宽积 -&gt; 容量 RTT 往返时延 发送方发送 -&gt; 发送方接收到确认 利用率 体系结构&amp;参考模型计算机网络的各层及其协议的集合 7层OSI模型（法定标准） 4层TCP/IP模型 （事实标准） ch2 应用层 Application architecture Client-server P2P hybrid of client-server and P2P Skype: centralized server to find address of remote party, then client-client connection Sockets：进程与计算机网络之间的接口 transport service 一些指标 data loss delay throughput security Internet transport services TCP connection-oriented: 需要先建立连接 reliable transport flow control: 发送的消息不会overwhelm接收方（对于接收方） congestion control: 控制网络不会拥堵（对于网络） UDP use packet-switch unreliable data transfer Process identifier = IP address + port number DNS DNS (Domain Name System): map www.sjtu.edu.cn —&gt; 202.120.2.119 distributed, hierarchical database root name servers TLD (top-level domains) Local name server: Client needs to be configured with local name server manually or via DHCP. 找到DNS name的方法：iterated query 先local DNS server，然后让local DNS server去找：root DNS server，TLD DNS server，authoritative DNS server 找到DNS name的方法：recursice query 先找local DNS server，然后local DNS sever找root DNS server，然后root DNS server找TLD DNS server，然后TLD DNS server找authoritative DNS server。 Web and HTTPWWWclient/server model with http 首先用DNS把url转换成IP address 建立tcp connection 发送http request 等待http response fetch embedded resources 清除闲置的tcp connection HTTPHyper Text Transfer Protocol 使用TCP，先建立TCP连接，然后用http发送请求 http是stateless的：不维持状态 cookies：server在client那里drop一个cookie，保存着server state。然后每次client发消息，就把之前的cookie一起发给server。相当于给client配了一个id，然后server可以在数据库里记录client的情况 HTTP Performance: Page Load Time (PLT) Round Trip Time (RTT): time for a small packet to travel from client to server and back. 一个来回叫一个RTT Page Load Time (PLT): one RTT to initiate TCP connection one RTT for HTTP request and first few bytes of HTTP file transmission time total = 2RTT + transmit time Nonpersistent HTTP: one object sent over one TCP connection，每次发都要新建一个新的tcp connection PLT = N*RTT + transmit time Ways to decrease PLT 同时并行发多个http请求 尽量用persistent http move content closer to client SPDY，一种更快的web protocol web cache (proxy server) 目标：不用server，加个cache就行（中间环节） browser直接发request到cache，如果有则拿，没有的话cache再向server请求 cache acts as both client and server conditional GET：cache在发GET给server的时候，加个modify的date，如果date不一样，那server就返回新的data。否则就不用返回新data，回一个304 not modified。 content delivery networks：client接收完内容后，再把内容发给其他server和cache。这样下次别人要用可以直接拿cache和server里的。 FTP Client-server model 有两种connection，分开的： TCP control connection，是persistent的 TCP data connection，每个文件都要新开一个connection，是non-persistent FTP server maintains “state”: current directory, earlier authentication Electronic Mailemail是怎么做到receiver不在的时候我们的mail也能发到呢？ 四个部分 user agents mail servers transfer protocol (SMTP) ，服务器之间发送email access protocol (POP3, IMAP)，从服务器拿取email P2P applications P2P挑战： No servers on which to rely: Communication must be peer-to-peer and self-organizing, not client-server. 必须自己调度！ Limited capabilities: How can one peer deliver content to all other peers? 一个人要发很多人怎么办？ Decentralized indexing: How will peers find content,find each other? 怎么找到其他人？ Participation incentives: Why will peers help each other? 为什么要互相帮助？ Distributed Hash Table (DHT) Circular DHT: 每个peer只知道后继节点的ID. $ID(peer)=hash(IP, port)$ key look up: 平均$O(N)$的复杂度 key look up with shortcuts: 每个peer也维持一些shortcut，可以降到$O(logN)$ DHT Finger Table： chap2-2, P25 peer leave and join: 每个peer记住它后面两个节点，定时ping一下看看在不在，第一个节点走了的话，就让第二个节点把它的后面节点发过来。 BitTorrent Protocol 选一个要接收的文件，和tracker请求peer list，然后和peer们进行传输 tit-for-tat: 一报还一报。过程： alice给bob乐观地来点加速，alice成为bob的top 4 bob回报alice，bob也成为alice的top 4 Trackerless BitTorrent: 用DHT来标记文件和peer P2P Case study: Skype hierarchical overlay with SuperNodes 问题：alice和bob都在NAT之后 解决方法: Alice and Bob connectwith their SNs. Relay is chosen. Each peer initiates session with relay. Peers can now communicate through NATs via relay. Socket programming with TCP/UDP 什么是socket：a door between application process and end-endtransport protocol (UDP or TCP) 应用层和传输层的桥梁 server和client得有一个socket number socket用port number和IP进行区分 需要connection的socket（TCP）： 不需要connection的socket（UDP）： ch3 传输层 单位：segment 提供进程间的数据传输服务 软/硬件 = 传输实体 entity （网络层：主机间） 复用和分用 差错检测 Segment (Transport layer) -&gt; Packet (Network layer) -&gt; Frame (Datalink layer) Multiplexing and demultiplexing Ports: server的port选的比较well known，client的port选的比较ephemeral（随意？） Upward multiplexing和downward multiplexing，看个图就明白了 Multiplexing/demultiplexing: 先把所有socket的数据都合起来发出去，再在接收方那里解开，分到不同的socket。 带connection的demux，TCP socket：带一个四元组，src IP and port, dst IP and port 不带connection的demux，UDP socket: 带一个二元组，dst IP, dst port差错检测：CRC Given m data bits, generator polynomia- of degree r G(x): Append r zero bits to the low-order end of the frame (it now contains m + r bits. ) Divide the m + r bits with r + 1 bit string corresponding to G(x) using modulo 2 division (no carries for addition or borrows for subtraction. Both addition and subtraction are identica- to exclusive OR). The remainder is the r bits CRC. Append the r bits to the m data bits into a m+r codeword which is divisible (modulo 2) by G(x). When the receiver gets the checksummed frame, it tries dividing it by G(x). If there is a remainder, there has been a transmission error. 两个主要协议 UDP 用户数据报协议 提供无连接服务 对方的运输层在收到UDP报文后，不需要给出任何确认 单位：UDP用户数据报 低时延，小文件适用 TCP 传输控制协议 提供面向连接的服务 不提供广播或多播服务 单位：TCP报文段 高时延，大文件适用UDP 无连接 不保证可靠交付 可能发生lost,error,out of order (可在应用层增加可靠性) 面向报文 适合一次性传输少量数据 实时传输，无拥塞控制 首部开销小 首部格式 8B，由4部分构成 UDP长度：数据报差别 检验和：检测是否出错 分用如果找不到目的端口，则由发送方发送不可达信息（ICMP） UDP校验 伪首部只用于计算检验和，不向下传送也不向上递交 具体步骤（发送端） 填上伪首部 全0填充检验和字段 全0填充数据部分 伪首部+首部+数据采用二进制反码求和 和求反码填入检验和字段 去掉伪首部并发送。 （接收端） 填上伪首部 伪首部+首部+数据采用二进制反码求和 结果全1则无差错 主要特点 UDP是无连接的 UDP使用尽最大努力交付 UDP是面向报文的 UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界 应用程序必须选择合适大小的报文 若报文太长，IP层在传送时可能要进行分片 若报文太短，会使IP数据报的首部的相对长度太大 UDP没有拥塞控制 因此网络出现的拥塞不会使源主机的发送速率降低 UDP支持一对一、一对多、多对一和多对多的交互通信 UDP的首部开销小，只有8个字节，比TCP的20个字节的首部要短 Why UDP? no connection establishment (which can add delay) no retransmission (which can add delay) simple: no connection state at sender, receiver small segment header: 8 bytes no flow control and congestion control: UDP can blast away as fast as desired TCP Go-Back-N (GBN): 发送方： GBN是一种滑动窗口协议，发送方可以连续发送多个数据帧，直到达到窗口大小为止。发送方会等待收到对窗口内所有数据帧的确认，然后才能发送下一个窗口的数据帧。 接收方： 接收方按序接收数据帧，如有帧丢失，就会回退（Go-Back）并重新请求所有未确认的帧。 接收方丢弃所有失序分组 优点：接收方只需要缓存一个包就行，不需要缓存失序分组 **Selective Repeat (SR): 只重传那些没有正确ACK的包 发送方和接收方都维持相同大小的window size。接收方把接收到的都buffer住。 $sending\\ window + receiving\\ window \\leq MAX\\ SEQ+1$ 发送方： SR也是一种滑动窗口协议，允许发送方同时发送多个数据帧。与GBN不同，发送方只需要重传丢失的帧，而不是整个窗口。 接收方： 接收方按序接收数据帧，并确认它们。即使有帧丢失，接收方也会继续按序接收后续的帧。 Transmission Contro- Protoco- (TCP): 特点： TCP是一种面向连接的协议，提供可靠的、有序的数据传输。它使用滑动窗口协议，但其设计更为复杂。TCP包括流量控制、拥塞控制、连接建立和断开等多个功能。 连接建立： 通过==三次握手==建立连接，确保双方都准备好进行通信。 累积确认： TCP使用==累积确认==的机制。这意味着如果接收方成功接收了某个字节之前的所有字节，它只需确认最后一个字节，而不必逐个确认每个字节。 累积确认号和确认标志： TCP报文头部中的确认号字段指示下一个期望接收的字节。 确认标志（ACK标志）用于指示报文是一个确认报文。 滑动窗口： 使用滑动窗口来控制发送和接收的数据量，以提高网络利用率。 可靠性： 提供==数据确认==、==重传==机制以确保数据的可靠传输。 流量控制和拥塞控制： TCP包括流量控制机制，防止快速发送方淹没较慢的接收方；包括拥塞控制，以应对网络拥塞情况。 TCP congestion controlcongestion control: open loop, closed loop Congestion Avoidance：提前预测，及时避免，主要两种方法 host centric：TCP congestion control Router-centric: warning bit, choke packet, load shedding AIMD: Additive Increase, Multiplicative Decrease MD: decrease window by factor of 2 when loss，减少的时候一下子除以2 AI: additive increase until packet loss，增加的时候一个个加 Explicit Congestion Notification： 直接通知堵塞的packet的sender 丢包判断: time out 连续3个duplicate的ACK TCP Tahoe/Reno implements AIMD to limit the sending rate. Sender uses packet loss as the network congestion signal. TCP use a Congestion Window (CongWin) next to the window granted by the receiver. The actual window size is the minimum of the two. Self-clocking: The CongWin size should be adjusted frequently, to match the networking carrying capacity 端口 虽然通信的终点是应用进程，但只要把所传送的报文交到目的主机的某个合适的目的端口 TCP/IP的运输层用一个16位端口号来标志一个端口，端口号只具有本地意义 服务端 熟知端口号 0-1023 登记端口号 1024-49151 客户端 仅在客户进程运行时才动态选择 49152-65535 套接字 = IP + 端口号 IP确定主机 端口号确定进程 ch4 网络层主要任务：把分组从源端传输到目的端，为分组交换网上的不同主机提供通信服务 allow packets to be sent between any pair or hosts 路由器的工作： routing: determine route from source to dest; determine the output link. forwarding/switching: move packets from router’s input to appropriate router output congestion control: drop packets, update routing table IP service model: Datagram 数据报 Unreliable Best effort Connectionless No per-flow state, might mis-sequece packets Virtual-Circuit and Datagram Switching Datagram Switching destination address as the index of forwarding Forwarding table 转发表 Longest Prefix Matching 减小转发表长度 Virtual-CircuitVC consists of: path from source to destination VC numbers entries in routers along path packet carries VC number (rather than dest address) as the index of forwarding 转发表示例： incoming interface incoming VC# outgoing interface outgoing VC# 1 12 3 22 2 63 1 18 3 7 2 17 1 97 3 87 Router architecture Four parts: input and output port, routing processor and switching fabric. Two key router functions: run routing protocol RIP, OSPF, BGP forwarding datagrams from incoming to outgoing link Input Port Queuing Head-of-the-Line (HOL) blocking: queued datagram at front of queue prevents others in queue from moving forward Output Port Queuing buffering when arriva- rate via switch exceeds output line speed queueing (delay) and loss due to output port buffer overflow! Packet SchedulingScheduling: chooses among queued datagrams for transmission fair queuing weighted fair queuing IP: Internet ProtocolDatagram format IP Header TOS IP Fragmentation and Reassembly Network links have Maximum Transmission Unit (MTU) IPv4 Classfu- IP addressing Specia- addresses Class Address A 10.0.0.0 - 10.255.255.255 B 172.16.0.0 - 172.31.255.255 C 192.168.0.0 - 192.168.255.255 Subnetting: dividing an IP network into two or morenetworks VLSM (Variable Length Subnet Mask) 子网掩码 IP address = subnet id + host id how to denote subnet mask? a.b.c.d/x, where x is # bits in subnet portion of address 1 for subnet id bits, 0 for host id bits (e.g. 255.255.255.0) how to assign IP addresses for the subnets? fix subnet part first fix host part first -&gt; Given a class C IP address 223.1.1.0, how to assign IP addresses for the subnets? Host first Subnet first: 6 subnets (&gt;= 8 parts, host ID &lt;= 5 bits) -&gt; x = 27 .32 -&gt; .64 -&gt; .96 … -&gt; .192 (use broadcast address to indicate al- IP under a subnet) 网络地址：表示了整个网络，不能被分配给具体的主机。例如，在子网掩码为/24的网络中，网络地址是第一个地址，即 x.x.x.0，不属于主机地址 广播地址： 广播地址用于将数据包发送到网络上的所有主机。例如，在子网掩码为/24的网络中，广播地址是最后一个地址，即 x.x.x.255。 CIDR表示法 Classless InterDomain Routing Assign class C addresses in contiguous blocks of 256 addresses so that multiple entries in routing table can be reduced into one CIDR表示法（a.b.c.d/x）转换为子网掩码通过将所有32位的二进制数中的前 x 位设置为 1，然后将 32-x 设置为 0 来完成。 /26确定了subnet标识符的长度为32位IP地址的前26位 subnet mask的前25位则位1，其余位设置为0，即可得到子网掩码 DHCPDHCP的工作流程如下： 设备连接到网络时，它发送DHCP请求（DHCP Discover）以寻找可用的DHCP服务器。 DHCP服务器收到请求后，为设备提供IP地址和其他配置信息（DHCP Offer）。 设备选择一个提供的配置，并向选择的DHCP服务器发送请求（DHCP Request）。 服务器确认请求，设备获得分配的IP地址和配置信息（DHCP Ack）。 通常路由器或无线路由器会集成DHCP服务器功能，以便自动为连接到网络的设备分配IP地址。 NAT: Network Address Translation Motivation: hosts in LANs use private IP addresses and share one public IP address for Internet access: handle public IP address shortage. can change addresses of devices in LAN without notifying outside world can change ISP without changing addresses of devices in LAN devices inside not explicitly addressable, visible by outside world (a security plus). NAT traversa- problem solution 1: 静态NAT端口映射在NAT设备上手动配置 statically configure NAT to forward incoming connection requests at given port to server e.g., (123.76.29.7, port 2500) always forwarded to 10.0.0.1 port 25000 端口地址转换（Port Address Translation，PAT）结合使用。在PAT中，多个设备可以共享同一个公共IP地址，但通过使用不同的端口号来区分它们。 solution 2: Universa- Plug and Play (UPnP) Internet Gateway Device (IGD) Protocol. NATed主机可以在运行时动态配置端口映射，无需手动干预NAT规则。 ==automate static NAT port map configuration== Allows NATed host to: learn public IP address (138.76.29.7) **学习公共IP地址 NATed主机可以使用UPnP协议获取与NAT设备关联的公共IP地址。这对于NATed主机了解其在互联网上的外部标识是很有用的。 add/remove port mappings (with lease times) **添加/删除端口映射 NATed主机可以通过UPnP协议请求NAT设备在路由器上创建或删除端口映射。这意味着NATed主机可以动态配置路由器以允许从外部访问它的服务。 映射的端口是由UPnP协议与NAT设备协商确定的，租约时间规定了端口映射的持续时间，一旦过期，NAT设备可以自动删除映射。 solution 3: relaying (used in Skype) NATed client establishes connection to relay 中继 Externa- client connects to relay relay bridges packets between to connections 在中继方案中，不需要在NAT设备上配置端口映射规则，也不需要NATed客户端能够接收来自外部网络的连接。两方客户端都只需知道中继服务器的公共IP地址进行联络，而不需要直接处理彼此所在的NAT过程。 ICMP (Internet Contro- Message Protocol) used by hosts &amp; routers to communicate network-leve- information error reporting: unreachable host, TT- exceeded, redirect, Checksum failed etc. echo request/reply (used by ping) network-layer “above” IP: Type Code description 0 0 echo reply (ping) 3 0 dest. network unreachable 3 1 dest host unreachable 3 2 dest protoco- unreachable 3 3 dest port unreachable 3 4 ==fragmentation needed== [for path MTU discovery] 3 6 dest network 3 7 dest host 4 0 source quench (congestion contro- - not used) 8 0 echo request (ping) 9 0 route advertisement 10 0 router discovery 11 0 ==TT- expired== [for traceroute] 12 0 bad IP header IPv6 Initia- motivation: 32-bit address space soon to be completely allocated. Additiona- motivation: header format helps speed processing/forwarding header changes to facilitate QoS IPv6 datagram format: fixed-length ==40 byte header== extension headers allowed IPv6 Addresses The 16-byte IPv6 address is written as 8 groups of 4 hexadecima- digits with colons between e.g. FE80::202:B3FF:FE1E:8329 An IPv6 address can be in one of three categories: Unicast: A packet sent to a unicast address is delivered to the interface identified by that address. Multicast: The packet wil- be processed by al- members of the multicast group. Anycast (new to IPv6): The packet wil- be delivered to only one of the interfaces configured for the anycast address — usually to the nearest one. SDN数据平面-&gt;转发过程 硬件为主控制平面-&gt;路由选择过程（较为复杂） 软件为主 传统-&gt;SDN 传统：路由选择器执行控制平面功能。既进行转发，也维护转发表 SDN：路由选择处理器负责与远程控制器通信，接受其计算的转发表项 路由选择 Routingchap4-2 路由选择算法 static/dynamic routing Link State Routing (LSR) Each router learns the entire network topology throughexchanging information with all other routers, and thencalculate least cost path to the other routers. Each router must do the following: Discover its neighbors, measure the delay or cost to each of its neighbors. Construct a packet telling all it has just learned. Flood 洪泛 this packet to all other routers. Compute the least cost path to every other router when costs of all the edges learnt All least cost paths from a given source to other nodes in the network, constitute a sink tree Distance vector routing (DVR) 距离向量路由 eg. 分布式Bellman-Ford路由算法, RIP Each router maintains a table (i.e Distance Vector) with leastcost/distance to every other routers. Each router must do the following: Discover its neighbors, measure the cost to each neighbor v. Exchange DV with the neighbors. Recalculate DV (the new least cost to every other routers) with the Bellman-Ford equation: $d_x(y) = min (c(x,v) + d_v(y) )$ where $d_x(y)$ is least-cost from x to y, min is taken over all neighbors v of x DVR “count to infinity” problem good news travels fast. bad news travels slowly : count-to-infinity in the presence of node crashes unsuitable for large network.LSR vs DVR message complexity: how many msgs sent between all n nodes? LS: with n nodes, E links, totally $O(n\\times E)$ msgs sent DV: exchange between neighbors only, totally $O(n)$ msgs sent computation complexity: algorithm for calculating least cost each LS: Dijkstra , $O(n^2)$ DV: Bellman-Ford equation , $O(n)$ speed of convergence: given a change, how long until the network re-stabilizes? LS: 1 iteration. may have oscillations DV: n iterations. Good news travel fast, but possible count-to-infinity problem for bad news. Robustness: what can happen if a router fails or misbehaves? LS: robust. Node route calculations are somewhat separated DV: an incorrect node calculation can be diffused through the entire network. A node can advertise incorrect least-cost paths to its neighbors and then pass indirectly to its neighbor’s neighbors and then to all destinations. Hierarchical Routing 层次路由算法hierarchical routing saves table size, reduced update traffic. “autonomous systems” (AS) aggregate routers into regions, correspond to an administrative domain 管理域. Assigned an unique 16/32 bit number. ==intra-AS==/interior gateway routing 内部网关路由 should find the least cost path as best as possible routers in same AS run same routing protocol -&gt; trusted routers in different AS can run different intra-AS routing protocol ==inter-AS==/exterior gateway routing 外部网关路由 has to deal with a lot of politics. Routers do not automatically use the routes they find, but have to check manually whether it is allowed. admin controls over how traffic routed -&gt; untrusted Broadcast routingIn-network duplication flooding: when node receives broadcast packet, sends copies to all neighbors Problems: cycles &amp; broadcast storm controlled flooding： TTL，age node keeps track of packet IDs already brdcsted reverse path forwarding (RPF): only forward packet if it arrived on shortest path between node and source spanning tree no redundant packets received by any node Reverse Path Forwarding Method: use the routing table reversely. If the broadcastpacket comes from a node which is the next hop to the source,then forwards copies of it onto all lines except the one itarrived on, else discards it. Pros: efficient and easy to implement ch5 数据链路层Link layer is implemented in “adaptor” (network interface card NIC) in each host and routers. Data-link layer has responsibility of transferring datagram from one node to physically adjacent node over a link (node-to-node job) Functions reliable data transfer 可靠传输 error control 差错控制 flow control 流量控制 sharing a broadcast channel: multiple access control link layer addressing 封装成帧和透明传输 Functions 加强物理层传输原始比特流的功能，使之对网络层表现为无差错链路 封装成帧 添加首尾部，构成帧定界 帧同步：接收方可以从二进制比特流中区分帧的起始和终止 透明传输 不管所传数据是什么组合，都应当可在链路上传输。 所传数据的比特组合恰好等于控制信息也不会导致误认。 字符计数法 容易出错 字符填充法 SOH data EOT Start of header End of transimission 在数据段内的SOH和ESC前添加转义字节防止误判 零比特填充法 每遇到5个1就填充1个0 Two point-to-point Data Link Protocols HDLC – High-Level Data Link Control 高级数据链路控制 A pretty old, but widely used protocol for point-to-point connections. bit-oriented PPP – The Point-to-Point Protocol 点到点协议 Internet standard (RFC1661 1662 1663), is used in the Internet for a variety of purposes, including router-to-router traffic and home user-to-ISP traffic. byte-oriented ch6 物理层 信源 - 信道 -&gt; 信宿 通信方式 单工通信 单一方向，单一信道 半双工/双向交替通信 均可发送和接受，但是不能同时 两条信道 全双工/双向同时通信 传输方式 串行/并行 同步/异步 同步：以数据区块为单位，先送出同步字符 异步：以组为单位，加字符起始位和终止位 码元 固定时长的信号波形 M个离散状态 -&gt; M进制码元 奈氏准则在理想低通条件下，为了避免码间串扰，极限码元传输速率为2W Baud，W为信道带宽，单位为Hz。 香农定理噪声存在于所有的电子设备和通信信道中。由于噪声随机产生，它的瞬时值有时会很大，因此噪声会使接收端对码元的判决产生错误。但是噪声的影响是相对的，若信号较强，那么噪声影响相对较小。因此，信噪比 (信号的平均功率S/噪声的平均功率N -&gt; db表示 = $10log_{10}S/N$) 就很重要。 编码&amp;调制 信号类型 基带信号：直接表达了要传输的信息的信号 数字信道 -&gt; 基带传输 宽带信号：基带信号调制后的频分复用模拟信号 模拟信道 -&gt; 宽带传输 数据 -&gt; 数字信号（编码） 曼彻斯特编码：自同步，但是占用两倍宽度的频带，数据传输速率为调制速率的一半+差分：同1异0（虚线两侧）。更强的抗干扰性 信号电平翻转表示0 4B/5B：额外插入比特，保留控制码 模拟数据 -&gt; 数字信号高保真：PCM 脉码调制 f采样频率&gt;=2f信号最高频率 数据 -&gt; 模拟信号（调制）调频+调相 = QAM 可以表示的码元类型为相位类型数*振幅类型数 模拟数据 -&gt; 模拟信号频分复用 数据交换电路交换 建立连接 -&gt; 通信 -&gt; 释放连接 高占用，低时延，建立连接时间长，全双工，控制简单 报文交换存储转发 只适用于数字信号 分组交换分组后存储转发 数据报方式 无连接服务 分组多次，不能保证到达顺序 每次转发进行验证后删除，有一定时延 虚电路方式 连接服务 需要携带虚电路号信息 顺序保证 传输介质物理通路 导向性 双绞线 屏蔽~ STP，非屏蔽~ UTP 同轴电缆 光纤 光脉冲 带宽极大 实心纤芯 + 包层 单模 -&gt; 横向，远距离；多模 -&gt; 易失真，近距离 非导向性 无线电波：所有方向 强穿透，远距离 微波：定向 地面微波接力通信 卫星通信 红外线/激光：定向 设备 中继器 再生和还原数字信号 没有存储转发功能 使用范围有限制：5-4-3规则 集线器 再生 放大 转发信号 共享式设备 非定向"}]